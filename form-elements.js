!function(e){var t={};function n(a){if(t[a])return t[a].exports;var i=t[a]={i:a,l:!1,exports:{}};return e[a].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(a,i,function(t){return e[t]}.bind(null,i));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/hotel/",n(n.s=221)}([function(e,t,n){(function(e){e.exports=function(){"use strict";var t,a;function i(){return t.apply(null,arguments)}function r(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function s(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function o(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function d(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(o(e,t))return!1;return!0}function l(e){return void 0===e}function u(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function c(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function h(e,t){var n,a=[];for(n=0;n<e.length;++n)a.push(t(e[n],n));return a}function m(e,t){for(var n in t)o(t,n)&&(e[n]=t[n]);return o(t,"toString")&&(e.toString=t.toString),o(t,"valueOf")&&(e.valueOf=t.valueOf),e}function _(e,t,n,a){return Dt(e,t,n,a,!0).utc()}function f(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidEra:null,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],era:null,meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function p(e){if(null==e._isValid){var t=f(e),n=a.call(t.parsedDateParts,(function(e){return null!=e})),i=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidEra&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(i=i&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return i;e._isValid=i}return e._isValid}function g(e){var t=_(NaN);return null!=e?m(f(t),e):f(t).userInvalidated=!0,t}a=Array.prototype.some?Array.prototype.some:function(e){var t,n=Object(this),a=n.length>>>0;for(t=0;t<a;t++)if(t in n&&e.call(this,n[t],t,n))return!0;return!1};var y=i.momentProperties=[],M=!1;function v(e,t){var n,a,i;if(l(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),l(t._i)||(e._i=t._i),l(t._f)||(e._f=t._f),l(t._l)||(e._l=t._l),l(t._strict)||(e._strict=t._strict),l(t._tzm)||(e._tzm=t._tzm),l(t._isUTC)||(e._isUTC=t._isUTC),l(t._offset)||(e._offset=t._offset),l(t._pf)||(e._pf=f(t)),l(t._locale)||(e._locale=t._locale),y.length>0)for(n=0;n<y.length;n++)l(i=t[a=y[n]])||(e[a]=i);return e}function L(e){v(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===M&&(M=!0,i.updateOffset(this),M=!1)}function b(e){return e instanceof L||null!=e&&null!=e._isAMomentObject}function k(e){!1===i.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function Y(e,t){var n=!0;return m((function(){if(null!=i.deprecationHandler&&i.deprecationHandler(null,e),n){var a,r,s,d=[];for(r=0;r<arguments.length;r++){if(a="","object"==typeof arguments[r]){for(s in a+="\n["+r+"] ",arguments[0])o(arguments[0],s)&&(a+=s+": "+arguments[0][s]+", ");a=a.slice(0,-2)}else a=arguments[r];d.push(a)}k(e+"\nArguments: "+Array.prototype.slice.call(d).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)}),t)}var D,w={};function x(e,t){null!=i.deprecationHandler&&i.deprecationHandler(e,t),w[e]||(k(t),w[e]=!0)}function T(e){return"undefined"!=typeof Function&&e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function S(e,t){var n,a=m({},e);for(n in t)o(t,n)&&(s(e[n])&&s(t[n])?(a[n]={},m(a[n],e[n]),m(a[n],t[n])):null!=t[n]?a[n]=t[n]:delete a[n]);for(n in e)o(e,n)&&!o(t,n)&&s(e[n])&&(a[n]=m({},a[n]));return a}function H(e){null!=e&&this.set(e)}function j(e,t,n){var a=""+Math.abs(e),i=t-a.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,i)).toString().substr(1)+a}i.suppressDeprecationWarnings=!1,i.deprecationHandler=null,D=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)o(e,t)&&n.push(t);return n};var P=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,C=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,A={},O={};function E(e,t,n,a){var i=a;"string"==typeof a&&(i=function(){return this[a]()}),e&&(O[e]=i),t&&(O[t[0]]=function(){return j(i.apply(this,arguments),t[1],t[2])}),n&&(O[n]=function(){return this.localeData().ordinal(i.apply(this,arguments),e)})}function W(e,t){return e.isValid()?(t=F(t,e.localeData()),A[t]=A[t]||function(e){var t,n,a,i=e.match(P);for(t=0,n=i.length;t<n;t++)O[i[t]]?i[t]=O[i[t]]:i[t]=(a=i[t]).match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"");return function(t){var a,r="";for(a=0;a<n;a++)r+=T(i[a])?i[a].call(t,e):i[a];return r}}(t),A[t](e)):e.localeData().invalidDate()}function F(e,t){var n=5;function a(e){return t.longDateFormat(e)||e}for(C.lastIndex=0;n>=0&&C.test(e);)e=e.replace(C,a),C.lastIndex=0,n-=1;return e}var N={};function I(e,t){var n=e.toLowerCase();N[n]=N[n+"s"]=N[t]=e}function R(e){return"string"==typeof e?N[e]||N[e.toLowerCase()]:void 0}function z(e){var t,n,a={};for(n in e)o(e,n)&&(t=R(n))&&(a[t]=e[n]);return a}var B={};function V(e,t){B[e]=t}function q(e){return e%4==0&&e%100!=0||e%400==0}function J(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function U(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=J(t)),n}function $(e,t){return function(n){return null!=n?(K(this,e,n),i.updateOffset(this,t),this):G(this,e)}}function G(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function K(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&q(e.year())&&1===e.month()&&29===e.date()?(n=U(n),e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),be(n,e.month()))):e._d["set"+(e._isUTC?"UTC":"")+t](n))}var X,Z=/\d/,Q=/\d\d/,ee=/\d{3}/,te=/\d{4}/,ne=/[+-]?\d{6}/,ae=/\d\d?/,ie=/\d\d\d\d?/,re=/\d\d\d\d\d\d?/,se=/\d{1,3}/,oe=/\d{1,4}/,de=/[+-]?\d{1,6}/,le=/\d+/,ue=/[+-]?\d+/,ce=/Z|[+-]\d\d:?\d\d/gi,he=/Z|[+-]\d\d(?::?\d\d)?/gi,me=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;function _e(e,t,n){X[e]=T(t)?t:function(e,a){return e&&n?n:t}}function fe(e,t){return o(X,e)?X[e](t._strict,t._locale):new RegExp(pe(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(e,t,n,a,i){return t||n||a||i}))))}function pe(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}X={};var ge,ye={};function Me(e,t){var n,a=t;for("string"==typeof e&&(e=[e]),u(t)&&(a=function(e,n){n[t]=U(e)}),n=0;n<e.length;n++)ye[e[n]]=a}function ve(e,t){Me(e,(function(e,n,a,i){a._w=a._w||{},t(e,a._w,a,i)}))}function Le(e,t,n){null!=t&&o(ye,e)&&ye[e](t,n._a,n,e)}function be(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,a=(t%(n=12)+n)%n;return e+=(t-a)/12,1===a?q(e)?29:28:31-a%7%2}ge=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},E("M",["MM",2],"Mo",(function(){return this.month()+1})),E("MMM",0,0,(function(e){return this.localeData().monthsShort(this,e)})),E("MMMM",0,0,(function(e){return this.localeData().months(this,e)})),I("month","M"),V("month",8),_e("M",ae),_e("MM",ae,Q),_e("MMM",(function(e,t){return t.monthsShortRegex(e)})),_e("MMMM",(function(e,t){return t.monthsRegex(e)})),Me(["M","MM"],(function(e,t){t[1]=U(e)-1})),Me(["MMM","MMMM"],(function(e,t,n,a){var i=n._locale.monthsParse(e,a,n._strict);null!=i?t[1]=i:f(n).invalidMonth=e}));var ke="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Ye="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),De=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,we=me,xe=me;function Te(e,t,n){var a,i,r,s=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],a=0;a<12;++a)r=_([2e3,a]),this._shortMonthsParse[a]=this.monthsShort(r,"").toLocaleLowerCase(),this._longMonthsParse[a]=this.months(r,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(i=ge.call(this._shortMonthsParse,s))?i:null:-1!==(i=ge.call(this._longMonthsParse,s))?i:null:"MMM"===t?-1!==(i=ge.call(this._shortMonthsParse,s))||-1!==(i=ge.call(this._longMonthsParse,s))?i:null:-1!==(i=ge.call(this._longMonthsParse,s))||-1!==(i=ge.call(this._shortMonthsParse,s))?i:null}function Se(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=U(t);else if(!u(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),be(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function He(e){return null!=e?(Se(this,e),i.updateOffset(this,!0),this):G(this,"Month")}function je(){function e(e,t){return t.length-e.length}var t,n,a=[],i=[],r=[];for(t=0;t<12;t++)n=_([2e3,t]),a.push(this.monthsShort(n,"")),i.push(this.months(n,"")),r.push(this.months(n,"")),r.push(this.monthsShort(n,""));for(a.sort(e),i.sort(e),r.sort(e),t=0;t<12;t++)a[t]=pe(a[t]),i[t]=pe(i[t]);for(t=0;t<24;t++)r[t]=pe(r[t]);this._monthsRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+a.join("|")+")","i")}function Pe(e){return q(e)?366:365}E("Y",0,0,(function(){var e=this.year();return e<=9999?j(e,4):"+"+e})),E(0,["YY",2],0,(function(){return this.year()%100})),E(0,["YYYY",4],0,"year"),E(0,["YYYYY",5],0,"year"),E(0,["YYYYYY",6,!0],0,"year"),I("year","y"),V("year",1),_e("Y",ue),_e("YY",ae,Q),_e("YYYY",oe,te),_e("YYYYY",de,ne),_e("YYYYYY",de,ne),Me(["YYYYY","YYYYYY"],0),Me("YYYY",(function(e,t){t[0]=2===e.length?i.parseTwoDigitYear(e):U(e)})),Me("YY",(function(e,t){t[0]=i.parseTwoDigitYear(e)})),Me("Y",(function(e,t){t[0]=parseInt(e,10)})),i.parseTwoDigitYear=function(e){return U(e)+(U(e)>68?1900:2e3)};var Ce=$("FullYear",!0);function Ae(e,t,n,a,i,r,s){var o;return e<100&&e>=0?(o=new Date(e+400,t,n,a,i,r,s),isFinite(o.getFullYear())&&o.setFullYear(e)):o=new Date(e,t,n,a,i,r,s),o}function Oe(e){var t,n;return e<100&&e>=0?((n=Array.prototype.slice.call(arguments))[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)):t=new Date(Date.UTC.apply(null,arguments)),t}function Ee(e,t,n){var a=7+t-n;return-(7+Oe(e,0,a).getUTCDay()-t)%7+a-1}function We(e,t,n,a,i){var r,s,o=1+7*(t-1)+(7+n-a)%7+Ee(e,a,i);return o<=0?s=Pe(r=e-1)+o:o>Pe(e)?(r=e+1,s=o-Pe(e)):(r=e,s=o),{year:r,dayOfYear:s}}function Fe(e,t,n){var a,i,r=Ee(e.year(),t,n),s=Math.floor((e.dayOfYear()-r-1)/7)+1;return s<1?a=s+Ne(i=e.year()-1,t,n):s>Ne(e.year(),t,n)?(a=s-Ne(e.year(),t,n),i=e.year()+1):(i=e.year(),a=s),{week:a,year:i}}function Ne(e,t,n){var a=Ee(e,t,n),i=Ee(e+1,t,n);return(Pe(e)-a+i)/7}function Ie(e,t){return e.slice(t,7).concat(e.slice(0,t))}E("w",["ww",2],"wo","week"),E("W",["WW",2],"Wo","isoWeek"),I("week","w"),I("isoWeek","W"),V("week",5),V("isoWeek",5),_e("w",ae),_e("ww",ae,Q),_e("W",ae),_e("WW",ae,Q),ve(["w","ww","W","WW"],(function(e,t,n,a){t[a.substr(0,1)]=U(e)})),E("d",0,"do","day"),E("dd",0,0,(function(e){return this.localeData().weekdaysMin(this,e)})),E("ddd",0,0,(function(e){return this.localeData().weekdaysShort(this,e)})),E("dddd",0,0,(function(e){return this.localeData().weekdays(this,e)})),E("e",0,0,"weekday"),E("E",0,0,"isoWeekday"),I("day","d"),I("weekday","e"),I("isoWeekday","E"),V("day",11),V("weekday",11),V("isoWeekday",11),_e("d",ae),_e("e",ae),_e("E",ae),_e("dd",(function(e,t){return t.weekdaysMinRegex(e)})),_e("ddd",(function(e,t){return t.weekdaysShortRegex(e)})),_e("dddd",(function(e,t){return t.weekdaysRegex(e)})),ve(["dd","ddd","dddd"],(function(e,t,n,a){var i=n._locale.weekdaysParse(e,a,n._strict);null!=i?t.d=i:f(n).invalidWeekday=e})),ve(["d","e","E"],(function(e,t,n,a){t[a]=U(e)}));var Re="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),ze="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Be="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Ve=me,qe=me,Je=me;function Ue(e,t,n){var a,i,r,s=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],a=0;a<7;++a)r=_([2e3,1]).day(a),this._minWeekdaysParse[a]=this.weekdaysMin(r,"").toLocaleLowerCase(),this._shortWeekdaysParse[a]=this.weekdaysShort(r,"").toLocaleLowerCase(),this._weekdaysParse[a]=this.weekdays(r,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(i=ge.call(this._weekdaysParse,s))?i:null:"ddd"===t?-1!==(i=ge.call(this._shortWeekdaysParse,s))?i:null:-1!==(i=ge.call(this._minWeekdaysParse,s))?i:null:"dddd"===t?-1!==(i=ge.call(this._weekdaysParse,s))||-1!==(i=ge.call(this._shortWeekdaysParse,s))||-1!==(i=ge.call(this._minWeekdaysParse,s))?i:null:"ddd"===t?-1!==(i=ge.call(this._shortWeekdaysParse,s))||-1!==(i=ge.call(this._weekdaysParse,s))||-1!==(i=ge.call(this._minWeekdaysParse,s))?i:null:-1!==(i=ge.call(this._minWeekdaysParse,s))||-1!==(i=ge.call(this._weekdaysParse,s))||-1!==(i=ge.call(this._shortWeekdaysParse,s))?i:null}function $e(){function e(e,t){return t.length-e.length}var t,n,a,i,r,s=[],o=[],d=[],l=[];for(t=0;t<7;t++)n=_([2e3,1]).day(t),a=pe(this.weekdaysMin(n,"")),i=pe(this.weekdaysShort(n,"")),r=pe(this.weekdays(n,"")),s.push(a),o.push(i),d.push(r),l.push(a),l.push(i),l.push(r);s.sort(e),o.sort(e),d.sort(e),l.sort(e),this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+s.join("|")+")","i")}function Ge(){return this.hours()%12||12}function Ke(e,t){E(e,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)}))}function Xe(e,t){return t._meridiemParse}E("H",["HH",2],0,"hour"),E("h",["hh",2],0,Ge),E("k",["kk",2],0,(function(){return this.hours()||24})),E("hmm",0,0,(function(){return""+Ge.apply(this)+j(this.minutes(),2)})),E("hmmss",0,0,(function(){return""+Ge.apply(this)+j(this.minutes(),2)+j(this.seconds(),2)})),E("Hmm",0,0,(function(){return""+this.hours()+j(this.minutes(),2)})),E("Hmmss",0,0,(function(){return""+this.hours()+j(this.minutes(),2)+j(this.seconds(),2)})),Ke("a",!0),Ke("A",!1),I("hour","h"),V("hour",13),_e("a",Xe),_e("A",Xe),_e("H",ae),_e("h",ae),_e("k",ae),_e("HH",ae,Q),_e("hh",ae,Q),_e("kk",ae,Q),_e("hmm",ie),_e("hmmss",re),_e("Hmm",ie),_e("Hmmss",re),Me(["H","HH"],3),Me(["k","kk"],(function(e,t,n){var a=U(e);t[3]=24===a?0:a})),Me(["a","A"],(function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e})),Me(["h","hh"],(function(e,t,n){t[3]=U(e),f(n).bigHour=!0})),Me("hmm",(function(e,t,n){var a=e.length-2;t[3]=U(e.substr(0,a)),t[4]=U(e.substr(a)),f(n).bigHour=!0})),Me("hmmss",(function(e,t,n){var a=e.length-4,i=e.length-2;t[3]=U(e.substr(0,a)),t[4]=U(e.substr(a,2)),t[5]=U(e.substr(i)),f(n).bigHour=!0})),Me("Hmm",(function(e,t,n){var a=e.length-2;t[3]=U(e.substr(0,a)),t[4]=U(e.substr(a))})),Me("Hmmss",(function(e,t,n){var a=e.length-4,i=e.length-2;t[3]=U(e.substr(0,a)),t[4]=U(e.substr(a,2)),t[5]=U(e.substr(i))}));var Ze,Qe=$("Hours",!0),et={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:ke,monthsShort:Ye,week:{dow:0,doy:6},weekdays:Re,weekdaysMin:Be,weekdaysShort:ze,meridiemParse:/[ap]\.?m?\.?/i},tt={},nt={};function at(e,t){var n,a=Math.min(e.length,t.length);for(n=0;n<a;n+=1)if(e[n]!==t[n])return n;return a}function it(e){return e?e.toLowerCase().replace("_","-"):e}function rt(t){var a=null;if(void 0===tt[t]&&void 0!==e&&e&&e.exports)try{a=Ze._abbr,n(145)("./"+t),st(a)}catch(e){tt[t]=null}return tt[t]}function st(e,t){var n;return e&&((n=l(t)?dt(e):ot(e,t))?Ze=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),Ze._abbr}function ot(e,t){if(null!==t){var n,a=et;if(t.abbr=e,null!=tt[e])x("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),a=tt[e]._config;else if(null!=t.parentLocale)if(null!=tt[t.parentLocale])a=tt[t.parentLocale]._config;else{if(null==(n=rt(t.parentLocale)))return nt[t.parentLocale]||(nt[t.parentLocale]=[]),nt[t.parentLocale].push({name:e,config:t}),null;a=n._config}return tt[e]=new H(S(a,t)),nt[e]&&nt[e].forEach((function(e){ot(e.name,e.config)})),st(e),tt[e]}return delete tt[e],null}function dt(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Ze;if(!r(e)){if(t=rt(e))return t;e=[e]}return function(e){for(var t,n,a,i,r=0;r<e.length;){for(t=(i=it(e[r]).split("-")).length,n=(n=it(e[r+1]))?n.split("-"):null;t>0;){if(a=rt(i.slice(0,t).join("-")))return a;if(n&&n.length>=t&&at(i,n)>=t-1)break;t--}r++}return Ze}(e)}function lt(e){var t,n=e._a;return n&&-2===f(e).overflow&&(t=n[1]<0||n[1]>11?1:n[2]<1||n[2]>be(n[0],n[1])?2:n[3]<0||n[3]>24||24===n[3]&&(0!==n[4]||0!==n[5]||0!==n[6])?3:n[4]<0||n[4]>59?4:n[5]<0||n[5]>59?5:n[6]<0||n[6]>999?6:-1,f(e)._overflowDayOfYear&&(t<0||t>2)&&(t=2),f(e)._overflowWeeks&&-1===t&&(t=7),f(e)._overflowWeekday&&-1===t&&(t=8),f(e).overflow=t),e}var ut=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ct=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ht=/Z|[+-]\d\d(?::?\d\d)?/,mt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,!1],["YYYY",/\d{4}/,!1]],_t=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],ft=/^\/?Date\((-?\d+)/i,pt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,gt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function yt(e){var t,n,a,i,r,s,o=e._i,d=ut.exec(o)||ct.exec(o);if(d){for(f(e).iso=!0,t=0,n=mt.length;t<n;t++)if(mt[t][1].exec(d[1])){i=mt[t][0],a=!1!==mt[t][2];break}if(null==i)return void(e._isValid=!1);if(d[3]){for(t=0,n=_t.length;t<n;t++)if(_t[t][1].exec(d[3])){r=(d[2]||" ")+_t[t][0];break}if(null==r)return void(e._isValid=!1)}if(!a&&null!=r)return void(e._isValid=!1);if(d[4]){if(!ht.exec(d[4]))return void(e._isValid=!1);s="Z"}e._f=i+(r||"")+(s||""),kt(e)}else e._isValid=!1}function Mt(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}function vt(e){var t,n,a,i,r,s,o,d,l=pt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(l){if(n=l[4],a=l[3],i=l[2],r=l[5],s=l[6],o=l[7],d=[Mt(n),Ye.indexOf(a),parseInt(i,10),parseInt(r,10),parseInt(s,10)],o&&d.push(parseInt(o,10)),t=d,!function(e,t,n){return!e||ze.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(f(n).weekdayMismatch=!0,n._isValid=!1,!1)}(l[1],t,e))return;e._a=t,e._tzm=function(e,t,n){if(e)return gt[e];if(t)return 0;var a=parseInt(n,10),i=a%100;return(a-i)/100*60+i}(l[8],l[9],l[10]),e._d=Oe.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),f(e).rfc2822=!0}else e._isValid=!1}function Lt(e,t,n){return null!=e?e:null!=t?t:n}function bt(e){var t,n,a,r,s,o=[];if(!e._d){for(a=function(e){var t=new Date(i.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[2]&&null==e._a[1]&&function(e){var t,n,a,i,r,s,o,d,l;null!=(t=e._w).GG||null!=t.W||null!=t.E?(r=1,s=4,n=Lt(t.GG,e._a[0],Fe(wt(),1,4).year),a=Lt(t.W,1),((i=Lt(t.E,1))<1||i>7)&&(d=!0)):(r=e._locale._week.dow,s=e._locale._week.doy,l=Fe(wt(),r,s),n=Lt(t.gg,e._a[0],l.year),a=Lt(t.w,l.week),null!=t.d?((i=t.d)<0||i>6)&&(d=!0):null!=t.e?(i=t.e+r,(t.e<0||t.e>6)&&(d=!0)):i=r),a<1||a>Ne(n,r,s)?f(e)._overflowWeeks=!0:null!=d?f(e)._overflowWeekday=!0:(o=We(n,a,i,r,s),e._a[0]=o.year,e._dayOfYear=o.dayOfYear)}(e),null!=e._dayOfYear&&(s=Lt(e._a[0],a[0]),(e._dayOfYear>Pe(s)||0===e._dayOfYear)&&(f(e)._overflowDayOfYear=!0),n=Oe(s,0,e._dayOfYear),e._a[1]=n.getUTCMonth(),e._a[2]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=o[t]=a[t];for(;t<7;t++)e._a[t]=o[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[3]&&0===e._a[4]&&0===e._a[5]&&0===e._a[6]&&(e._nextDay=!0,e._a[3]=0),e._d=(e._useUTC?Oe:Ae).apply(null,o),r=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[3]=24),e._w&&void 0!==e._w.d&&e._w.d!==r&&(f(e).weekdayMismatch=!0)}}function kt(e){if(e._f!==i.ISO_8601)if(e._f!==i.RFC_2822){e._a=[],f(e).empty=!0;var t,n,a,r,s,o,d=""+e._i,l=d.length,u=0;for(a=F(e._f,e._locale).match(P)||[],t=0;t<a.length;t++)r=a[t],(n=(d.match(fe(r,e))||[])[0])&&((s=d.substr(0,d.indexOf(n))).length>0&&f(e).unusedInput.push(s),d=d.slice(d.indexOf(n)+n.length),u+=n.length),O[r]?(n?f(e).empty=!1:f(e).unusedTokens.push(r),Le(r,n,e)):e._strict&&!n&&f(e).unusedTokens.push(r);f(e).charsLeftOver=l-u,d.length>0&&f(e).unusedInput.push(d),e._a[3]<=12&&!0===f(e).bigHour&&e._a[3]>0&&(f(e).bigHour=void 0),f(e).parsedDateParts=e._a.slice(0),f(e).meridiem=e._meridiem,e._a[3]=function(e,t,n){var a;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((a=e.isPM(n))&&t<12&&(t+=12),a||12!==t||(t=0),t):t}(e._locale,e._a[3],e._meridiem),null!==(o=f(e).era)&&(e._a[0]=e._locale.erasConvertYear(o,e._a[0])),bt(e),lt(e)}else vt(e);else yt(e)}function Yt(e){var t=e._i,n=e._f;return e._locale=e._locale||dt(e._l),null===t||void 0===n&&""===t?g({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),b(t)?new L(lt(t)):(c(t)?e._d=t:r(n)?function(e){var t,n,a,i,r,s,o=!1;if(0===e._f.length)return f(e).invalidFormat=!0,void(e._d=new Date(NaN));for(i=0;i<e._f.length;i++)r=0,s=!1,t=v({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[i],kt(t),p(t)&&(s=!0),r+=f(t).charsLeftOver,r+=10*f(t).unusedTokens.length,f(t).score=r,o?r<a&&(a=r,n=t):(null==a||r<a||s)&&(a=r,n=t,s&&(o=!0));m(e,n||t)}(e):n?kt(e):function(e){var t=e._i;l(t)?e._d=new Date(i.now()):c(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=ft.exec(e._i);null===t?(yt(e),!1===e._isValid&&(delete e._isValid,vt(e),!1===e._isValid&&(delete e._isValid,e._strict?e._isValid=!1:i.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):r(t)?(e._a=h(t.slice(0),(function(e){return parseInt(e,10)})),bt(e)):s(t)?function(e){if(!e._d){var t=z(e._i),n=void 0===t.day?t.date:t.day;e._a=h([t.year,t.month,n,t.hour,t.minute,t.second,t.millisecond],(function(e){return e&&parseInt(e,10)})),bt(e)}}(e):u(t)?e._d=new Date(t):i.createFromInputFallback(e)}(e),p(e)||(e._d=null),e))}function Dt(e,t,n,a,i){var o,l={};return!0!==t&&!1!==t||(a=t,t=void 0),!0!==n&&!1!==n||(a=n,n=void 0),(s(e)&&d(e)||r(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=i,l._l=n,l._i=e,l._f=t,l._strict=a,(o=new L(lt(Yt(l))))._nextDay&&(o.add(1,"d"),o._nextDay=void 0),o}function wt(e,t,n,a){return Dt(e,t,n,a,!1)}i.createFromInputFallback=Y("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))})),i.ISO_8601=function(){},i.RFC_2822=function(){};var xt=Y("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=wt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:g()})),Tt=Y("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=wt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:g()}));function St(e,t){var n,a;if(1===t.length&&r(t[0])&&(t=t[0]),!t.length)return wt();for(n=t[0],a=1;a<t.length;++a)t[a].isValid()&&!t[a][e](n)||(n=t[a]);return n}var Ht=["year","quarter","month","week","day","hour","minute","second","millisecond"];function jt(e){var t=z(e),n=t.year||0,a=t.quarter||0,i=t.month||0,r=t.week||t.isoWeek||0,s=t.day||0,d=t.hour||0,l=t.minute||0,u=t.second||0,c=t.millisecond||0;this._isValid=function(e){var t,n,a=!1;for(t in e)if(o(e,t)&&(-1===ge.call(Ht,t)||null!=e[t]&&isNaN(e[t])))return!1;for(n=0;n<Ht.length;++n)if(e[Ht[n]]){if(a)return!1;parseFloat(e[Ht[n]])!==U(e[Ht[n]])&&(a=!0)}return!0}(t),this._milliseconds=+c+1e3*u+6e4*l+1e3*d*60*60,this._days=+s+7*r,this._months=+i+3*a+12*n,this._data={},this._locale=dt(),this._bubble()}function Pt(e){return e instanceof jt}function Ct(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function At(e,t){E(e,0,0,(function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+j(~~(e/60),2)+t+j(~~e%60,2)}))}At("Z",":"),At("ZZ",""),_e("Z",he),_e("ZZ",he),Me(["Z","ZZ"],(function(e,t,n){n._useUTC=!0,n._tzm=Et(he,e)}));var Ot=/([\+\-]|\d\d)/gi;function Et(e,t){var n,a,i=(t||"").match(e);return null===i?null:0===(a=60*(n=((i[i.length-1]||[])+"").match(Ot)||["-",0,0])[1]+U(n[2]))?0:"+"===n[0]?a:-a}function Wt(e,t){var n,a;return t._isUTC?(n=t.clone(),a=(b(e)||c(e)?e.valueOf():wt(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+a),i.updateOffset(n,!1),n):wt(e).local()}function Ft(e){return-Math.round(e._d.getTimezoneOffset())}function Nt(){return!!this.isValid()&&this._isUTC&&0===this._offset}i.updateOffset=function(){};var It=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,Rt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function zt(e,t){var n,a,i,r,s,d,l=e,c=null;return Pt(e)?l={ms:e._milliseconds,d:e._days,M:e._months}:u(e)||!isNaN(+e)?(l={},t?l[t]=+e:l.milliseconds=+e):(c=It.exec(e))?(n="-"===c[1]?-1:1,l={y:0,d:U(c[2])*n,h:U(c[3])*n,m:U(c[4])*n,s:U(c[5])*n,ms:U(Ct(1e3*c[6]))*n}):(c=Rt.exec(e))?(n="-"===c[1]?-1:1,l={y:Bt(c[2],n),M:Bt(c[3],n),w:Bt(c[4],n),d:Bt(c[5],n),h:Bt(c[6],n),m:Bt(c[7],n),s:Bt(c[8],n)}):null==l?l={}:"object"==typeof l&&("from"in l||"to"in l)&&(r=wt(l.from),s=wt(l.to),i=r.isValid()&&s.isValid()?(s=Wt(s,r),r.isBefore(s)?d=Vt(r,s):((d=Vt(s,r)).milliseconds=-d.milliseconds,d.months=-d.months),d):{milliseconds:0,months:0},(l={}).ms=i.milliseconds,l.M=i.months),a=new jt(l),Pt(e)&&o(e,"_locale")&&(a._locale=e._locale),Pt(e)&&o(e,"_isValid")&&(a._isValid=e._isValid),a}function Bt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Vt(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function qt(e,t){return function(n,a){var i;return null===a||isNaN(+a)||(x(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),i=n,n=a,a=i),Jt(this,zt(n,a),e),this}}function Jt(e,t,n,a){var r=t._milliseconds,s=Ct(t._days),o=Ct(t._months);e.isValid()&&(a=null==a||a,o&&Se(e,G(e,"Month")+o*n),s&&K(e,"Date",G(e,"Date")+s*n),r&&e._d.setTime(e._d.valueOf()+r*n),a&&i.updateOffset(e,s||o))}zt.fn=jt.prototype,zt.invalid=function(){return zt(NaN)};var Ut=qt(1,"add"),$t=qt(-1,"subtract");function Gt(e){return"string"==typeof e||e instanceof String}function Kt(e){return b(e)||c(e)||Gt(e)||u(e)||function(e){var t=r(e),n=!1;return t&&(n=0===e.filter((function(t){return!u(t)&&Gt(e)})).length),t&&n}(e)||function(e){var t,n,a=s(e)&&!d(e),i=!1,r=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"];for(t=0;t<r.length;t+=1)n=r[t],i=i||o(e,n);return a&&i}(e)||null==e}function Xt(e){var t,n=s(e)&&!d(e),a=!1,i=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"];for(t=0;t<i.length;t+=1)a=a||o(e,i[t]);return n&&a}function Zt(e,t){if(e.date()<t.date())return-Zt(t,e);var n=12*(t.year()-e.year())+(t.month()-e.month()),a=e.clone().add(n,"months");return-(n+(t-a<0?(t-a)/(a-e.clone().add(n-1,"months")):(t-a)/(e.clone().add(n+1,"months")-a)))||0}function Qt(e){var t;return void 0===e?this._locale._abbr:(null!=(t=dt(e))&&(this._locale=t),this)}i.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",i.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var en=Y("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(e){return void 0===e?this.localeData():this.locale(e)}));function tn(){return this._locale}function nn(e,t){return(e%t+t)%t}function an(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-126227808e5:new Date(e,t,n).valueOf()}function rn(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-126227808e5:Date.UTC(e,t,n)}function sn(e,t){return t.erasAbbrRegex(e)}function on(){var e,t,n=[],a=[],i=[],r=[],s=this.eras();for(e=0,t=s.length;e<t;++e)a.push(pe(s[e].name)),n.push(pe(s[e].abbr)),i.push(pe(s[e].narrow)),r.push(pe(s[e].name)),r.push(pe(s[e].abbr)),r.push(pe(s[e].narrow));this._erasRegex=new RegExp("^("+r.join("|")+")","i"),this._erasNameRegex=new RegExp("^("+a.join("|")+")","i"),this._erasAbbrRegex=new RegExp("^("+n.join("|")+")","i"),this._erasNarrowRegex=new RegExp("^("+i.join("|")+")","i")}function dn(e,t){E(0,[e,e.length],0,t)}function ln(e,t,n,a,i){var r;return null==e?Fe(this,a,i).year:(t>(r=Ne(e,a,i))&&(t=r),un.call(this,e,t,n,a,i))}function un(e,t,n,a,i){var r=We(e,t,n,a,i),s=Oe(r.year,0,r.dayOfYear);return this.year(s.getUTCFullYear()),this.month(s.getUTCMonth()),this.date(s.getUTCDate()),this}E("N",0,0,"eraAbbr"),E("NN",0,0,"eraAbbr"),E("NNN",0,0,"eraAbbr"),E("NNNN",0,0,"eraName"),E("NNNNN",0,0,"eraNarrow"),E("y",["y",1],"yo","eraYear"),E("y",["yy",2],0,"eraYear"),E("y",["yyy",3],0,"eraYear"),E("y",["yyyy",4],0,"eraYear"),_e("N",sn),_e("NN",sn),_e("NNN",sn),_e("NNNN",(function(e,t){return t.erasNameRegex(e)})),_e("NNNNN",(function(e,t){return t.erasNarrowRegex(e)})),Me(["N","NN","NNN","NNNN","NNNNN"],(function(e,t,n,a){var i=n._locale.erasParse(e,a,n._strict);i?f(n).era=i:f(n).invalidEra=e})),_e("y",le),_e("yy",le),_e("yyy",le),_e("yyyy",le),_e("yo",(function(e,t){return t._eraYearOrdinalRegex||le})),Me(["y","yy","yyy","yyyy"],0),Me(["yo"],(function(e,t,n,a){var i;n._locale._eraYearOrdinalRegex&&(i=e.match(n._locale._eraYearOrdinalRegex)),n._locale.eraYearOrdinalParse?t[0]=n._locale.eraYearOrdinalParse(e,i):t[0]=parseInt(e,10)})),E(0,["gg",2],0,(function(){return this.weekYear()%100})),E(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),dn("gggg","weekYear"),dn("ggggg","weekYear"),dn("GGGG","isoWeekYear"),dn("GGGGG","isoWeekYear"),I("weekYear","gg"),I("isoWeekYear","GG"),V("weekYear",1),V("isoWeekYear",1),_e("G",ue),_e("g",ue),_e("GG",ae,Q),_e("gg",ae,Q),_e("GGGG",oe,te),_e("gggg",oe,te),_e("GGGGG",de,ne),_e("ggggg",de,ne),ve(["gggg","ggggg","GGGG","GGGGG"],(function(e,t,n,a){t[a.substr(0,2)]=U(e)})),ve(["gg","GG"],(function(e,t,n,a){t[a]=i.parseTwoDigitYear(e)})),E("Q",0,"Qo","quarter"),I("quarter","Q"),V("quarter",7),_e("Q",Z),Me("Q",(function(e,t){t[1]=3*(U(e)-1)})),E("D",["DD",2],"Do","date"),I("date","D"),V("date",9),_e("D",ae),_e("DD",ae,Q),_e("Do",(function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient})),Me(["D","DD"],2),Me("Do",(function(e,t){t[2]=U(e.match(ae)[0])}));var cn=$("Date",!0);E("DDD",["DDDD",3],"DDDo","dayOfYear"),I("dayOfYear","DDD"),V("dayOfYear",4),_e("DDD",se),_e("DDDD",ee),Me(["DDD","DDDD"],(function(e,t,n){n._dayOfYear=U(e)})),E("m",["mm",2],0,"minute"),I("minute","m"),V("minute",14),_e("m",ae),_e("mm",ae,Q),Me(["m","mm"],4);var hn=$("Minutes",!1);E("s",["ss",2],0,"second"),I("second","s"),V("second",15),_e("s",ae),_e("ss",ae,Q),Me(["s","ss"],5);var mn,_n,fn=$("Seconds",!1);for(E("S",0,0,(function(){return~~(this.millisecond()/100)})),E(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),E(0,["SSS",3],0,"millisecond"),E(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),E(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),E(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),E(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),E(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),E(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),I("millisecond","ms"),V("millisecond",16),_e("S",se,Z),_e("SS",se,Q),_e("SSS",se,ee),mn="SSSS";mn.length<=9;mn+="S")_e(mn,le);function pn(e,t){t[6]=U(1e3*("0."+e))}for(mn="S";mn.length<=9;mn+="S")Me(mn,pn);_n=$("Milliseconds",!1),E("z",0,0,"zoneAbbr"),E("zz",0,0,"zoneName");var gn=L.prototype;function yn(e){return e}gn.add=Ut,gn.calendar=function(e,t){1===arguments.length&&(arguments[0]?Kt(arguments[0])?(e=arguments[0],t=void 0):Xt(arguments[0])&&(t=arguments[0],e=void 0):(e=void 0,t=void 0));var n=e||wt(),a=Wt(n,this).startOf("day"),r=i.calendarFormat(this,a)||"sameElse",s=t&&(T(t[r])?t[r].call(this,n):t[r]);return this.format(s||this.localeData().calendar(r,this,wt(n)))},gn.clone=function(){return new L(this)},gn.diff=function(e,t,n){var a,i,r;if(!this.isValid())return NaN;if(!(a=Wt(e,this)).isValid())return NaN;switch(i=6e4*(a.utcOffset()-this.utcOffset()),t=R(t)){case"year":r=Zt(this,a)/12;break;case"month":r=Zt(this,a);break;case"quarter":r=Zt(this,a)/3;break;case"second":r=(this-a)/1e3;break;case"minute":r=(this-a)/6e4;break;case"hour":r=(this-a)/36e5;break;case"day":r=(this-a-i)/864e5;break;case"week":r=(this-a-i)/6048e5;break;default:r=this-a}return n?r:J(r)},gn.endOf=function(e){var t,n;if(void 0===(e=R(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?rn:an,e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=36e5-nn(t+(this._isUTC?0:6e4*this.utcOffset()),36e5)-1;break;case"minute":t=this._d.valueOf(),t+=6e4-nn(t,6e4)-1;break;case"second":t=this._d.valueOf(),t+=1e3-nn(t,1e3)-1}return this._d.setTime(t),i.updateOffset(this,!0),this},gn.format=function(e){e||(e=this.isUtc()?i.defaultFormatUtc:i.defaultFormat);var t=W(this,e);return this.localeData().postformat(t)},gn.from=function(e,t){return this.isValid()&&(b(e)&&e.isValid()||wt(e).isValid())?zt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},gn.fromNow=function(e){return this.from(wt(),e)},gn.to=function(e,t){return this.isValid()&&(b(e)&&e.isValid()||wt(e).isValid())?zt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},gn.toNow=function(e){return this.to(wt(),e)},gn.get=function(e){return T(this[e=R(e)])?this[e]():this},gn.invalidAt=function(){return f(this).overflow},gn.isAfter=function(e,t){var n=b(e)?e:wt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=R(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},gn.isBefore=function(e,t){var n=b(e)?e:wt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=R(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},gn.isBetween=function(e,t,n,a){var i=b(e)?e:wt(e),r=b(t)?t:wt(t);return!!(this.isValid()&&i.isValid()&&r.isValid())&&(("("===(a=a||"()")[0]?this.isAfter(i,n):!this.isBefore(i,n))&&(")"===a[1]?this.isBefore(r,n):!this.isAfter(r,n)))},gn.isSame=function(e,t){var n,a=b(e)?e:wt(e);return!(!this.isValid()||!a.isValid())&&("millisecond"===(t=R(t)||"millisecond")?this.valueOf()===a.valueOf():(n=a.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},gn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},gn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},gn.isValid=function(){return p(this)},gn.lang=en,gn.locale=Qt,gn.localeData=tn,gn.max=Tt,gn.min=xt,gn.parsingFlags=function(){return m({},f(this))},gn.set=function(e,t){if("object"==typeof e){var n,a=function(e){var t,n=[];for(t in e)o(e,t)&&n.push({unit:t,priority:B[t]});return n.sort((function(e,t){return e.priority-t.priority})),n}(e=z(e));for(n=0;n<a.length;n++)this[a[n].unit](e[a[n].unit])}else if(T(this[e=R(e)]))return this[e](t);return this},gn.startOf=function(e){var t,n;if(void 0===(e=R(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?rn:an,e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=nn(t+(this._isUTC?0:6e4*this.utcOffset()),36e5);break;case"minute":t=this._d.valueOf(),t-=nn(t,6e4);break;case"second":t=this._d.valueOf(),t-=nn(t,1e3)}return this._d.setTime(t),i.updateOffset(this,!0),this},gn.subtract=$t,gn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},gn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},gn.toDate=function(){return new Date(this.valueOf())},gn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?W(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):T(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",W(n,"Z")):W(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},gn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e,t,n,a="moment",i="";return this.isLocal()||(a=0===this.utcOffset()?"moment.utc":"moment.parseZone",i="Z"),e="["+a+'("]',t=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",n=i+'[")]',this.format(e+t+"-MM-DD[T]HH:mm:ss.SSS"+n)},"undefined"!=typeof Symbol&&null!=Symbol.for&&(gn[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"}),gn.toJSON=function(){return this.isValid()?this.toISOString():null},gn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},gn.unix=function(){return Math.floor(this.valueOf()/1e3)},gn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},gn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},gn.eraName=function(){var e,t,n,a=this.localeData().eras();for(e=0,t=a.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),a[e].since<=n&&n<=a[e].until)return a[e].name;if(a[e].until<=n&&n<=a[e].since)return a[e].name}return""},gn.eraNarrow=function(){var e,t,n,a=this.localeData().eras();for(e=0,t=a.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),a[e].since<=n&&n<=a[e].until)return a[e].narrow;if(a[e].until<=n&&n<=a[e].since)return a[e].narrow}return""},gn.eraAbbr=function(){var e,t,n,a=this.localeData().eras();for(e=0,t=a.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),a[e].since<=n&&n<=a[e].until)return a[e].abbr;if(a[e].until<=n&&n<=a[e].since)return a[e].abbr}return""},gn.eraYear=function(){var e,t,n,a,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e)if(n=r[e].since<=r[e].until?1:-1,a=this.clone().startOf("day").valueOf(),r[e].since<=a&&a<=r[e].until||r[e].until<=a&&a<=r[e].since)return(this.year()-i(r[e].since).year())*n+r[e].offset;return this.year()},gn.year=Ce,gn.isLeapYear=function(){return q(this.year())},gn.weekYear=function(e){return ln.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},gn.isoWeekYear=function(e){return ln.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},gn.quarter=gn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},gn.month=He,gn.daysInMonth=function(){return be(this.year(),this.month())},gn.week=gn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},gn.isoWeek=gn.isoWeeks=function(e){var t=Fe(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},gn.weeksInYear=function(){var e=this.localeData()._week;return Ne(this.year(),e.dow,e.doy)},gn.weeksInWeekYear=function(){var e=this.localeData()._week;return Ne(this.weekYear(),e.dow,e.doy)},gn.isoWeeksInYear=function(){return Ne(this.year(),1,4)},gn.isoWeeksInISOWeekYear=function(){return Ne(this.isoWeekYear(),1,4)},gn.date=cn,gn.day=gn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},gn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},gn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},gn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},gn.hour=gn.hours=Qe,gn.minute=gn.minutes=hn,gn.second=gn.seconds=fn,gn.millisecond=gn.milliseconds=_n,gn.utcOffset=function(e,t,n){var a,r=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Et(he,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(a=Ft(this)),this._offset=e,this._isUTC=!0,null!=a&&this.add(a,"m"),r!==e&&(!t||this._changeInProgress?Jt(this,zt(e-r,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,i.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?r:Ft(this)},gn.utc=function(e){return this.utcOffset(0,e)},gn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Ft(this),"m")),this},gn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Et(ce,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},gn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?wt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},gn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},gn.isLocal=function(){return!!this.isValid()&&!this._isUTC},gn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},gn.isUtc=Nt,gn.isUTC=Nt,gn.zoneAbbr=function(){return this._isUTC?"UTC":""},gn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},gn.dates=Y("dates accessor is deprecated. Use date instead.",cn),gn.months=Y("months accessor is deprecated. Use month instead",He),gn.years=Y("years accessor is deprecated. Use year instead",Ce),gn.zone=Y("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()})),gn.isDSTShifted=Y("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!l(this._isDSTShifted))return this._isDSTShifted;var e,t={};return v(t,this),(t=Yt(t))._a?(e=t._isUTC?_(t._a):wt(t._a),this._isDSTShifted=this.isValid()&&function(e,t,n){var a,i=Math.min(e.length,t.length),r=Math.abs(e.length-t.length),s=0;for(a=0;a<i;a++)(n&&e[a]!==t[a]||!n&&U(e[a])!==U(t[a]))&&s++;return s+r}(t._a,e.toArray())>0):this._isDSTShifted=!1,this._isDSTShifted}));var Mn=H.prototype;function vn(e,t,n,a){var i=dt(),r=_().set(a,t);return i[n](r,e)}function Ln(e,t,n){if(u(e)&&(t=e,e=void 0),e=e||"",null!=t)return vn(e,t,n,"month");var a,i=[];for(a=0;a<12;a++)i[a]=vn(e,a,n,"month");return i}function bn(e,t,n,a){"boolean"==typeof e?(u(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,u(t)&&(n=t,t=void 0),t=t||"");var i,r=dt(),s=e?r._week.dow:0,o=[];if(null!=n)return vn(t,(n+s)%7,a,"day");for(i=0;i<7;i++)o[i]=vn(t,(i+s)%7,a,"day");return o}Mn.calendar=function(e,t,n){var a=this._calendar[e]||this._calendar.sameElse;return T(a)?a.call(t,n):a},Mn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.match(P).map((function(e){return"MMMM"===e||"MM"===e||"DD"===e||"dddd"===e?e.slice(1):e})).join(""),this._longDateFormat[e])},Mn.invalidDate=function(){return this._invalidDate},Mn.ordinal=function(e){return this._ordinal.replace("%d",e)},Mn.preparse=yn,Mn.postformat=yn,Mn.relativeTime=function(e,t,n,a){var i=this._relativeTime[n];return T(i)?i(e,t,n,a):i.replace(/%d/i,e)},Mn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return T(n)?n(t):n.replace(/%s/i,t)},Mn.set=function(e){var t,n;for(n in e)o(e,n)&&(T(t=e[n])?this[n]=t:this["_"+n]=t);this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},Mn.eras=function(e,t){var n,a,r,s=this._eras||dt("en")._eras;for(n=0,a=s.length;n<a;++n){switch(typeof s[n].since){case"string":r=i(s[n].since).startOf("day"),s[n].since=r.valueOf()}switch(typeof s[n].until){case"undefined":s[n].until=1/0;break;case"string":r=i(s[n].until).startOf("day").valueOf(),s[n].until=r.valueOf()}}return s},Mn.erasParse=function(e,t,n){var a,i,r,s,o,d=this.eras();for(e=e.toUpperCase(),a=0,i=d.length;a<i;++a)if(r=d[a].name.toUpperCase(),s=d[a].abbr.toUpperCase(),o=d[a].narrow.toUpperCase(),n)switch(t){case"N":case"NN":case"NNN":if(s===e)return d[a];break;case"NNNN":if(r===e)return d[a];break;case"NNNNN":if(o===e)return d[a]}else if([r,s,o].indexOf(e)>=0)return d[a]},Mn.erasConvertYear=function(e,t){var n=e.since<=e.until?1:-1;return void 0===t?i(e.since).year():i(e.since).year()+(t-e.offset)*n},Mn.erasAbbrRegex=function(e){return o(this,"_erasAbbrRegex")||on.call(this),e?this._erasAbbrRegex:this._erasRegex},Mn.erasNameRegex=function(e){return o(this,"_erasNameRegex")||on.call(this),e?this._erasNameRegex:this._erasRegex},Mn.erasNarrowRegex=function(e){return o(this,"_erasNarrowRegex")||on.call(this),e?this._erasNarrowRegex:this._erasRegex},Mn.months=function(e,t){return e?r(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||De).test(t)?"format":"standalone"][e.month()]:r(this._months)?this._months:this._months.standalone},Mn.monthsShort=function(e,t){return e?r(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[De.test(t)?"format":"standalone"][e.month()]:r(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},Mn.monthsParse=function(e,t,n){var a,i,r;if(this._monthsParseExact)return Te.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),a=0;a<12;a++){if(i=_([2e3,a]),n&&!this._longMonthsParse[a]&&(this._longMonthsParse[a]=new RegExp("^"+this.months(i,"").replace(".","")+"$","i"),this._shortMonthsParse[a]=new RegExp("^"+this.monthsShort(i,"").replace(".","")+"$","i")),n||this._monthsParse[a]||(r="^"+this.months(i,"")+"|^"+this.monthsShort(i,""),this._monthsParse[a]=new RegExp(r.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[a].test(e))return a;if(n&&"MMM"===t&&this._shortMonthsParse[a].test(e))return a;if(!n&&this._monthsParse[a].test(e))return a}},Mn.monthsRegex=function(e){return this._monthsParseExact?(o(this,"_monthsRegex")||je.call(this),e?this._monthsStrictRegex:this._monthsRegex):(o(this,"_monthsRegex")||(this._monthsRegex=xe),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},Mn.monthsShortRegex=function(e){return this._monthsParseExact?(o(this,"_monthsRegex")||je.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(o(this,"_monthsShortRegex")||(this._monthsShortRegex=we),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},Mn.week=function(e){return Fe(e,this._week.dow,this._week.doy).week},Mn.firstDayOfYear=function(){return this._week.doy},Mn.firstDayOfWeek=function(){return this._week.dow},Mn.weekdays=function(e,t){var n=r(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?Ie(n,this._week.dow):e?n[e.day()]:n},Mn.weekdaysMin=function(e){return!0===e?Ie(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},Mn.weekdaysShort=function(e){return!0===e?Ie(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},Mn.weekdaysParse=function(e,t,n){var a,i,r;if(this._weekdaysParseExact)return Ue.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),a=0;a<7;a++){if(i=_([2e3,1]).day(a),n&&!this._fullWeekdaysParse[a]&&(this._fullWeekdaysParse[a]=new RegExp("^"+this.weekdays(i,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[a]=new RegExp("^"+this.weekdaysShort(i,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[a]=new RegExp("^"+this.weekdaysMin(i,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[a]||(r="^"+this.weekdays(i,"")+"|^"+this.weekdaysShort(i,"")+"|^"+this.weekdaysMin(i,""),this._weekdaysParse[a]=new RegExp(r.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[a].test(e))return a;if(n&&"ddd"===t&&this._shortWeekdaysParse[a].test(e))return a;if(n&&"dd"===t&&this._minWeekdaysParse[a].test(e))return a;if(!n&&this._weekdaysParse[a].test(e))return a}},Mn.weekdaysRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||$e.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(o(this,"_weekdaysRegex")||(this._weekdaysRegex=Ve),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},Mn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||$e.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(o(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=qe),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},Mn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||$e.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(o(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Je),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},Mn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},Mn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},st("en",{eras:[{since:"0001-01-01",until:1/0,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===U(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),i.lang=Y("moment.lang is deprecated. Use moment.locale instead.",st),i.langData=Y("moment.langData is deprecated. Use moment.localeData instead.",dt);var kn=Math.abs;function Yn(e,t,n,a){var i=zt(t,n);return e._milliseconds+=a*i._milliseconds,e._days+=a*i._days,e._months+=a*i._months,e._bubble()}function Dn(e){return e<0?Math.floor(e):Math.ceil(e)}function wn(e){return 4800*e/146097}function xn(e){return 146097*e/4800}function Tn(e){return function(){return this.as(e)}}var Sn=Tn("ms"),Hn=Tn("s"),jn=Tn("m"),Pn=Tn("h"),Cn=Tn("d"),An=Tn("w"),On=Tn("M"),En=Tn("Q"),Wn=Tn("y");function Fn(e){return function(){return this.isValid()?this._data[e]:NaN}}var Nn=Fn("milliseconds"),In=Fn("seconds"),Rn=Fn("minutes"),zn=Fn("hours"),Bn=Fn("days"),Vn=Fn("months"),qn=Fn("years"),Jn=Math.round,Un={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function $n(e,t,n,a,i){return i.relativeTime(t||1,!!n,e,a)}var Gn=Math.abs;function Kn(e){return(e>0)-(e<0)||+e}function Xn(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n,a,i,r,s,o,d=Gn(this._milliseconds)/1e3,l=Gn(this._days),u=Gn(this._months),c=this.asSeconds();return c?(e=J(d/60),t=J(e/60),d%=60,e%=60,n=J(u/12),u%=12,a=d?d.toFixed(3).replace(/\.?0+$/,""):"",i=c<0?"-":"",r=Kn(this._months)!==Kn(c)?"-":"",s=Kn(this._days)!==Kn(c)?"-":"",o=Kn(this._milliseconds)!==Kn(c)?"-":"",i+"P"+(n?r+n+"Y":"")+(u?r+u+"M":"")+(l?s+l+"D":"")+(t||e||d?"T":"")+(t?o+t+"H":"")+(e?o+e+"M":"")+(d?o+a+"S":"")):"P0D"}var Zn=jt.prototype;return Zn.isValid=function(){return this._isValid},Zn.abs=function(){var e=this._data;return this._milliseconds=kn(this._milliseconds),this._days=kn(this._days),this._months=kn(this._months),e.milliseconds=kn(e.milliseconds),e.seconds=kn(e.seconds),e.minutes=kn(e.minutes),e.hours=kn(e.hours),e.months=kn(e.months),e.years=kn(e.years),this},Zn.add=function(e,t){return Yn(this,e,t,1)},Zn.subtract=function(e,t){return Yn(this,e,t,-1)},Zn.as=function(e){if(!this.isValid())return NaN;var t,n,a=this._milliseconds;if("month"===(e=R(e))||"quarter"===e||"year"===e)switch(t=this._days+a/864e5,n=this._months+wn(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(xn(this._months)),e){case"week":return t/7+a/6048e5;case"day":return t+a/864e5;case"hour":return 24*t+a/36e5;case"minute":return 1440*t+a/6e4;case"second":return 86400*t+a/1e3;case"millisecond":return Math.floor(864e5*t)+a;default:throw new Error("Unknown unit "+e)}},Zn.asMilliseconds=Sn,Zn.asSeconds=Hn,Zn.asMinutes=jn,Zn.asHours=Pn,Zn.asDays=Cn,Zn.asWeeks=An,Zn.asMonths=On,Zn.asQuarters=En,Zn.asYears=Wn,Zn.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*U(this._months/12):NaN},Zn._bubble=function(){var e,t,n,a,i,r=this._milliseconds,s=this._days,o=this._months,d=this._data;return r>=0&&s>=0&&o>=0||r<=0&&s<=0&&o<=0||(r+=864e5*Dn(xn(o)+s),s=0,o=0),d.milliseconds=r%1e3,e=J(r/1e3),d.seconds=e%60,t=J(e/60),d.minutes=t%60,n=J(t/60),d.hours=n%24,s+=J(n/24),i=J(wn(s)),o+=i,s-=Dn(xn(i)),a=J(o/12),o%=12,d.days=s,d.months=o,d.years=a,this},Zn.clone=function(){return zt(this)},Zn.get=function(e){return e=R(e),this.isValid()?this[e+"s"]():NaN},Zn.milliseconds=Nn,Zn.seconds=In,Zn.minutes=Rn,Zn.hours=zn,Zn.days=Bn,Zn.weeks=function(){return J(this.days()/7)},Zn.months=Vn,Zn.years=qn,Zn.humanize=function(e,t){if(!this.isValid())return this.localeData().invalidDate();var n,a,i=!1,r=Un;return"object"==typeof e&&(t=e,e=!1),"boolean"==typeof e&&(i=e),"object"==typeof t&&(r=Object.assign({},Un,t),null!=t.s&&null==t.ss&&(r.ss=t.s-1)),n=this.localeData(),a=function(e,t,n,a){var i=zt(e).abs(),r=Jn(i.as("s")),s=Jn(i.as("m")),o=Jn(i.as("h")),d=Jn(i.as("d")),l=Jn(i.as("M")),u=Jn(i.as("w")),c=Jn(i.as("y")),h=r<=n.ss&&["s",r]||r<n.s&&["ss",r]||s<=1&&["m"]||s<n.m&&["mm",s]||o<=1&&["h"]||o<n.h&&["hh",o]||d<=1&&["d"]||d<n.d&&["dd",d];return null!=n.w&&(h=h||u<=1&&["w"]||u<n.w&&["ww",u]),(h=h||l<=1&&["M"]||l<n.M&&["MM",l]||c<=1&&["y"]||["yy",c])[2]=t,h[3]=+e>0,h[4]=a,$n.apply(null,h)}(this,!i,r,n),i&&(a=n.pastFuture(+this,a)),n.postformat(a)},Zn.toISOString=Xn,Zn.toString=Xn,Zn.toJSON=Xn,Zn.locale=Qt,Zn.localeData=tn,Zn.toIsoString=Y("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Xn),Zn.lang=en,E("X",0,0,"unix"),E("x",0,0,"valueOf"),_e("x",ue),_e("X",/[+-]?\d+(\.\d{1,3})?/),Me("X",(function(e,t,n){n._d=new Date(1e3*parseFloat(e))})),Me("x",(function(e,t,n){n._d=new Date(U(e))})),//! moment.js
i.version="2.29.1",t=wt,i.fn=gn,i.min=function(){var e=[].slice.call(arguments,0);return St("isBefore",e)},i.max=function(){var e=[].slice.call(arguments,0);return St("isAfter",e)},i.now=function(){return Date.now?Date.now():+new Date},i.utc=_,i.unix=function(e){return wt(1e3*e)},i.months=function(e,t){return Ln(e,t,"months")},i.isDate=c,i.locale=st,i.invalid=g,i.duration=zt,i.isMoment=b,i.weekdays=function(e,t,n){return bn(e,t,n,"weekdays")},i.parseZone=function(){return wt.apply(null,arguments).parseZone()},i.localeData=dt,i.isDuration=Pt,i.monthsShort=function(e,t){return Ln(e,t,"monthsShort")},i.weekdaysMin=function(e,t,n){return bn(e,t,n,"weekdaysMin")},i.defineLocale=ot,i.updateLocale=function(e,t){if(null!=t){var n,a,i=et;null!=tt[e]&&null!=tt[e].parentLocale?tt[e].set(S(tt[e]._config,t)):(null!=(a=rt(e))&&(i=a._config),t=S(i,t),null==a&&(t.abbr=e),(n=new H(t)).parentLocale=tt[e],tt[e]=n),st(e)}else null!=tt[e]&&(null!=tt[e].parentLocale?(tt[e]=tt[e].parentLocale,e===st()&&st(e)):null!=tt[e]&&delete tt[e]);return tt[e]},i.locales=function(){return D(tt)},i.weekdaysShort=function(e,t,n){return bn(e,t,n,"weekdaysShort")},i.normalizeUnits=R,i.relativeTimeRounding=function(e){return void 0===e?Jn:"function"==typeof e&&(Jn=e,!0)},i.relativeTimeThreshold=function(e,t){return void 0!==Un[e]&&(void 0===t?Un[e]:(Un[e]=t,"s"===e&&(Un.ss=t-1),!0))},i.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},i.prototype=gn,i.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},i}()}).call(this,n(144)(e))},function(e,t,n){"use strict";var a,i=function(){return void 0===a&&(a=Boolean(window&&document&&document.all&&!window.atob)),a},r=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),s=[];function o(e){for(var t=-1,n=0;n<s.length;n++)if(s[n].identifier===e){t=n;break}return t}function d(e,t){for(var n={},a=[],i=0;i<e.length;i++){var r=e[i],d=t.base?r[0]+t.base:r[0],l=n[d]||0,u="".concat(d," ").concat(l);n[d]=l+1;var c=o(u),h={css:r[1],media:r[2],sourceMap:r[3]};-1!==c?(s[c].references++,s[c].updater(h)):s.push({identifier:u,updater:p(h,t),references:1}),a.push(u)}return a}function l(e){var t=document.createElement("style"),a=e.attributes||{};if(void 0===a.nonce){var i=n.nc;i&&(a.nonce=i)}if(Object.keys(a).forEach((function(e){t.setAttribute(e,a[e])})),"function"==typeof e.insert)e.insert(t);else{var s=r(e.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(t)}return t}var u,c=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function h(e,t,n,a){var i=n?"":a.media?"@media ".concat(a.media," {").concat(a.css,"}"):a.css;if(e.styleSheet)e.styleSheet.cssText=c(t,i);else{var r=document.createTextNode(i),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(r,s[t]):e.appendChild(r)}}function m(e,t,n){var a=n.css,i=n.media,r=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=a;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(a))}}var _=null,f=0;function p(e,t){var n,a,i;if(t.singleton){var r=f++;n=_||(_=l(t)),a=h.bind(null,n,r,!1),i=h.bind(null,n,r,!0)}else n=l(t),a=m.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return a(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;a(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=d(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var a=0;a<n.length;a++){var i=o(n[a]);s[i].references--}for(var r=d(e,t),l=0;l<n.length;l++){var u=o(n[l]);0===s[u].references&&(s[u].updater(),s.splice(u,1))}n=r}}}},function(e,t,n){"use strict";function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}n.d(t,"a",(function(){return r}));var i=function(e){return!!e&&!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},r=function(e,t){var n,r;"string"==typeof e?n=document.querySelector(e):"object"===a(e)&&(n=e),r=n.querySelector(t);var s=function(e){n.contains(e.target)||n.parentNode.contains(e.target)||(r.style.display="none")};n.addEventListener("click",(function(e){var t=r.contains(e.target);i(r)?i(r)&&!t&&(r.style.display="none",document.removeEventListener("click",s)):(r.style.display="block",document.addEventListener("click",s))}))}},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},a=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},i={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},r=function(e){return function(t,n,r,s){var o=a(t),d=i[e][a(t)];return 2===o&&(d=d[n?0:1]),d.replace(/%d/i,t)}},s=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:s,monthsShort:s,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:r("s"),ss:r("s"),m:r("m"),mm:r("m"),h:r("h"),hh:r("h"),d:r("d"),dd:r("d"),M:r("M"),MM:r("M"),y:r("y"),yy:r("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},n={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(e){return function(a,i,r,s){var o=t(a),d=n[e][t(a)];return 2===o&&(d=d[i?0:1]),d.replace(/%d/i,a)}},i=["جانفي","فيفري","مارس","أفريل","ماي","جوان","جويلية","أوت","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-dz",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),ss:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:0,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},a={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},i=function(e){return function(t,i,r,s){var o=n(t),d=a[e][n(t)];return 2===o&&(d=d[i?0:1]),d.replace(/%d/i,t)}},r=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:r,monthsShort:r,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:i("s"),ss:i("s"),m:i("m"),mm:i("m"),h:i("h"),hh:i("h"),d:i("d"),dd:i("d"),M:i("M"),MM:i("M"),y:i("y"),yy:i("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"bir neçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10;return e+(t[n]||t[e%100-n]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
function t(e,t,n){var a,i;return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+(a=+e,i={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[n].split("_"),a%10==1&&a%100!=11?i[0]:a%10>=2&&a%10<=4&&(a%100<10||a%100>=20)?i[1]:i[2])}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Миналата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[Миналия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",w:"седмица",ww:"%d седмици",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn-bd",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t?e<4?e:e+12:"ভোর"===t||"সকাল"===t?e:"দুপুর"===t?e>=3?e:e+12:"বিকাল"===t||"সন্ধ্যা"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"রাত":e<6?"ভোর":e<12?"সকাল":e<15?"দুপুর":e<18?"বিকাল":e<20?"সন্ধ্যা":"রাত"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12".split("_"),monthsShortRegex:/^(ཟླ་\d{1,2})/,monthsParseExact:!0,weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
function t(e,t,n){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}var n=[/^gen/i,/^c[ʼ\']hwe/i,/^meu/i,/^ebr/i,/^mae/i,/^(mez|eve)/i,/^gou/i,/^eos/i,/^gwe/i,/^her/i,/^du/i,/^ker/i],a=/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,i=[/^Su/i,/^Lu/i,/^Me([^r]|$)/i,/^Mer/i,/^Ya/i,/^Gw/i,/^Sa/i];e.defineLocale("br",{months:"Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParse:i,fullWeekdaysParse:[/^sul/i,/^lun/i,/^meurzh/i,/^merc[ʼ\']her/i,/^yaou/i,/^gwener/i,/^sadorn/i],shortWeekdaysParse:[/^Sul/i,/^Lun/i,/^Meu/i,/^Mer/i,/^Yao/i,/^Gwe/i,/^Sad/i],minWeekdaysParse:i,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,monthsShortStrictRegex:/^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY HH:mm",LLLL:"dddd, D [a viz] MMMM YYYY HH:mm"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warcʼhoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Decʼh da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s ʼzo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(function e(t){return t>9?e(t%10):t}(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){return e+(1===e?"añ":"vet")},week:{dow:1,doy:4},meridiemParse:/a.m.|g.m./,isPM:function(e){return"g.m."===e},meridiem:function(e,t,n){return e<12?"a.m.":"g.m."}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
function t(e,t,n){var a=e+" ";switch(n){case"ss":return a+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return a+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return a+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return a+=1===e?"dan":"dana";case"MM":return a+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return a+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),a=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],i=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function r(e){return e>1&&e<5&&1!=~~(e/10)}function s(e,t,n,a){var i=e+" ";switch(n){case"s":return t||a?"pár sekund":"pár sekundami";case"ss":return t||a?i+(r(e)?"sekundy":"sekund"):i+"sekundami";case"m":return t?"minuta":a?"minutu":"minutou";case"mm":return t||a?i+(r(e)?"minuty":"minut"):i+"minutami";case"h":return t?"hodina":a?"hodinu":"hodinou";case"hh":return t||a?i+(r(e)?"hodiny":"hodin"):i+"hodinami";case"d":return t||a?"den":"dnem";case"dd":return t||a?i+(r(e)?"dny":"dní"):i+"dny";case"M":return t||a?"měsíc":"měsícem";case"MM":return t||a?i+(r(e)?"měsíce":"měsíců"):i+"měsíci";case"y":return t||a?"rok":"rokem";case"yy":return t||a?i+(r(e)?"roky":"let"):i+"lety"}}e.defineLocale("cs",{months:t,monthsShort:n,monthsRegex:i,monthsShortRegex:i,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:s,ss:s,m:s,mm:s,h:s,hh:s,d:s,dd:s,M:s,MM:s,y:s,yy:s},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){return e+(/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t="";return e>20?t=40===e||50===e||60===e||80===e||100===e?"fed":"ain":e>0&&(t=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][e]),e+t},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
function t(e,t,n,a){var i={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?i[n][0]:i[n][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
function t(e,t,n,a){var i={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?i[n][0]:i[n][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
function t(e,t,n,a){var i={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?i[n][0]:i[n][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n,a=this._calendarEl[e],i=t&&t.hours();return n=a,("undefined"!=typeof Function&&n instanceof Function||"[object Function]"===Object.prototype.toString.call(n))&&(a=a.apply(t)),a.replace("{}",i%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("en-in",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("en-sg",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"[la] D[-an de] MMMM, YYYY",LLL:"[la] D[-an de] MMMM, YYYY HH:mm",LLLL:"dddd[n], [la] D[-an de] MMMM, YYYY HH:mm",llll:"ddd, [la] D[-an de] MMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd[n je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasintan] dddd[n je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"kelkaj sekundoj",ss:"%d sekundoj",m:"unu minuto",mm:"%d minutoj",h:"unu horo",hh:"%d horoj",d:"unu tago",dd:"%d tagoj",M:"unu monato",MM:"%d monatoj",y:"unu jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),a=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],i=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsRegex:i,monthsShortRegex:i,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4},invalidDate:"Fecha inválida"})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),a=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],i=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsRegex:i,monthsShortRegex:i,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),a=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],i=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-mx",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsRegex:i,monthsShortRegex:i,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:4},invalidDate:"Fecha inválida"})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),a=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],i=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsRegex:i,monthsShortRegex:i,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
function t(e,t,n,a){var i={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?i[n][2]?i[n][2]:i[n][1]:a?i[n][0]:i[n][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"%d ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function a(e,a,i,r){var s="";switch(i){case"s":return r?"muutaman sekunnin":"muutama sekunti";case"ss":s=r?"sekunnin":"sekuntia";break;case"m":return r?"minuutin":"minuutti";case"mm":s=r?"minuutin":"minuuttia";break;case"h":return r?"tunnin":"tunti";case"hh":s=r?"tunnin":"tuntia";break;case"d":return r?"päivän":"päivä";case"dd":s=r?"päivän":"päivää";break;case"M":return r?"kuukauden":"kuukausi";case"MM":s=r?"kuukauden":"kuukautta";break;case"y":return r?"vuoden":"vuosi";case"yy":s=r?"vuoden":"vuotta"}return s=function(e,a){return e<10?a?n[e]:t[e]:e}(e,r)+" "+s}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("fil",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t=/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,n=[/^janv/i,/^févr/i,/^mars/i,/^avr/i,/^mai/i,/^juin/i,/^juil/i,/^août/i,/^sept/i,/^oct/i,/^nov/i,/^déc/i];e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsRegex:t,monthsShortRegex:t,monthsStrictRegex:/^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,monthsShortStrictRegex:/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",w:"une semaine",ww:"%d semaines",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Meitheamh","Iúil","Lúnasa","Meán Fómhair","Deireadh Fómhair","Samhain","Nollaig"],monthsShort:["Ean","Feabh","Márt","Aib","Beal","Meith","Iúil","Lún","M.F.","D.F.","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Sathairn"],weekdaysShort:["Domh","Luan","Máirt","Céad","Déar","Aoine","Sath"],weekdaysMin:["Do","Lu","Má","Cé","Dé","A","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné ag] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d míonna",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
function t(e,t,n,a){var i={s:["थोडया सॅकंडांनी","थोडे सॅकंड"],ss:[e+" सॅकंडांनी",e+" सॅकंड"],m:["एका मिणटान","एक मिनूट"],mm:[e+" मिणटांनी",e+" मिणटां"],h:["एका वरान","एक वर"],hh:[e+" वरांनी",e+" वरां"],d:["एका दिसान","एक दीस"],dd:[e+" दिसांनी",e+" दीस"],M:["एका म्हयन्यान","एक म्हयनो"],MM:[e+" म्हयन्यानी",e+" म्हयने"],y:["एका वर्सान","एक वर्स"],yy:[e+" वर्सांनी",e+" वर्सां"]};return a?i[n][0]:i[n][1]}e.defineLocale("gom-deva",{months:{standalone:"जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),format:"जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार".split("_"),weekdaysShort:"आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.".split("_"),weekdaysMin:"आ_सो_मं_बु_ब्रे_सु_शे".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [वाजतां]",LTS:"A h:mm:ss [वाजतां]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [वाजतां]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [वाजतां]",llll:"ddd, D MMM YYYY, A h:mm [वाजतां]"},calendar:{sameDay:"[आयज] LT",nextDay:"[फाल्यां] LT",nextWeek:"[फुडलो] dddd[,] LT",lastDay:"[काल] LT",lastWeek:"[फाटलो] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s आदीं",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(वेर)/,ordinal:function(e,t){switch(t){case"D":return e+"वेर";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/राती|सकाळीं|दनपारां|सांजे/,meridiemHour:function(e,t){return 12===e&&(e=0),"राती"===t?e<4?e:e+12:"सकाळीं"===t?e:"दनपारां"===t?e>12?e:e+12:"सांजे"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"राती":e<12?"सकाळीं":e<16?"दनपारां":e<20?"सांजे":"राती"}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
function t(e,t,n,a){var i={s:["thoddea sekondamni","thodde sekond"],ss:[e+" sekondamni",e+" sekond"],m:["eka mintan","ek minut"],mm:[e+" mintamni",e+" mintam"],h:["eka voran","ek vor"],hh:[e+" voramni",e+" voram"],d:["eka disan","ek dis"],dd:[e+" disamni",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineamni",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsamni",e+" vorsam"]};return a?i[n][0]:i[n][1]}e.defineLocale("gom-latn",{months:{standalone:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),format:"Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Fuddlo] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fattlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){switch(t){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/rati|sokallim|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokallim"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokallim":e<16?"donparam":e<20?"sanje":"rati"}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પહેલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},a=[/^जन/i,/^फ़र|फर/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सितं|सित/i,/^अक्टू/i,/^नव|नवं/i,/^दिसं|दिस/i];e.defineLocale("hi",{months:{format:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),standalone:"जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर".split("_")},monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},monthsParse:a,longMonthsParse:a,shortMonthsParse:[/^जन/i,/^फ़र/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सित/i,/^अक्टू/i,/^नव/i,/^दिस/i],monthsRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsShortRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsStrictRegex:/^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,monthsShortStrictRegex:/^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
function t(e,t,n){var a=e+" ";switch(n){case"ss":return a+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return a+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return a+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return a+=1===e?"dan":"dana";case"MM":return a+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return a+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"Do MMMM YYYY",LLL:"Do MMMM YYYY H:mm",LLLL:"dddd, Do MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:return"[prošlu] [nedjelju] [u] LT";case 3:return"[prošlu] [srijedu] [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(e,t,n,a){var i=e;switch(n){case"s":return a||t?"néhány másodperc":"néhány másodperce";case"ss":return i+(a||t)?" másodperc":" másodperce";case"m":return"egy"+(a||t?" perc":" perce");case"mm":return i+(a||t?" perc":" perce");case"h":return"egy"+(a||t?" óra":" órája");case"hh":return i+(a||t?" óra":" órája");case"d":return"egy"+(a||t?" nap":" napja");case"dd":return i+(a||t?" nap":" napja");case"M":return"egy"+(a||t?" hónap":" hónapja");case"MM":return i+(a||t?" hónap":" hónapja");case"y":return"egy"+(a||t?" év":" éve");case"yy":return i+(a||t?" év":" éve")}return""}function a(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return a.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return a.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
function t(e){return e%100==11||e%10!=1}function n(e,n,a,i){var r=e+" ";switch(a){case"s":return n||i?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?r+(n||i?"sekúndur":"sekúndum"):r+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?r+(n||i?"mínútur":"mínútum"):n?r+"mínúta":r+"mínútu";case"hh":return t(e)?r+(n||i?"klukkustundir":"klukkustundum"):r+"klukkustund";case"d":return n?"dagur":i?"dag":"degi";case"dd":return t(e)?n?r+"dagar":r+(i?"daga":"dögum"):n?r+"dagur":r+(i?"dag":"degi");case"M":return n?"mánuður":i?"mánuð":"mánuði";case"MM":return t(e)?n?r+"mánuðir":r+(i?"mánuði":"mánuðum"):n?r+"mánuður":r+(i?"mánuð":"mánuði");case"y":return n||i?"ár":"ári";case"yy":return t(e)?r+(n||i?"ár":"árum"):r+(n||i?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:function(){return"[Oggi a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextDay:function(){return"[Domani a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextWeek:function(){return"dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastDay:function(){return"[Ieri a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastWeek:function(){switch(this.day()){case 0:return"[La scorsa] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT";default:return"[Lo scorso] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"}},sameElse:"L"},relativeTime:{future:"tra %s",past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",w:"una settimana",ww:"%d settimane",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("ja",{eras:[{since:"2019-05-01",offset:1,name:"令和",narrow:"㋿",abbr:"R"},{since:"1989-01-08",until:"2019-04-30",offset:1,name:"平成",narrow:"㍻",abbr:"H"},{since:"1926-12-25",until:"1989-01-07",offset:1,name:"昭和",narrow:"㍼",abbr:"S"},{since:"1912-07-30",until:"1926-12-24",offset:1,name:"大正",narrow:"㍽",abbr:"T"},{since:"1873-01-01",until:"1912-07-29",offset:6,name:"明治",narrow:"㍾",abbr:"M"},{since:"0001-01-01",until:"1873-12-31",offset:1,name:"西暦",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"紀元前",narrow:"BC",abbr:"BC"}],eraYearOrdinalRegex:/(元|\d+)年/,eraYearOrdinalParse:function(e,t){return"元"===t[1]?1:parseInt(t[1]||e,10)},months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()!==this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()!==e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"y":return 1===e?"元年":e+"年";case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("ka",{months:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return e.replace(/(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/,(function(e,t,n){return"ი"===n?t+"ში":t+n+"ში"}))},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):e},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,n){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},a=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];e.defineLocale("ku",{months:a,monthsShort:a,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(e){return/ئێواره‌/.test(e)},meridiem:function(e,t,n){return e<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
function t(e,t,n,a){var i={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?i[n][0]:i[n][1]}function n(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10;return n(0===t?e/10:t)}if(e<1e4){for(;e>=10;)e/=10;return n(e)}return n(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return n(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return n(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(e,t,n,a){return t?i(n)[0]:a?i(n)[1]:i(n)[2]}function a(e){return e%10==0||e>10&&e<20}function i(e){return t[e].split("_")}function r(e,t,r,s){var o=e+" ";return 1===e?o+n(0,t,r[0],s):t?o+(a(e)?i(r)[1]:i(r)[0]):s?o+i(r)[1]:o+(a(e)?i(r)[1]:i(r)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,n,a){return t?"kelios sekundės":a?"kelių sekundžių":"kelias sekundes"},ss:r,m:n,mm:r,h:n,hh:r,d:n,dd:r,M:n,MM:r,y:n,yy:r},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function a(e,a,i){return e+" "+n(t[i],e,a)}function i(e,a,i){return n(t[i],e,a)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:a,m:i,mm:a,h:i,hh:a,d:i,dd:a,M:i,MM:a,y:i,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,a){var i=t.words[a];return 1===a.length?n?i[0]:i[1]:e+" "+t.correctGrammaticalCase(e,i)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"за %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"една минута",mm:"%d минути",h:"еден час",hh:"%d часа",d:"еден ден",dd:"%d дена",M:"еден месец",MM:"%d месеци",y:"една година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
function t(e,t,n,a){switch(n){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,n){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function a(e,t,n,a){var i="";if(t)switch(n){case"s":i="काही सेकंद";break;case"ss":i="%d सेकंद";break;case"m":i="एक मिनिट";break;case"mm":i="%d मिनिटे";break;case"h":i="एक तास";break;case"hh":i="%d तास";break;case"d":i="एक दिवस";break;case"dd":i="%d दिवस";break;case"M":i="एक महिना";break;case"MM":i="%d महिने";break;case"y":i="एक वर्ष";break;case"yy":i="%d वर्षे"}else switch(n){case"s":i="काही सेकंदां";break;case"ss":i="%d सेकंदां";break;case"m":i="एका मिनिटा";break;case"mm":i="%d मिनिटां";break;case"h":i="एका तासा";break;case"hh":i="%d तासां";break;case"d":i="एका दिवसा";break;case"dd":i="%d दिवसां";break;case"M":i="एका महिन्या";break;case"MM":i="%d महिन्यां";break;case"y":i="एका वर्षा";break;case"yy":i="%d वर्षां"}return i.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,meridiemHour:function(e,t){return 12===e&&(e=0),"पहाटे"===t||"सकाळी"===t?e:"दुपारी"===t||"सायंकाळी"===t||"रात्री"===t?e>=12?e:e+12:void 0},meridiem:function(e,t,n){return e>=0&&e<6?"पहाटे":e<12?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",w:"en uke",ww:"%d uker",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),a=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],i=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsRegex:i,monthsShortRegex:i,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",w:"één week",ww:"%d weken",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),a=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],i=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsRegex:i,monthsShortRegex:i,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"su._må._ty._on._to._fr._lau.".split("_"),weekdaysMin:"su_må_ty_on_to_fr_la".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",w:"ei veke",ww:"%d veker",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("oc-lnc",{months:{standalone:"genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre".split("_"),format:"de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dm._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dm_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:"[uèi a] LT",nextDay:"[deman a] LT",nextWeek:"dddd [a] LT",lastDay:"[ièr a] LT",lastWeek:"dddd [passat a] LT",sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"unas segondas",ss:"%d segondas",m:"una minuta",mm:"%d minutas",h:"una ora",hh:"%d oras",d:"un jorn",dd:"%d jorns",M:"un mes",MM:"%d meses",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),a=[/^sty/i,/^lut/i,/^mar/i,/^kwi/i,/^maj/i,/^cze/i,/^lip/i,/^sie/i,/^wrz/i,/^paź/i,/^lis/i,/^gru/i];function i(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function r(e,t,n){var a=e+" ";switch(n){case"ss":return a+(i(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return a+(i(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return a+(i(e)?"godziny":"godzin");case"ww":return a+(i(e)?"tygodnie":"tygodni");case"MM":return a+(i(e)?"miesiące":"miesięcy");case"yy":return a+(i(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,a){return e?/D MMMM/.test(a)?n[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:r,m:r,mm:r,h:r,hh:r,d:"1 dzień",dd:"%d dni",w:"tydzień",ww:r,M:"miesiąc",MM:r,y:"rok",yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("pt",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",w:"uma semana",ww:"%d semanas",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("pt-br",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"do_2ª_3ª_4ª_5ª_6ª_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",invalidDate:"Data inválida"})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
function t(e,t,n){var a=" ";return(e%100>=20||e>=100&&e%100==0)&&(a=" de "),e+a+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",ww:"săptămâni",MM:"luni",yy:"ani"}[n]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,w:"o săptămână",ww:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
function t(e,t,n){var a,i;return"m"===n?t?"минута":"минуту":e+" "+(a=+e,i={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",ww:"неделя_недели_недель",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[n].split("_"),a%10==1&&a%100!=11?i[0]:a%10>=2&&a%10<=4&&(a%100<10||a%100>=20)?i[1]:i[2])}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,w:"неделя",ww:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function a(e){return e>1&&e<5}function i(e,t,n,i){var r=e+" ";switch(n){case"s":return t||i?"pár sekúnd":"pár sekundami";case"ss":return t||i?r+(a(e)?"sekundy":"sekúnd"):r+"sekundami";case"m":return t?"minúta":i?"minútu":"minútou";case"mm":return t||i?r+(a(e)?"minúty":"minút"):r+"minútami";case"h":return t?"hodina":i?"hodinu":"hodinou";case"hh":return t||i?r+(a(e)?"hodiny":"hodín"):r+"hodinami";case"d":return t||i?"deň":"dňom";case"dd":return t||i?r+(a(e)?"dni":"dní"):r+"dňami";case"M":return t||i?"mesiac":"mesiacom";case"MM":return t||i?r+(a(e)?"mesiace":"mesiacov"):r+"mesiacmi";case"y":return t||i?"rok":"rokom";case"yy":return t||i?r+(a(e)?"roky":"rokov"):r+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:i,ss:i,m:i,mm:i,h:i,hh:i,d:i,dd:i,M:i,MM:i,y:i,yy:i},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
function t(e,t,n,a){var i=e+" ";switch(n){case"s":return t||a?"nekaj sekund":"nekaj sekundami";case"ss":return i+=1===e?t?"sekundo":"sekundi":2===e?t||a?"sekundi":"sekundah":e<5?t||a?"sekunde":"sekundah":"sekund";case"m":return t?"ena minuta":"eno minuto";case"mm":return i+=1===e?t?"minuta":"minuto":2===e?t||a?"minuti":"minutama":e<5?t||a?"minute":"minutami":t||a?"minut":"minutami";case"h":return t?"ena ura":"eno uro";case"hh":return i+=1===e?t?"ura":"uro":2===e?t||a?"uri":"urama":e<5?t||a?"ure":"urami":t||a?"ur":"urami";case"d":return t||a?"en dan":"enim dnem";case"dd":return i+=1===e?t||a?"dan":"dnem":2===e?t||a?"dni":"dnevoma":t||a?"dni":"dnevi";case"M":return t||a?"en mesec":"enim mesecem";case"MM":return i+=1===e?t||a?"mesec":"mesecem":2===e?t||a?"meseca":"mesecema":e<5?t||a?"mesece":"meseci":t||a?"mesecev":"meseci";case"y":return t||a?"eno leto":"enim letom";case"yy":return i+=1===e?t||a?"leto":"letom":2===e?t||a?"leti":"letoma":e<5?t||a?"leta":"leti":t||a?"let":"leti"}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,a){var i=t.words[a];return 1===a.length?n?i[0]:i[1]:e+" "+t.correctGrammaticalCase(e,i)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,a){var i=t.words[a];return 1===a.length?n?i[0]:i[1]:e+" "+t.correctGrammaticalCase(e,i)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"дан",dd:t.translate,M:"месец",MM:t.translate,y:"годину",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(\:e|\:a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?":e":1===t||2===t?":a":":e")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"hh:mm A",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"siku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t||"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"segundu balun",ss:"segundu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:{format:"январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри".split("_"),standalone:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_")},monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Фардо соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",w:"1 สัปดาห์",ww:"%d สัปดาห์",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={1:"'inji",5:"'inji",8:"'inji",70:"'inji",80:"'inji",2:"'nji",7:"'nji",20:"'nji",50:"'nji",3:"'ünji",4:"'ünji",100:"'ünji",6:"'njy",9:"'unjy",10:"'unjy",30:"'unjy",60:"'ynjy",90:"'ynjy"};e.defineLocale("tk",{months:"Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr".split("_"),monthsShort:"Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek".split("_"),weekdays:"Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe".split("_"),weekdaysShort:"Ýek_Duş_Siş_Çar_Pen_Ann_Şen".split("_"),weekdaysMin:"Ýk_Dş_Sş_Çr_Pn_An_Şn".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün sagat] LT",nextDay:"[ertir sagat] LT",nextWeek:"[indiki] dddd [sagat] LT",lastDay:"[düýn] LT",lastWeek:"[geçen] dddd [sagat] LT",sameElse:"L"},relativeTime:{future:"%s soň",past:"%s öň",s:"birnäçe sekunt",m:"bir minut",mm:"%d minut",h:"bir sagat",hh:"%d sagat",d:"bir gün",dd:"%d gün",M:"bir aý",MM:"%d aý",y:"bir ýyl",yy:"%d ýyl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'unjy";var a=e%10;return e+(t[a]||t[e%100-a]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(e,n,a,i){var r=function(e){var n=Math.floor(e%1e3/100),a=Math.floor(e%100/10),i=e%10,r="";return n>0&&(r+=t[n]+"vatlh"),a>0&&(r+=(""!==r?" ":"")+t[a]+"maH"),i>0&&(r+=(""!==r?" ":"")+t[i]),""===r?"pagh":r}(e);switch(a){case"ss":return r+" lup";case"mm":return r+" tup";case"hh":return r+" rep";case"dd":return r+" jaj";case"MM":return r+" jar";case"yy":return r+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),meridiem:function(e,t,n){return e<12?n?"öö":"ÖÖ":n?"ös":"ÖS"},meridiemParse:/öö|ÖÖ|ös|ÖS/,isPM:function(e){return"ös"===e||"ÖS"===e},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",w:"bir hafta",ww:"%d hafta",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var a=e%10;return e+(t[a]||t[e%100-a]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
function t(e,t,n,a){var i={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return a||t?i[n][0]:i[n][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var a=100*e+t;return a<600?"يېرىم كېچە":a<900?"سەھەر":a<1130?"چۈشتىن بۇرۇن":a<1230?"چۈش":a<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
function t(e,t,n){var a,i;return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+(a=+e,i={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[n].split("_"),a%10==1&&a%100!=11?i[0]:a%10>=2&&a%10<=4&&(a%100<10||a%100>=20)?i[1]:i[2])}function n(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return!0===e?n.nominative.slice(1,7).concat(n.nominative.slice(0,1)):e?n[/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative"][e.day()]:n.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần trước lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",w:"một tuần",ww:"%d tuần",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var a=100*e+t;return a<600?"凌晨":a<900?"早上":a<1130?"上午":a<1230?"中午":a<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:function(e){return e.week()!==this.week()?"[下]dddLT":"[本]dddLT"},lastDay:"[昨天]LT",lastWeek:function(e){return this.week()!==e.week()?"[上]dddLT":"[本]dddLT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s后",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",w:"1 周",ww:"%d 周",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var a=100*e+t;return a<600?"凌晨":a<900?"早上":a<1200?"上午":1200===a?"中午":a<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("zh-mo",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"D/M/YYYY",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var a=100*e+t;return a<600?"凌晨":a<900?"早上":a<1130?"上午":a<1230?"中午":a<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(e,t,n){!function(e){"use strict";//! moment.js locale configuration
e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var a=100*e+t;return a<600?"凌晨":a<900?"早上":a<1130?"上午":a<1230?"中午":a<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(e,t,n){"use strict";var a=/([-.*+?^${}()|[\]\/\\])/g,i=/\\/g,r=function(e){return(e+"").replace(a,"\\$1")},s=function(e){return(e+"").replace(i,"")},o=RegExp("^(?:\\s*(,)\\s*|\\s*(<combinator>+)\\s*|(\\s+)|(<unicode>+|\\*)|\\#(<unicode>+)|\\.(<unicode>+)|\\[\\s*(<unicode1>+)(?:\\s*([*^$!~|]?=)(?:\\s*(?:([\"']?)(.*?)\\9)))?\\s*\\](?!\\])|(:+)(<unicode>+)(?:\\((?:(?:([\"'])([^\\13]*)\\13)|((?:\\([^)]+\\)|[^()]*)+))\\))?)".replace(/<combinator>/,"["+r(">+~`!@$%^&={}\\;</")+"]").replace(/<unicode>/g,"(?:[\\w\\u00a1-\\uFFFF-]|\\\\[^\\s0-9a-f])").replace(/<unicode1>/g,"(?:[:\\w\\u00a1-\\uFFFF-]|\\\\[^\\s0-9a-f])")),d=function(e){this.combinator=e||" ",this.tag="*"};d.prototype.toString=function(){if(!this.raw){var e,t,n="";if(n+=this.tag||"*",this.id&&(n+="#"+this.id),this.classes&&(n+="."+this.classList.join(".")),this.attributes)for(e=0;t=this.attributes[e++];)n+="["+t.name+(t.operator?t.operator+'"'+t.value+'"':"")+"]";if(this.pseudos)for(e=0;t=this.pseudos[e++];)n+=":"+t.name,t.value&&(n+="("+t.value+")");this.raw=n}return this.raw};var l=function(){this.length=0};l.prototype.toString=function(){if(!this.raw){for(var e,t="",n=0;e=this[n++];)1!==n&&(t+=" ")," "!==e.combinator&&(t+=e.combinator+" "),t+=e;this.raw=t}return this.raw};var u=function(e,t,n,a,i,o,u,c,h,m,_,f,p,g,y,M){var v,L;if((t||!this.length)&&(v=this[this.length++]=new l,t))return"";if(v||(v=this[this.length-1]),(n||a||!v.length)&&(L=v[v.length++]=new d(n)),L||(L=v[v.length-1]),i)L.tag=s(i);else if(o)L.id=s(o);else if(u){var b=s(u),k=L.classes||(L.classes={});if(!k[b]){k[b]=r(u);var Y=L.classList||(L.classList=[]);Y.push(b),Y.sort()}}else p?(M=M||y,(L.pseudos||(L.pseudos=[])).push({type:1==f.length?"class":"element",name:s(p),escapedName:r(p),value:M?s(M):null,escapedValue:M?r(M):null})):c&&(_=_?r(_):null,(L.attributes||(L.attributes=[])).push({operator:h,name:s(c),escapedName:r(c),value:_?s(_):null,escapedValue:_?r(_):null}));return""},c=function(e){this.length=0;for(var t,n=this,a=e;e;){if((t=e.replace(o,(function(){return u.apply(n,arguments)})))===e)throw new Error(a+" is an invalid expression");e=t}};c.prototype.toString=function(){if(!this.raw){for(var e,t=[],n=0;e=this[n++];)t.push(e);this.raw=t.join(", ")}return this.raw};var h={};e.exports=function(e){return null==e?null:(e=(""+e).replace(/^\s+|\s+$/g,""),h[e]||(h[e]=new c(e)))}},function(e,t,n){"use strict";n(140);var a=n(2);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var s=function(){function e(t,n,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.listName=n,this.bindPopup(t,n),this.bindIncrement(),this.limit=a}var t,n,s;return t=e,(n=[{key:"bindPopup",value:function(e,t){"string"==typeof e?this.element=document.querySelector(e):"object"===i(e)&&(this.element=e),this.list=this.element.querySelector(this.listName),this.input=this.element.getElementsByClassName("dropdown-accom input")[0],Object(a.a)(e,t);var n=this.element.querySelector(".dropdown-accom__submit");this.submit=n;var r=this.element.querySelector(".dropdown-accom__clear");this.clear=r}},{key:"bindIncrement",value:function(){var e=this,t=Array.from(this.element.querySelectorAll("".concat(this.listName," li")));this.count=new Map;var n=function(t){var n=t.target.closest("li").getElementsByClassName("dropdown-accom__variant")[0].textContent.toLowerCase(),a=e.count.get(n),i=Number(a.get("value"));e.restrictDecrement(n,i+1),e.count.get(n).set("value",i+1),e.refresh(n)},a=function(t){var n=t.target.closest("li").getElementsByClassName("dropdown-accom__variant")[0].textContent.toLowerCase(),a=e.count.get(n),i=Number(a.get("value"));e.restrictDecrement(n,i-1),e.count.get(n).set("value",i-1),e.refresh(n)};t.forEach((function(t){var i=t.getElementsByClassName("dropdown-accom__span")[0],r=t.getElementsByClassName("dropdown-accom__button--next")[0],s=t.getElementsByClassName("dropdown-accom__button--prev")[0],o=t.getElementsByClassName("dropdown-accom__variant")[0],d=new Map;d.set("increment",r),d.set("decrement",s),d.set("value",Number(i.textContent)),d.set("textElement",i),e.count.set(o.textContent.toLowerCase(),d),r.addEventListener("click",n),s.addEventListener("click",a)})),this.submit&&this.count&&(this.submit.addEventListener("click",(function(){e.input.setAttribute("placeholder",e.total)})),this.count.set("total",0)),this.count&&this.clear&&this.clear.addEventListener("click",(function(){e.returnToDefault(),e.refresh(),e.input.setAttribute("placeholder",e.total)}))}},{key:"returnToDefault",value:function(){var e=this;Array.from(this.count.keys()).forEach((function(t){if("total"===t)return!1;e.count.get(t).set("value",2)}))}},{key:"refresh",value:function(e){var t=this;if(void 0===e){var n=Array.from(this.count.keys());return n=n.filter((function(e){return"total"!==e})),console.log(n),void n.forEach((function(e){if("total"===e)return!1;t.refresh(e)}))}var a=this.count.get(e).get("value");if(this.restrictDecrement(e,a),this.count.get(e).get("textElement").textContent=String(a),this.submit){var i=this.countTottal();this.total=i}}},{key:"countTottal",value:function(){var e=this,t=0;return Array.from(this.count.keys()).forEach((function(n){if("total"===n)return!1;t+=Number(e.count.get(n).get("value"))})),t}},{key:"restrictDecrement",value:function(e,t){var n=this.count.get(e).get("decrement");if(t===this.limit)return n.disabled=!0,!1;n.disabled=!1}}])&&r(t.prototype,n),s&&r(t,s),e}();document.addEventListener("DOMContentLoaded",(function(e){Array.from(document.getElementsByClassName("dropdown-accom__big")).forEach((function(e){new s(e,".dropdown-accom__ul",0)}))}))},function(e,t,n){var a=n(1),i=n(141);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(151);$((function(){$(".star--active").on("click",(function(){$(this).parent().prevAll().find(".star--active").css("opacity","1"),$(this).css("opacity",1),$(this).parent().nextAll().find(".star--active").css("opacity",0)}))}))},function(e,t,n){"use strict";n(146);var a=n(0),i=n.n(a);$((function(){$(".filter-date-dropdown").daterangepicker({maxSpan:{days:7},locale:{format:"MM/DD/YYYY",separator:" - ",applyLabel:"применить",cancelLabel:"очистить",fromLabel:"From",toLabel:"To",customRangeLabel:"Custom",weekLabel:"W",daysOfWeek:["Воскр","Пон","Вт","Ср","Чт","Пятн","Суб"],monthNames:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],firstDay:1},linkedCalendars:!1,startDate:"02/04/2021",endDate:"02/11/2021"}),$(".filter-date-dropdown").on("apply.daterangepicker",(function(e,t){var n=i()().locale("ru").format("MMMM");"т"==n[n.length-1]?n+="а":"т"!==n[n.length-1]&&(n=n.slice(0,6)+"я"),$(this).val(t.startDate.format("D "+n)+" - "+t.endDate.format("D "+n))}));i()().locale("ru").format("MMMM");$(".daterangepicker").css("top","20%")}))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var a={"./af":3,"./af.js":3,"./ar":4,"./ar-dz":5,"./ar-dz.js":5,"./ar-kw":6,"./ar-kw.js":6,"./ar-ly":7,"./ar-ly.js":7,"./ar-ma":8,"./ar-ma.js":8,"./ar-sa":9,"./ar-sa.js":9,"./ar-tn":10,"./ar-tn.js":10,"./ar.js":4,"./az":11,"./az.js":11,"./be":12,"./be.js":12,"./bg":13,"./bg.js":13,"./bm":14,"./bm.js":14,"./bn":15,"./bn-bd":16,"./bn-bd.js":16,"./bn.js":15,"./bo":17,"./bo.js":17,"./br":18,"./br.js":18,"./bs":19,"./bs.js":19,"./ca":20,"./ca.js":20,"./cs":21,"./cs.js":21,"./cv":22,"./cv.js":22,"./cy":23,"./cy.js":23,"./da":24,"./da.js":24,"./de":25,"./de-at":26,"./de-at.js":26,"./de-ch":27,"./de-ch.js":27,"./de.js":25,"./dv":28,"./dv.js":28,"./el":29,"./el.js":29,"./en-au":30,"./en-au.js":30,"./en-ca":31,"./en-ca.js":31,"./en-gb":32,"./en-gb.js":32,"./en-ie":33,"./en-ie.js":33,"./en-il":34,"./en-il.js":34,"./en-in":35,"./en-in.js":35,"./en-nz":36,"./en-nz.js":36,"./en-sg":37,"./en-sg.js":37,"./eo":38,"./eo.js":38,"./es":39,"./es-do":40,"./es-do.js":40,"./es-mx":41,"./es-mx.js":41,"./es-us":42,"./es-us.js":42,"./es.js":39,"./et":43,"./et.js":43,"./eu":44,"./eu.js":44,"./fa":45,"./fa.js":45,"./fi":46,"./fi.js":46,"./fil":47,"./fil.js":47,"./fo":48,"./fo.js":48,"./fr":49,"./fr-ca":50,"./fr-ca.js":50,"./fr-ch":51,"./fr-ch.js":51,"./fr.js":49,"./fy":52,"./fy.js":52,"./ga":53,"./ga.js":53,"./gd":54,"./gd.js":54,"./gl":55,"./gl.js":55,"./gom-deva":56,"./gom-deva.js":56,"./gom-latn":57,"./gom-latn.js":57,"./gu":58,"./gu.js":58,"./he":59,"./he.js":59,"./hi":60,"./hi.js":60,"./hr":61,"./hr.js":61,"./hu":62,"./hu.js":62,"./hy-am":63,"./hy-am.js":63,"./id":64,"./id.js":64,"./is":65,"./is.js":65,"./it":66,"./it-ch":67,"./it-ch.js":67,"./it.js":66,"./ja":68,"./ja.js":68,"./jv":69,"./jv.js":69,"./ka":70,"./ka.js":70,"./kk":71,"./kk.js":71,"./km":72,"./km.js":72,"./kn":73,"./kn.js":73,"./ko":74,"./ko.js":74,"./ku":75,"./ku.js":75,"./ky":76,"./ky.js":76,"./lb":77,"./lb.js":77,"./lo":78,"./lo.js":78,"./lt":79,"./lt.js":79,"./lv":80,"./lv.js":80,"./me":81,"./me.js":81,"./mi":82,"./mi.js":82,"./mk":83,"./mk.js":83,"./ml":84,"./ml.js":84,"./mn":85,"./mn.js":85,"./mr":86,"./mr.js":86,"./ms":87,"./ms-my":88,"./ms-my.js":88,"./ms.js":87,"./mt":89,"./mt.js":89,"./my":90,"./my.js":90,"./nb":91,"./nb.js":91,"./ne":92,"./ne.js":92,"./nl":93,"./nl-be":94,"./nl-be.js":94,"./nl.js":93,"./nn":95,"./nn.js":95,"./oc-lnc":96,"./oc-lnc.js":96,"./pa-in":97,"./pa-in.js":97,"./pl":98,"./pl.js":98,"./pt":99,"./pt-br":100,"./pt-br.js":100,"./pt.js":99,"./ro":101,"./ro.js":101,"./ru":102,"./ru.js":102,"./sd":103,"./sd.js":103,"./se":104,"./se.js":104,"./si":105,"./si.js":105,"./sk":106,"./sk.js":106,"./sl":107,"./sl.js":107,"./sq":108,"./sq.js":108,"./sr":109,"./sr-cyrl":110,"./sr-cyrl.js":110,"./sr.js":109,"./ss":111,"./ss.js":111,"./sv":112,"./sv.js":112,"./sw":113,"./sw.js":113,"./ta":114,"./ta.js":114,"./te":115,"./te.js":115,"./tet":116,"./tet.js":116,"./tg":117,"./tg.js":117,"./th":118,"./th.js":118,"./tk":119,"./tk.js":119,"./tl-ph":120,"./tl-ph.js":120,"./tlh":121,"./tlh.js":121,"./tr":122,"./tr.js":122,"./tzl":123,"./tzl.js":123,"./tzm":124,"./tzm-latn":125,"./tzm-latn.js":125,"./tzm.js":124,"./ug-cn":126,"./ug-cn.js":126,"./uk":127,"./uk.js":127,"./ur":128,"./ur.js":128,"./uz":129,"./uz-latn":130,"./uz-latn.js":130,"./uz.js":129,"./vi":131,"./vi.js":131,"./x-pseudo":132,"./x-pseudo.js":132,"./yo":133,"./yo.js":133,"./zh-cn":134,"./zh-cn.js":134,"./zh-hk":135,"./zh-hk.js":135,"./zh-mo":136,"./zh-mo.js":136,"./zh-tw":137,"./zh-tw.js":137};function i(e){var t=r(e);return n(t)}function r(e){if(!n.o(a,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return a[e]}i.keys=function(){return Object.keys(a)},i.resolve=r,e.exports=i,i.id=145},function(e,t,n){var a=n(1),i=n(147);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(149),n(142),n(153);$((function(){$(".hotel-card__slider").slick({slidesToShow:1,slidesToScroll:1,fade:!1,arrows:!0,dots:!0})}))},function(e,t,n){var a=n(1),i=n(150);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){},function(e,t,n){var a=n(1),i=n(152);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){},function(e,t,n){"use strict";(function(t){e.exports="document"in t?n(155):{parse:n(138)}}).call(this,n(154))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var a=n(138),i=0,r="uid:"+(document.__counter=(parseInt(document.__counter||-1,36)+1).toString(36)),s=function(e,t){if(e===window)return"window";if(e===document)return"document";if(e===document.documentElement)return"html";if(t){var n=e.getAttribute(r);return n||(n=(i++).toString(36),e.setAttribute(r,n)),n}return e[r]||(e[r]=(i++).toString(36))},o=function(e){return s(e,!0)},d=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},l=0,u={GET_ELEMENT_BY_ID:function(e,t){return t="slick_"+l++,e.innerHTML='<a id="'+t+'"></a>',!!this.getElementById(t)},QUERY_SELECTOR:function(e){return e.innerHTML="_<style>:nth-child(2){}</style>",e.innerHTML='<a class="MiX"></a>',1===e.querySelectorAll(".MiX").length},EXPANDOS:function(e,t){return t="slick_"+l++,e._custom_property_=t,e._custom_property_===t},MATCHES_SELECTOR:function(e){e.className="MiX";var t=e.matchesSelector||e.mozMatchesSelector||e.webkitMatchesSelector;if(t)try{t.call(e,":slick")}catch(n){return!!t.call(e,".MiX")&&t}return!1},GET_ELEMENTS_BY_CLASS_NAME:function(e){return e.innerHTML='<a class="f"></a><a class="b"></a>',1===e.getElementsByClassName("b").length&&(e.firstChild.className="b",2===e.getElementsByClassName("b").length&&(e.innerHTML='<a class="a"></a><a class="f b a"></a>',2===e.getElementsByClassName("a").length))},GET_ATTRIBUTE:function(e){return e.innerHTML='<a class="fus ro dah"></a>',"fus ro dah"===e.firstChild.getAttribute("class")}},c=function(e){this.document=e;var t=this.root=e.documentElement;this.tested={},this.uniqueID=this.has("EXPANDOS")?s:o,this.getAttribute=this.has("GET_ATTRIBUTE")?function(e,t){return e.getAttribute(t)}:function(e,t){return(e=e.getAttributeNode(t))&&e.specified?e.value:null},this.hasAttribute=t.hasAttribute?function(e,t){return e.hasAttribute(t)}:function(e,t){return!(!(e=e.getAttributeNode(t))||!e.specified)},this.contains=e.contains&&t.contains?function(e,t){return e.contains(t)}:t.compareDocumentPosition?function(e,t){return e===t||!!(16&e.compareDocumentPosition(t))}:function(e,t){do{if(t===e)return!0}while(t=t.parentNode);return!1},this.sorter=t.compareDocumentPosition?function(e,t){return e.compareDocumentPosition&&t.compareDocumentPosition?4&e.compareDocumentPosition(t)?-1:e===t?0:1:0}:"sourceIndex"in t?function(e,t){return e.sourceIndex&&t.sourceIndex?e.sourceIndex-t.sourceIndex:0}:e.createRange?function(e,t){if(!e.ownerDocument||!t.ownerDocument)return 0;var n=e.ownerDocument.createRange(),a=t.ownerDocument.createRange();return n.setStart(e,0),n.setEnd(e,0),a.setStart(t,0),a.setEnd(t,0),n.compareBoundaryPoints(Range.START_TO_END,a)}:null,this.failed={};var n=this.has("MATCHES_SELECTOR");n&&(this.matchesSelector=function(e,t){if(this.failed[t])return null;try{return n.call(e,t)}catch(e){return p.debug&&console.warn("matchesSelector failed on "+t),this.failed[t]=!0,null}}),this.has("QUERY_SELECTOR")&&(this.querySelectorAll=function(e,t){if(this.failed[t])return!0;var n,a,i,r,s;if(e!==this.document&&(r=t[0].combinator,i=t,(a=e.getAttribute("id"))||(a="__slick__",(s=e).setAttribute("id",a)),t="#"+a+" "+i,(r.indexOf("~")>-1||r.indexOf("+")>-1)&&((e=e.parentNode)||(n=!0))),!n)try{n=e.querySelectorAll(t.toString())}catch(e){p.debug&&console.warn("querySelectorAll failed on "+(i||t)),n=this.failed[i||t]=!0}return s&&s.removeAttribute("id"),n})};c.prototype.has=function(e){var t=this.tested,n=t[e];if(null!=n)return n;var a=this.root,i=this.document,r=i.createElement("div");r.setAttribute("style","display: none;"),a.appendChild(r);var s=u[e],o=!1;if(s)try{o=s.call(i,r)}catch(e){}return p.debug&&!o&&console.warn("document has no "+e),a.removeChild(r),t[e]=o};var h={" ":function(e,t,n){var a,i,r=!t.id,s=!t.tag,o=!t.classes;if(t.id&&e.getElementById&&this.has("GET_ELEMENT_BY_ID")&&(a=e.getElementById(t.id))&&a.getAttribute("id")===t.id&&(i=[a],r=!0,"*"===t.tag&&(s=!0)),!i&&(t.classes&&e.getElementsByClassName&&this.has("GET_ELEMENTS_BY_CLASS_NAME")?(i=e.getElementsByClassName(t.classList),o=!0,"*"===t.tag&&(s=!0)):(i=e.getElementsByTagName(t.tag),"*"!==t.tag&&(s=!0)),!i||!i.length))return!1;for(var d=0;a=i[d++];)(s&&r&&o&&!t.attributes&&!t.pseudos||this.match(a,t,s,r,o))&&n(a);return!0},">":function(e,t,n){if(e=e.firstChild)do{1==e.nodeType&&this.match(e,t)&&n(e)}while(e=e.nextSibling)},"+":function(e,t,n){for(;e=e.nextSibling;)if(1==e.nodeType){this.match(e,t)&&n(e);break}},"^":function(e,t,n){(e=e.firstChild)&&(1===e.nodeType?this.match(e,t)&&n(e):h["+"].call(this,e,t,n))},"~":function(e,t,n){for(;e=e.nextSibling;)1===e.nodeType&&this.match(e,t)&&n(e)},"++":function(e,t,n){h["+"].call(this,e,t,n),h["!+"].call(this,e,t,n)},"~~":function(e,t,n){h["~"].call(this,e,t,n),h["!~"].call(this,e,t,n)},"!":function(e,t,n){for(;e=e.parentNode;)e!==this.document&&this.match(e,t)&&n(e)},"!>":function(e,t,n){(e=e.parentNode)!==this.document&&this.match(e,t)&&n(e)},"!+":function(e,t,n){for(;e=e.previousSibling;)if(1==e.nodeType){this.match(e,t)&&n(e);break}},"!^":function(e,t,n){(e=e.lastChild)&&(1==e.nodeType?this.match(e,t)&&n(e):h["!+"].call(this,e,t,n))},"!~":function(e,t,n){for(;e=e.previousSibling;)1===e.nodeType&&this.match(e,t)&&n(e)}};c.prototype.search=function(e,t,n){e?!e.nodeType&&e.document&&(e=e.document):e=this.document;var i=a(t);if(!i||!i.length)throw new Error("invalid expression");n||(n=[]);var r,o,l,u,c=d(n)?function(e){n[n.length]=e}:function(e){n[n.length++]=e};if(i.length>1){r={};var m=c;c=function(e){var t=s(e);r[t]||(r[t]=!0,m(e))}}e:for(var _=0;t=i[_++];)if(p.noQSA||!this.querySelectorAll||!0===(l=this.querySelectorAll(e,t)))if(1===t.length)u=t[0],h[u.combinator].call(this,e,u,c);else{var f,g,y,M=[e],v=function(e){var t=s(e);y[t]||(y[t]=!0,g[g.length]=e)};for(k=0;u=t[k++];){g=[],y={};for(var L=0;f=M[L++];)h[u.combinator].call(this,f,u,v);if(!g.length)continue e;M=g}if(0===_)n=g;else for(var b=0;b<g.length;b++)c(g[b])}else if(l&&l.length)for(var k=0;o=l[k++];)o.nodeName>"@"&&c(o);return r&&n&&n.length>1&&this.sort(n),n},c.prototype.sort=function(e){return this.sorter?Array.prototype.sort.call(e,this.sorter):e};var m={empty:function(){return!(this&&1===this.nodeType||(this.innerText||this.textContent||"").length)},not:function(e){return!p.matches(this,e)},contains:function(e){return(this.innerText||this.textContent||"").indexOf(e)>-1},"first-child":function(){for(var e=this;e=e.previousSibling;)if(1==e.nodeType)return!1;return!0},"last-child":function(){for(var e=this;e=e.nextSibling;)if(1==e.nodeType)return!1;return!0},"only-child":function(){for(var e=this;e=e.previousSibling;)if(1==e.nodeType)return!1;for(var t=this;t=t.nextSibling;)if(1==t.nodeType)return!1;return!0},"first-of-type":function(){for(var e=this,t=e.nodeName;e=e.previousSibling;)if(e.nodeName==t)return!1;return!0},"last-of-type":function(){for(var e=this,t=e.nodeName;e=e.nextSibling;)if(e.nodeName==t)return!1;return!0},"only-of-type":function(){for(var e=this,t=this.nodeName;e=e.previousSibling;)if(e.nodeName==t)return!1;for(var n=this;n=n.nextSibling;)if(n.nodeName==t)return!1;return!0},enabled:function(){return!this.disabled},disabled:function(){return this.disabled},checked:function(){return this.checked||this.selected},selected:function(){return this.selected},focus:function(){return this.ownerDocument.activeElement===this&&(this.href||this.type||p.hasAttribute(this,"tabindex"))},root:function(){return this===this.ownerDocument.documentElement}};c.prototype.match=function(e,t,n,a,i){if(!p.noQSA&&this.matchesSelector){var r=this.matchesSelector(e,t);if(null!==r)return r}if(!n&&t.tag){var s=e.nodeName.toLowerCase();if("*"===t.tag){if(s<"@")return!1}else if(s!=t.tag)return!1}if(!a&&t.id&&e.getAttribute("id")!==t.id)return!1;var o,d,l,u;if(!i&&t.classes){var c=this.getAttribute(e,"class");if(!c)return!1;for(d in t.classes)if(!RegExp("(^|\\s)"+t.classes[d]+"(\\s|$)").test(c))return!1}if(t.attributes)for(o=0;d=t.attributes[o++];){var h=d.operator,_=d.escapedValue;if(l=d.name,u=d.value,h){var f=this.getAttribute(e,l);if(null==f)return!1;switch(h){case"^=":if(!RegExp("^"+_).test(f))return!1;break;case"$=":if(!RegExp(_+"$").test(f))return!1;break;case"~=":if(!RegExp("(^|\\s)"+_+"(\\s|$)").test(f))return!1;break;case"|=":if(!RegExp("^"+_+"(-|$)").test(f))return!1;break;case"=":if(f!==u)return!1;break;case"*=":if(-1===f.indexOf(u))return!1;break;default:return!1}}else if(!this.hasAttribute(e,l))return!1}if(t.pseudos)for(o=0;d=t.pseudos[o++];){if(l=d.name,u=d.value,m[l])return m[l].call(e,u);if(null!=u){if(this.getAttribute(e,l)!==u)return!1}else if(!this.hasAttribute(e,l))return!1}return!0},c.prototype.matches=function(e,t){var n=a(t);if(1===n.length&&1===n[0].length)return this.match(e,n[0][0]);if(!p.noQSA&&this.matchesSelector){var i=this.matchesSelector(e,n);if(null!==i)return i}for(var r,s=this.search(this.document,t,{length:0}),o=0;r=s[o++];)if(e===r)return!0;return!1};var _={},f=function(e){var t=e||document;if(t.ownerDocument?t=t.ownerDocument:t.document&&(t=t.document),9!==t.nodeType)throw new TypeError("invalid document");var n=s(t);return _[n]||(_[n]=new c(t))},p=function(e,t){return p.search(e,t)};p.search=function(e,t,n){return f(t).search(t,e,n)},p.find=function(e,t){return f(t).search(t,e)[0]||null},p.getAttribute=function(e,t){return f(e).getAttribute(e,t)},p.hasAttribute=function(e,t){return f(e).hasAttribute(e,t)},p.contains=function(e,t){return f(e).contains(e,t)},p.matches=function(e,t){return f(e).matches(e,t)},p.sort=function(e){return e&&e.length>1&&f(e[0]).sort(e),e},p.parse=a,e.exports=p},function(e,t,n){"use strict";n(157)},function(e,t,n){var a=n(1),i=n(158);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(160)},function(e,t,n){var a=n(1),i=n(161);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(163)},function(e,t,n){var a=n(1),i=n(164);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(166)},function(e,t,n){var a=n(1),i=n(167);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(169),n(171);$((function(){$(".datepicker").daterangepicker({maxSpan:{days:60},opens:"center",applyButtonClasses:"hotel-card__applybtn",cancelButtonClasses:"hotel-card__cancelbtn",locale:{applyLabel:"применить",cancelLabel:"очистить",format:"MM.DD.YYYY",separator:" - ",fromLabel:"From",toLabel:"To",customRangeLabel:"Custom",weekLabel:"W",daysOfWeek:["Воскр","Пон","Вт","Ср","Чт","Пятн","Суб"],monthNames:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],firstDay:1},singleDatePicker:!0,showCustomRangeLabel:!1,startDate:"02/04/2021",endDate:"02/11/2021",autoUpdateInput:!0}),$("td").on("click",(function(){$(".end-date").removeClass("in-range")})),$(".card__datepicker").click(),$(document).mouseup((function(){$(".end-date").removeClass("in-range")})),$(".ui-datepicker-calendar a.ui-state-default").css("width","20px")}))},function(e,t,n){var a=n(1),i=n(170);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){},function(e,t,n){var a,i;
/**
* @version: 3.1
* @author: Dan Grossman http://www.dangrossman.info/
* @copyright: Copyright (c) 2012-2019 Dan Grossman. All rights reserved.
* @license: Licensed under the MIT license. See http://www.opensource.org/licenses/mit-license.php
* @website: http://www.daterangepicker.com/
*/a=[n(0),n(172)],void 0===(i=function(e,t){return t.fn||(t.fn={}),"function"!=typeof e&&e.hasOwnProperty("default")&&(e=e.default),function(e,t){var n=function(n,a,i){if(this.parentEl="body",this.element=t(n),this.startDate=e().startOf("day"),this.endDate=e().endOf("day"),this.minDate=!1,this.maxDate=!1,this.maxSpan=!1,this.autoApply=!1,this.singleDatePicker=!1,this.showDropdowns=!1,this.minYear=e().subtract(100,"year").format("YYYY"),this.maxYear=e().add(100,"year").format("YYYY"),this.showWeekNumbers=!1,this.showISOWeekNumbers=!1,this.showCustomRangeLabel=!0,this.timePicker=!1,this.timePicker24Hour=!1,this.timePickerIncrement=1,this.timePickerSeconds=!1,this.linkedCalendars=!0,this.autoUpdateInput=!0,this.alwaysShowCalendars=!1,this.ranges={},this.opens="right",this.element.hasClass("pull-right")&&(this.opens="left"),this.drops="down",this.element.hasClass("dropup")&&(this.drops="up"),this.buttonClasses="btn btn-sm",this.applyButtonClasses="btn-primary",this.cancelButtonClasses="btn-default",this.locale={direction:"ltr",format:e.localeData().longDateFormat("L"),separator:" - ",applyLabel:"Apply",cancelLabel:"Cancel",weekLabel:"W",customRangeLabel:"Custom Range",daysOfWeek:e.weekdaysMin(),monthNames:e.monthsShort(),firstDay:e.localeData().firstDayOfWeek()},this.callback=function(){},this.isShowing=!1,this.leftCalendar={},this.rightCalendar={},"object"==typeof a&&null!==a||(a={}),"string"==typeof(a=t.extend(this.element.data(),a)).template||a.template instanceof t||(a.template='<div class="daterangepicker"><div class="ranges"></div><div class="drp-calendar left"><div class="calendar-table"></div><div class="calendar-time"></div></div><div class="drp-calendar right"><div class="calendar-table"></div><div class="calendar-time"></div></div><div class="drp-buttons"><span class="drp-selected"></span><button class="cancelBtn" type="button"></button><button class="applyBtn" disabled="disabled" type="button"></button> </div></div>'),this.parentEl=a.parentEl&&t(a.parentEl).length?t(a.parentEl):t(this.parentEl),this.container=t(a.template).appendTo(this.parentEl),"object"==typeof a.locale&&("string"==typeof a.locale.direction&&(this.locale.direction=a.locale.direction),"string"==typeof a.locale.format&&(this.locale.format=a.locale.format),"string"==typeof a.locale.separator&&(this.locale.separator=a.locale.separator),"object"==typeof a.locale.daysOfWeek&&(this.locale.daysOfWeek=a.locale.daysOfWeek.slice()),"object"==typeof a.locale.monthNames&&(this.locale.monthNames=a.locale.monthNames.slice()),"number"==typeof a.locale.firstDay&&(this.locale.firstDay=a.locale.firstDay),"string"==typeof a.locale.applyLabel&&(this.locale.applyLabel=a.locale.applyLabel),"string"==typeof a.locale.cancelLabel&&(this.locale.cancelLabel=a.locale.cancelLabel),"string"==typeof a.locale.weekLabel&&(this.locale.weekLabel=a.locale.weekLabel),"string"==typeof a.locale.customRangeLabel)){(h=document.createElement("textarea")).innerHTML=a.locale.customRangeLabel;var r=h.value;this.locale.customRangeLabel=r}if(this.container.addClass(this.locale.direction),"string"==typeof a.startDate&&(this.startDate=e(a.startDate,this.locale.format)),"string"==typeof a.endDate&&(this.endDate=e(a.endDate,this.locale.format)),"string"==typeof a.minDate&&(this.minDate=e(a.minDate,this.locale.format)),"string"==typeof a.maxDate&&(this.maxDate=e(a.maxDate,this.locale.format)),"object"==typeof a.startDate&&(this.startDate=e(a.startDate)),"object"==typeof a.endDate&&(this.endDate=e(a.endDate)),"object"==typeof a.minDate&&(this.minDate=e(a.minDate)),"object"==typeof a.maxDate&&(this.maxDate=e(a.maxDate)),this.minDate&&this.startDate.isBefore(this.minDate)&&(this.startDate=this.minDate.clone()),this.maxDate&&this.endDate.isAfter(this.maxDate)&&(this.endDate=this.maxDate.clone()),"string"==typeof a.applyButtonClasses&&(this.applyButtonClasses=a.applyButtonClasses),"string"==typeof a.applyClass&&(this.applyButtonClasses=a.applyClass),"string"==typeof a.cancelButtonClasses&&(this.cancelButtonClasses=a.cancelButtonClasses),"string"==typeof a.cancelClass&&(this.cancelButtonClasses=a.cancelClass),"object"==typeof a.maxSpan&&(this.maxSpan=a.maxSpan),"object"==typeof a.dateLimit&&(this.maxSpan=a.dateLimit),"string"==typeof a.opens&&(this.opens=a.opens),"string"==typeof a.drops&&(this.drops=a.drops),"boolean"==typeof a.showWeekNumbers&&(this.showWeekNumbers=a.showWeekNumbers),"boolean"==typeof a.showISOWeekNumbers&&(this.showISOWeekNumbers=a.showISOWeekNumbers),"string"==typeof a.buttonClasses&&(this.buttonClasses=a.buttonClasses),"object"==typeof a.buttonClasses&&(this.buttonClasses=a.buttonClasses.join(" ")),"boolean"==typeof a.showDropdowns&&(this.showDropdowns=a.showDropdowns),"number"==typeof a.minYear&&(this.minYear=a.minYear),"number"==typeof a.maxYear&&(this.maxYear=a.maxYear),"boolean"==typeof a.showCustomRangeLabel&&(this.showCustomRangeLabel=a.showCustomRangeLabel),"boolean"==typeof a.singleDatePicker&&(this.singleDatePicker=a.singleDatePicker,this.singleDatePicker&&(this.endDate=this.startDate.clone())),"boolean"==typeof a.timePicker&&(this.timePicker=a.timePicker),"boolean"==typeof a.timePickerSeconds&&(this.timePickerSeconds=a.timePickerSeconds),"number"==typeof a.timePickerIncrement&&(this.timePickerIncrement=a.timePickerIncrement),"boolean"==typeof a.timePicker24Hour&&(this.timePicker24Hour=a.timePicker24Hour),"boolean"==typeof a.autoApply&&(this.autoApply=a.autoApply),"boolean"==typeof a.autoUpdateInput&&(this.autoUpdateInput=a.autoUpdateInput),"boolean"==typeof a.linkedCalendars&&(this.linkedCalendars=a.linkedCalendars),"function"==typeof a.isInvalidDate&&(this.isInvalidDate=a.isInvalidDate),"function"==typeof a.isCustomDate&&(this.isCustomDate=a.isCustomDate),"boolean"==typeof a.alwaysShowCalendars&&(this.alwaysShowCalendars=a.alwaysShowCalendars),0!=this.locale.firstDay)for(var s=this.locale.firstDay;s>0;)this.locale.daysOfWeek.push(this.locale.daysOfWeek.shift()),s--;var o,d,l;if(void 0===a.startDate&&void 0===a.endDate&&t(this.element).is(":text")){var u=t(this.element).val(),c=u.split(this.locale.separator);o=d=null,2==c.length?(o=e(c[0],this.locale.format),d=e(c[1],this.locale.format)):this.singleDatePicker&&""!==u&&(o=e(u,this.locale.format),d=e(u,this.locale.format)),null!==o&&null!==d&&(this.setStartDate(o),this.setEndDate(d))}if("object"==typeof a.ranges){for(l in a.ranges){o="string"==typeof a.ranges[l][0]?e(a.ranges[l][0],this.locale.format):e(a.ranges[l][0]),d="string"==typeof a.ranges[l][1]?e(a.ranges[l][1],this.locale.format):e(a.ranges[l][1]),this.minDate&&o.isBefore(this.minDate)&&(o=this.minDate.clone());var h,m=this.maxDate;if(this.maxSpan&&m&&o.clone().add(this.maxSpan).isAfter(m)&&(m=o.clone().add(this.maxSpan)),m&&d.isAfter(m)&&(d=m.clone()),!(this.minDate&&d.isBefore(this.minDate,this.timepicker?"minute":"day")||m&&o.isAfter(m,this.timepicker?"minute":"day")))(h=document.createElement("textarea")).innerHTML=l,r=h.value,this.ranges[r]=[o,d]}var _="<ul>";for(l in this.ranges)_+='<li data-range-key="'+l+'">'+l+"</li>";this.showCustomRangeLabel&&(_+='<li data-range-key="'+this.locale.customRangeLabel+'">'+this.locale.customRangeLabel+"</li>"),_+="</ul>",this.container.find(".ranges").prepend(_)}"function"==typeof i&&(this.callback=i),this.timePicker||(this.startDate=this.startDate.startOf("day"),this.endDate=this.endDate.endOf("day"),this.container.find(".calendar-time").hide()),this.timePicker&&this.autoApply&&(this.autoApply=!1),this.autoApply&&this.container.addClass("auto-apply"),"object"==typeof a.ranges&&this.container.addClass("show-ranges"),this.singleDatePicker&&(this.container.addClass("single"),this.container.find(".drp-calendar.left").addClass("single"),this.container.find(".drp-calendar.left").show(),this.container.find(".drp-calendar.right").hide(),!this.timePicker&&this.autoApply&&this.container.addClass("auto-apply")),(void 0===a.ranges&&!this.singleDatePicker||this.alwaysShowCalendars)&&this.container.addClass("show-calendar"),this.container.addClass("opens"+this.opens),this.container.find(".applyBtn, .cancelBtn").addClass(this.buttonClasses),this.applyButtonClasses.length&&this.container.find(".applyBtn").addClass(this.applyButtonClasses),this.cancelButtonClasses.length&&this.container.find(".cancelBtn").addClass(this.cancelButtonClasses),this.container.find(".applyBtn").html(this.locale.applyLabel),this.container.find(".cancelBtn").html(this.locale.cancelLabel),this.container.find(".drp-calendar").on("click.daterangepicker",".prev",t.proxy(this.clickPrev,this)).on("click.daterangepicker",".next",t.proxy(this.clickNext,this)).on("mousedown.daterangepicker","td.available",t.proxy(this.clickDate,this)).on("mouseenter.daterangepicker","td.available",t.proxy(this.hoverDate,this)).on("change.daterangepicker","select.yearselect",t.proxy(this.monthOrYearChanged,this)).on("change.daterangepicker","select.monthselect",t.proxy(this.monthOrYearChanged,this)).on("change.daterangepicker","select.hourselect,select.minuteselect,select.secondselect,select.ampmselect",t.proxy(this.timeChanged,this)),this.container.find(".ranges").on("click.daterangepicker","li",t.proxy(this.clickRange,this)),this.container.find(".drp-buttons").on("click.daterangepicker","button.applyBtn",t.proxy(this.clickApply,this)).on("click.daterangepicker","button.cancelBtn",t.proxy(this.clickCancel,this)),this.element.is("input")||this.element.is("button")?this.element.on({"click.daterangepicker":t.proxy(this.show,this),"focus.daterangepicker":t.proxy(this.show,this),"keyup.daterangepicker":t.proxy(this.elementChanged,this),"keydown.daterangepicker":t.proxy(this.keydown,this)}):(this.element.on("click.daterangepicker",t.proxy(this.toggle,this)),this.element.on("keydown.daterangepicker",t.proxy(this.toggle,this))),this.updateElement()};return n.prototype={constructor:n,setStartDate:function(t){"string"==typeof t&&(this.startDate=e(t,this.locale.format)),"object"==typeof t&&(this.startDate=e(t)),this.timePicker||(this.startDate=this.startDate.startOf("day")),this.timePicker&&this.timePickerIncrement&&this.startDate.minute(Math.round(this.startDate.minute()/this.timePickerIncrement)*this.timePickerIncrement),this.minDate&&this.startDate.isBefore(this.minDate)&&(this.startDate=this.minDate.clone(),this.timePicker&&this.timePickerIncrement&&this.startDate.minute(Math.round(this.startDate.minute()/this.timePickerIncrement)*this.timePickerIncrement)),this.maxDate&&this.startDate.isAfter(this.maxDate)&&(this.startDate=this.maxDate.clone(),this.timePicker&&this.timePickerIncrement&&this.startDate.minute(Math.floor(this.startDate.minute()/this.timePickerIncrement)*this.timePickerIncrement)),this.isShowing||this.updateElement(),this.updateMonthsInView()},setEndDate:function(t){"string"==typeof t&&(this.endDate=e(t,this.locale.format)),"object"==typeof t&&(this.endDate=e(t)),this.timePicker||(this.endDate=this.endDate.endOf("day")),this.timePicker&&this.timePickerIncrement&&this.endDate.minute(Math.round(this.endDate.minute()/this.timePickerIncrement)*this.timePickerIncrement),this.endDate.isBefore(this.startDate)&&(this.endDate=this.startDate.clone()),this.maxDate&&this.endDate.isAfter(this.maxDate)&&(this.endDate=this.maxDate.clone()),this.maxSpan&&this.startDate.clone().add(this.maxSpan).isBefore(this.endDate)&&(this.endDate=this.startDate.clone().add(this.maxSpan)),this.previousRightTime=this.endDate.clone(),this.container.find(".drp-selected").html(this.startDate.format(this.locale.format)+this.locale.separator+this.endDate.format(this.locale.format)),this.isShowing||this.updateElement(),this.updateMonthsInView()},isInvalidDate:function(){return!1},isCustomDate:function(){return!1},updateView:function(){this.timePicker&&(this.renderTimePicker("left"),this.renderTimePicker("right"),this.endDate?this.container.find(".right .calendar-time select").prop("disabled",!1).removeClass("disabled"):this.container.find(".right .calendar-time select").prop("disabled",!0).addClass("disabled")),this.endDate&&this.container.find(".drp-selected").html(this.startDate.format(this.locale.format)+this.locale.separator+this.endDate.format(this.locale.format)),this.updateMonthsInView(),this.updateCalendars(),this.updateFormInputs()},updateMonthsInView:function(){if(this.endDate){if(!this.singleDatePicker&&this.leftCalendar.month&&this.rightCalendar.month&&(this.startDate.format("YYYY-MM")==this.leftCalendar.month.format("YYYY-MM")||this.startDate.format("YYYY-MM")==this.rightCalendar.month.format("YYYY-MM"))&&(this.endDate.format("YYYY-MM")==this.leftCalendar.month.format("YYYY-MM")||this.endDate.format("YYYY-MM")==this.rightCalendar.month.format("YYYY-MM")))return;this.leftCalendar.month=this.startDate.clone().date(2),this.linkedCalendars||this.endDate.month()==this.startDate.month()&&this.endDate.year()==this.startDate.year()?this.rightCalendar.month=this.startDate.clone().date(2).add(1,"month"):this.rightCalendar.month=this.endDate.clone().date(2)}else this.leftCalendar.month.format("YYYY-MM")!=this.startDate.format("YYYY-MM")&&this.rightCalendar.month.format("YYYY-MM")!=this.startDate.format("YYYY-MM")&&(this.leftCalendar.month=this.startDate.clone().date(2),this.rightCalendar.month=this.startDate.clone().date(2).add(1,"month"));this.maxDate&&this.linkedCalendars&&!this.singleDatePicker&&this.rightCalendar.month>this.maxDate&&(this.rightCalendar.month=this.maxDate.clone().date(2),this.leftCalendar.month=this.maxDate.clone().date(2).subtract(1,"month"))},updateCalendars:function(){var e,t,n,a;this.timePicker&&(this.endDate?(e=parseInt(this.container.find(".left .hourselect").val(),10),t=parseInt(this.container.find(".left .minuteselect").val(),10),isNaN(t)&&(t=parseInt(this.container.find(".left .minuteselect option:last").val(),10)),n=this.timePickerSeconds?parseInt(this.container.find(".left .secondselect").val(),10):0,this.timePicker24Hour||("PM"===(a=this.container.find(".left .ampmselect").val())&&e<12&&(e+=12),"AM"===a&&12===e&&(e=0))):(e=parseInt(this.container.find(".right .hourselect").val(),10),t=parseInt(this.container.find(".right .minuteselect").val(),10),isNaN(t)&&(t=parseInt(this.container.find(".right .minuteselect option:last").val(),10)),n=this.timePickerSeconds?parseInt(this.container.find(".right .secondselect").val(),10):0,this.timePicker24Hour||("PM"===(a=this.container.find(".right .ampmselect").val())&&e<12&&(e+=12),"AM"===a&&12===e&&(e=0))),this.leftCalendar.month.hour(e).minute(t).second(n),this.rightCalendar.month.hour(e).minute(t).second(n));this.renderCalendar("left"),this.renderCalendar("right"),this.container.find(".ranges li").removeClass("active"),null!=this.endDate&&this.calculateChosenLabel()},renderCalendar:function(n){var a,i=(a="left"==n?this.leftCalendar:this.rightCalendar).month.month(),r=a.month.year(),s=a.month.hour(),o=a.month.minute(),d=a.month.second(),l=e([r,i]).daysInMonth(),u=e([r,i,1]),c=e([r,i,l]),h=e(u).subtract(1,"month").month(),m=e(u).subtract(1,"month").year(),_=e([m,h]).daysInMonth(),f=u.day();(a=[]).firstDay=u,a.lastDay=c;for(var p=0;p<6;p++)a[p]=[];var g=_-f+this.locale.firstDay+1;g>_&&(g-=7),f==this.locale.firstDay&&(g=_-6);for(var y=e([m,h,g,12,o,d]),M=(p=0,0),v=0;p<42;p++,M++,y=e(y).add(24,"hour"))p>0&&M%7==0&&(M=0,v++),a[v][M]=y.clone().hour(s).minute(o).second(d),y.hour(12),this.minDate&&a[v][M].format("YYYY-MM-DD")==this.minDate.format("YYYY-MM-DD")&&a[v][M].isBefore(this.minDate)&&"left"==n&&(a[v][M]=this.minDate.clone()),this.maxDate&&a[v][M].format("YYYY-MM-DD")==this.maxDate.format("YYYY-MM-DD")&&a[v][M].isAfter(this.maxDate)&&"right"==n&&(a[v][M]=this.maxDate.clone());"left"==n?this.leftCalendar.calendar=a:this.rightCalendar.calendar=a;var L="left"==n?this.minDate:this.startDate,b=this.maxDate,k=("left"==n?this.startDate:this.endDate,this.locale.direction,'<table class="table-condensed">');k+="<thead>",k+="<tr>",(this.showWeekNumbers||this.showISOWeekNumbers)&&(k+="<th></th>"),L&&!L.isBefore(a.firstDay)||this.linkedCalendars&&"left"!=n?k+="<th></th>":k+='<th class="prev available"><span></span></th>';var Y=this.locale.monthNames[a[1][1].month()]+a[1][1].format(" YYYY");if(this.showDropdowns){for(var D=a[1][1].month(),w=a[1][1].year(),x=b&&b.year()||this.maxYear,T=L&&L.year()||this.minYear,S=w==T,H=w==x,j='<select class="monthselect">',P=0;P<12;P++)(!S||L&&P>=L.month())&&(!H||b&&P<=b.month())?j+="<option value='"+P+"'"+(P===D?" selected='selected'":"")+">"+this.locale.monthNames[P]+"</option>":j+="<option value='"+P+"'"+(P===D?" selected='selected'":"")+" disabled='disabled'>"+this.locale.monthNames[P]+"</option>";j+="</select>";for(var C='<select class="yearselect">',A=T;A<=x;A++)C+='<option value="'+A+'"'+(A===w?' selected="selected"':"")+">"+A+"</option>";Y=j+(C+="</select>")}if(k+='<th colspan="5" class="month">'+Y+"</th>",b&&!b.isAfter(a.lastDay)||this.linkedCalendars&&"right"!=n&&!this.singleDatePicker?k+="<th></th>":k+='<th class="next available"><span></span></th>',k+="</tr>",k+="<tr>",(this.showWeekNumbers||this.showISOWeekNumbers)&&(k+='<th class="week">'+this.locale.weekLabel+"</th>"),t.each(this.locale.daysOfWeek,(function(e,t){k+="<th>"+t+"</th>"})),k+="</tr>",k+="</thead>",k+="<tbody>",null==this.endDate&&this.maxSpan){var O=this.startDate.clone().add(this.maxSpan).endOf("day");b&&!O.isBefore(b)||(b=O)}for(v=0;v<6;v++){for(k+="<tr>",this.showWeekNumbers?k+='<td class="week">'+a[v][0].week()+"</td>":this.showISOWeekNumbers&&(k+='<td class="week">'+a[v][0].isoWeek()+"</td>"),M=0;M<7;M++){var E=[];a[v][M].isSame(new Date,"day")&&E.push("today"),a[v][M].isoWeekday()>5&&E.push("weekend"),a[v][M].month()!=a[1][1].month()&&E.push("off","ends"),this.minDate&&a[v][M].isBefore(this.minDate,"day")&&E.push("off","disabled"),b&&a[v][M].isAfter(b,"day")&&E.push("off","disabled"),this.isInvalidDate(a[v][M])&&E.push("off","disabled"),a[v][M].format("YYYY-MM-DD")==this.startDate.format("YYYY-MM-DD")&&E.push("active","start-date"),null!=this.endDate&&a[v][M].format("YYYY-MM-DD")==this.endDate.format("YYYY-MM-DD")&&E.push("active","end-date"),null!=this.endDate&&a[v][M]>this.startDate&&a[v][M]<this.endDate&&E.push("in-range");var W=this.isCustomDate(a[v][M]);!1!==W&&("string"==typeof W?E.push(W):Array.prototype.push.apply(E,W));var F="",N=!1;for(p=0;p<E.length;p++)F+=E[p]+" ","disabled"==E[p]&&(N=!0);N||(F+="available"),k+='<td class="'+F.replace(/^\s+|\s+$/g,"")+'" data-title="r'+v+"c"+M+'">'+a[v][M].date()+"</td>"}k+="</tr>"}k+="</tbody>",k+="</table>",this.container.find(".drp-calendar."+n+" .calendar-table").html(k)},renderTimePicker:function(e){if("right"!=e||this.endDate){var t,n,a,i=this.maxDate;if(!this.maxSpan||this.maxDate&&!this.startDate.clone().add(this.maxSpan).isBefore(this.maxDate)||(i=this.startDate.clone().add(this.maxSpan)),"left"==e)n=this.startDate.clone(),a=this.minDate;else if("right"==e){n=this.endDate.clone(),a=this.startDate;var r=this.container.find(".drp-calendar.right .calendar-time");if(""!=r.html()&&(n.hour(isNaN(n.hour())?r.find(".hourselect option:selected").val():n.hour()),n.minute(isNaN(n.minute())?r.find(".minuteselect option:selected").val():n.minute()),n.second(isNaN(n.second())?r.find(".secondselect option:selected").val():n.second()),!this.timePicker24Hour)){var s=r.find(".ampmselect option:selected").val();"PM"===s&&n.hour()<12&&n.hour(n.hour()+12),"AM"===s&&12===n.hour()&&n.hour(0)}n.isBefore(this.startDate)&&(n=this.startDate.clone()),i&&n.isAfter(i)&&(n=i.clone())}t='<select class="hourselect">';for(var o=this.timePicker24Hour?0:1,d=this.timePicker24Hour?23:12,l=o;l<=d;l++){var u=l;this.timePicker24Hour||(u=n.hour()>=12?12==l?12:l+12:12==l?0:l);var c=n.clone().hour(u),h=!1;a&&c.minute(59).isBefore(a)&&(h=!0),i&&c.minute(0).isAfter(i)&&(h=!0),u!=n.hour()||h?t+=h?'<option value="'+l+'" disabled="disabled" class="disabled">'+l+"</option>":'<option value="'+l+'">'+l+"</option>":t+='<option value="'+l+'" selected="selected">'+l+"</option>"}for(t+="</select> ",t+=': <select class="minuteselect">',l=0;l<60;l+=this.timePickerIncrement){var m=l<10?"0"+l:l;c=n.clone().minute(l),h=!1,a&&c.second(59).isBefore(a)&&(h=!0),i&&c.second(0).isAfter(i)&&(h=!0),n.minute()!=l||h?t+=h?'<option value="'+l+'" disabled="disabled" class="disabled">'+m+"</option>":'<option value="'+l+'">'+m+"</option>":t+='<option value="'+l+'" selected="selected">'+m+"</option>"}if(t+="</select> ",this.timePickerSeconds){for(t+=': <select class="secondselect">',l=0;l<60;l++)m=l<10?"0"+l:l,c=n.clone().second(l),h=!1,a&&c.isBefore(a)&&(h=!0),i&&c.isAfter(i)&&(h=!0),n.second()!=l||h?t+=h?'<option value="'+l+'" disabled="disabled" class="disabled">'+m+"</option>":'<option value="'+l+'">'+m+"</option>":t+='<option value="'+l+'" selected="selected">'+m+"</option>";t+="</select> "}if(!this.timePicker24Hour){t+='<select class="ampmselect">';var _="",f="";a&&n.clone().hour(12).minute(0).second(0).isBefore(a)&&(_=' disabled="disabled" class="disabled"'),i&&n.clone().hour(0).minute(0).second(0).isAfter(i)&&(f=' disabled="disabled" class="disabled"'),n.hour()>=12?t+='<option value="AM"'+_+'>AM</option><option value="PM" selected="selected"'+f+">PM</option>":t+='<option value="AM" selected="selected"'+_+'>AM</option><option value="PM"'+f+">PM</option>",t+="</select>"}this.container.find(".drp-calendar."+e+" .calendar-time").html(t)}},updateFormInputs:function(){this.singleDatePicker||this.endDate&&(this.startDate.isBefore(this.endDate)||this.startDate.isSame(this.endDate))?this.container.find("button.applyBtn").prop("disabled",!1):this.container.find("button.applyBtn").prop("disabled",!0)},move:function(){var e,n={top:0,left:0},a=this.drops,i=t(window).width();switch(this.parentEl.is("body")||(n={top:this.parentEl.offset().top-this.parentEl.scrollTop(),left:this.parentEl.offset().left-this.parentEl.scrollLeft()},i=this.parentEl[0].clientWidth+this.parentEl.offset().left),a){case"auto":(e=this.element.offset().top+this.element.outerHeight()-n.top)+this.container.outerHeight()>=this.parentEl[0].scrollHeight&&(e=this.element.offset().top-this.container.outerHeight()-n.top,a="up");break;case"up":e=this.element.offset().top-this.container.outerHeight()-n.top;break;default:e=this.element.offset().top+this.element.outerHeight()-n.top}this.container.css({top:0,left:0,right:"auto"});var r=this.container.outerWidth();if(this.container.toggleClass("drop-up","up"==a),"left"==this.opens){var s=i-this.element.offset().left-this.element.outerWidth();r+s>t(window).width()?this.container.css({top:e,right:"auto",left:9}):this.container.css({top:e,right:s,left:"auto"})}else if("center"==this.opens)(o=this.element.offset().left-n.left+this.element.outerWidth()/2-r/2)<0?this.container.css({top:e,right:"auto",left:9}):o+r>t(window).width()?this.container.css({top:e,left:"auto",right:0}):this.container.css({top:e,left:o,right:"auto"});else{var o;(o=this.element.offset().left-n.left)+r>t(window).width()?this.container.css({top:e,left:"auto",right:0}):this.container.css({top:e,left:o,right:"auto"})}},show:function(e){this.isShowing||(this._outsideClickProxy=t.proxy((function(e){this.outsideClick(e)}),this),t(document).on("mousedown.daterangepicker",this._outsideClickProxy).on("touchend.daterangepicker",this._outsideClickProxy).on("click.daterangepicker","[data-toggle=dropdown]",this._outsideClickProxy).on("focusin.daterangepicker",this._outsideClickProxy),t(window).on("resize.daterangepicker",t.proxy((function(e){this.move(e)}),this)),this.oldStartDate=this.startDate.clone(),this.oldEndDate=this.endDate.clone(),this.previousRightTime=this.endDate.clone(),this.updateView(),this.container.show(),this.move(),this.element.trigger("show.daterangepicker",this),this.isShowing=!0)},hide:function(e){this.isShowing&&(this.endDate||(this.startDate=this.oldStartDate.clone(),this.endDate=this.oldEndDate.clone()),this.startDate.isSame(this.oldStartDate)&&this.endDate.isSame(this.oldEndDate)||this.callback(this.startDate.clone(),this.endDate.clone(),this.chosenLabel),this.updateElement(),t(document).off(".daterangepicker"),t(window).off(".daterangepicker"),this.container.hide(),this.element.trigger("hide.daterangepicker",this),this.isShowing=!1)},toggle:function(e){this.isShowing?this.hide():this.show()},outsideClick:function(e){var n=t(e.target);"focusin"==e.type||n.closest(this.element).length||n.closest(this.container).length||n.closest(".calendar-table").length||(this.hide(),this.element.trigger("outsideClick.daterangepicker",this))},showCalendars:function(){this.container.addClass("show-calendar"),this.move(),this.element.trigger("showCalendar.daterangepicker",this)},hideCalendars:function(){this.container.removeClass("show-calendar"),this.element.trigger("hideCalendar.daterangepicker",this)},clickRange:function(e){var t=e.target.getAttribute("data-range-key");if(this.chosenLabel=t,t==this.locale.customRangeLabel)this.showCalendars();else{var n=this.ranges[t];this.startDate=n[0],this.endDate=n[1],this.timePicker||(this.startDate.startOf("day"),this.endDate.endOf("day")),this.alwaysShowCalendars||this.hideCalendars(),this.clickApply()}},clickPrev:function(e){t(e.target).parents(".drp-calendar").hasClass("left")?(this.leftCalendar.month.subtract(1,"month"),this.linkedCalendars&&this.rightCalendar.month.subtract(1,"month")):this.rightCalendar.month.subtract(1,"month"),this.updateCalendars()},clickNext:function(e){t(e.target).parents(".drp-calendar").hasClass("left")?this.leftCalendar.month.add(1,"month"):(this.rightCalendar.month.add(1,"month"),this.linkedCalendars&&this.leftCalendar.month.add(1,"month")),this.updateCalendars()},hoverDate:function(e){if(t(e.target).hasClass("available")){var n=t(e.target).attr("data-title"),a=n.substr(1,1),i=n.substr(3,1),r=t(e.target).parents(".drp-calendar").hasClass("left")?this.leftCalendar.calendar[a][i]:this.rightCalendar.calendar[a][i],s=this.leftCalendar,o=this.rightCalendar,d=this.startDate;this.endDate||this.container.find(".drp-calendar tbody td").each((function(e,n){if(!t(n).hasClass("week")){var a=t(n).attr("data-title"),i=a.substr(1,1),l=a.substr(3,1),u=t(n).parents(".drp-calendar").hasClass("left")?s.calendar[i][l]:o.calendar[i][l];u.isAfter(d)&&u.isBefore(r)||u.isSame(r,"day")?t(n).addClass("in-range"):t(n).removeClass("in-range")}}))}},clickDate:function(e){if(t(e.target).hasClass("available")){var n=t(e.target).attr("data-title"),a=n.substr(1,1),i=n.substr(3,1),r=t(e.target).parents(".drp-calendar").hasClass("left")?this.leftCalendar.calendar[a][i]:this.rightCalendar.calendar[a][i];if(this.endDate||r.isBefore(this.startDate,"day")){if(this.timePicker){var s=parseInt(this.container.find(".left .hourselect").val(),10);this.timePicker24Hour||("PM"===(l=this.container.find(".left .ampmselect").val())&&s<12&&(s+=12),"AM"===l&&12===s&&(s=0));var o=parseInt(this.container.find(".left .minuteselect").val(),10);isNaN(o)&&(o=parseInt(this.container.find(".left .minuteselect option:last").val(),10));var d=this.timePickerSeconds?parseInt(this.container.find(".left .secondselect").val(),10):0;r=r.clone().hour(s).minute(o).second(d)}this.endDate=null,this.setStartDate(r.clone())}else if(!this.endDate&&r.isBefore(this.startDate))this.setEndDate(this.startDate.clone());else{var l;if(this.timePicker)s=parseInt(this.container.find(".right .hourselect").val(),10),this.timePicker24Hour||("PM"===(l=this.container.find(".right .ampmselect").val())&&s<12&&(s+=12),"AM"===l&&12===s&&(s=0)),o=parseInt(this.container.find(".right .minuteselect").val(),10),isNaN(o)&&(o=parseInt(this.container.find(".right .minuteselect option:last").val(),10)),d=this.timePickerSeconds?parseInt(this.container.find(".right .secondselect").val(),10):0,r=r.clone().hour(s).minute(o).second(d);this.setEndDate(r.clone()),this.autoApply&&(this.calculateChosenLabel(),this.clickApply())}this.singleDatePicker&&(this.setEndDate(this.startDate),!this.timePicker&&this.autoApply&&this.clickApply()),this.updateView(),e.stopPropagation()}},calculateChosenLabel:function(){var e=!0,t=0;for(var n in this.ranges){if(this.timePicker){var a=this.timePickerSeconds?"YYYY-MM-DD HH:mm:ss":"YYYY-MM-DD HH:mm";if(this.startDate.format(a)==this.ranges[n][0].format(a)&&this.endDate.format(a)==this.ranges[n][1].format(a)){e=!1,this.chosenLabel=this.container.find(".ranges li:eq("+t+")").addClass("active").attr("data-range-key");break}}else if(this.startDate.format("YYYY-MM-DD")==this.ranges[n][0].format("YYYY-MM-DD")&&this.endDate.format("YYYY-MM-DD")==this.ranges[n][1].format("YYYY-MM-DD")){e=!1,this.chosenLabel=this.container.find(".ranges li:eq("+t+")").addClass("active").attr("data-range-key");break}t++}e&&(this.showCustomRangeLabel?this.chosenLabel=this.container.find(".ranges li:last").addClass("active").attr("data-range-key"):this.chosenLabel=null,this.showCalendars())},clickApply:function(e){this.hide(),this.element.trigger("apply.daterangepicker",this)},clickCancel:function(e){this.startDate=this.oldStartDate,this.endDate=this.oldEndDate,this.hide(),this.element.trigger("cancel.daterangepicker",this)},monthOrYearChanged:function(e){var n=t(e.target).closest(".drp-calendar").hasClass("left"),a=n?"left":"right",i=this.container.find(".drp-calendar."+a),r=parseInt(i.find(".monthselect").val(),10),s=i.find(".yearselect").val();n||(s<this.startDate.year()||s==this.startDate.year()&&r<this.startDate.month())&&(r=this.startDate.month(),s=this.startDate.year()),this.minDate&&(s<this.minDate.year()||s==this.minDate.year()&&r<this.minDate.month())&&(r=this.minDate.month(),s=this.minDate.year()),this.maxDate&&(s>this.maxDate.year()||s==this.maxDate.year()&&r>this.maxDate.month())&&(r=this.maxDate.month(),s=this.maxDate.year()),n?(this.leftCalendar.month.month(r).year(s),this.linkedCalendars&&(this.rightCalendar.month=this.leftCalendar.month.clone().add(1,"month"))):(this.rightCalendar.month.month(r).year(s),this.linkedCalendars&&(this.leftCalendar.month=this.rightCalendar.month.clone().subtract(1,"month"))),this.updateCalendars()},timeChanged:function(e){var n=t(e.target).closest(".drp-calendar"),a=n.hasClass("left"),i=parseInt(n.find(".hourselect").val(),10),r=parseInt(n.find(".minuteselect").val(),10);isNaN(r)&&(r=parseInt(n.find(".minuteselect option:last").val(),10));var s=this.timePickerSeconds?parseInt(n.find(".secondselect").val(),10):0;if(!this.timePicker24Hour){var o=n.find(".ampmselect").val();"PM"===o&&i<12&&(i+=12),"AM"===o&&12===i&&(i=0)}if(a){var d=this.startDate.clone();d.hour(i),d.minute(r),d.second(s),this.setStartDate(d),this.singleDatePicker?this.endDate=this.startDate.clone():this.endDate&&this.endDate.format("YYYY-MM-DD")==d.format("YYYY-MM-DD")&&this.endDate.isBefore(d)&&this.setEndDate(d.clone())}else if(this.endDate){var l=this.endDate.clone();l.hour(i),l.minute(r),l.second(s),this.setEndDate(l)}this.updateCalendars(),this.updateFormInputs(),this.renderTimePicker("left"),this.renderTimePicker("right")},elementChanged:function(){if(this.element.is("input")&&this.element.val().length){var t=this.element.val().split(this.locale.separator),n=null,a=null;2===t.length&&(n=e(t[0],this.locale.format),a=e(t[1],this.locale.format)),(this.singleDatePicker||null===n||null===a)&&(a=n=e(this.element.val(),this.locale.format)),n.isValid()&&a.isValid()&&(this.setStartDate(n),this.setEndDate(a),this.updateView())}},keydown:function(e){9!==e.keyCode&&13!==e.keyCode||this.hide(),27===e.keyCode&&(e.preventDefault(),e.stopPropagation(),this.hide())},updateElement:function(){if(this.element.is("input")&&this.autoUpdateInput){var e=this.startDate.format(this.locale.format);this.singleDatePicker||(e+=this.locale.separator+this.endDate.format(this.locale.format)),e!==this.element.val()&&this.element.val(e).trigger("change")}},remove:function(){this.container.remove(),this.element.off(".daterangepicker"),this.element.removeData()}},t.fn.daterangepicker=function(e,a){var i=t.extend(!0,{},t.fn.daterangepicker.defaultOptions,e);return this.each((function(){var e=t(this);e.data("daterangepicker")&&e.data("daterangepicker").remove(),e.data("daterangepicker",new n(e,i,a))})),this},n}(e,t)}.apply(t,a))||(e.exports=i)},function(e,t,n){var a;
/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,i){"use strict";var r=[],s=Object.getPrototypeOf,o=r.slice,d=r.flat?function(e){return r.flat.call(e)}:function(e){return r.concat.apply([],e)},l=r.push,u=r.indexOf,c={},h=c.toString,m=c.hasOwnProperty,_=m.toString,f=_.call(Object),p={},g=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},y=function(e){return null!=e&&e===e.window},M=n.document,v={type:!0,src:!0,nonce:!0,noModule:!0};function L(e,t,n){var a,i,r=(n=n||M).createElement("script");if(r.text=e,t)for(a in v)(i=t[a]||t.getAttribute&&t.getAttribute(a))&&r.setAttribute(a,i);n.head.appendChild(r).parentNode.removeChild(r)}function b(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?c[h.call(e)]||"object":typeof e}var k=function(e,t){return new k.fn.init(e,t)};function Y(e){var t=!!e&&"length"in e&&e.length,n=b(e);return!g(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}k.fn=k.prototype={jquery:"3.5.1",constructor:k,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=k.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return k.each(this,e)},map:function(e){return this.pushStack(k.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(k.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(k.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:r.sort,splice:r.splice},k.extend=k.fn.extend=function(){var e,t,n,a,i,r,s=arguments[0]||{},o=1,d=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[o]||{},o++),"object"==typeof s||g(s)||(s={}),o===d&&(s=this,o--);o<d;o++)if(null!=(e=arguments[o]))for(t in e)a=e[t],"__proto__"!==t&&s!==a&&(l&&a&&(k.isPlainObject(a)||(i=Array.isArray(a)))?(n=s[t],r=i&&!Array.isArray(n)?[]:i||k.isPlainObject(n)?n:{},i=!1,s[t]=k.extend(l,r,a)):void 0!==a&&(s[t]=a));return s},k.extend({expando:"jQuery"+("3.5.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==h.call(e))&&(!(t=s(e))||"function"==typeof(n=m.call(t,"constructor")&&t.constructor)&&_.call(n)===f)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){L(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,a=0;if(Y(e))for(n=e.length;a<n&&!1!==t.call(e[a],a,e[a]);a++);else for(a in e)if(!1===t.call(e[a],a,e[a]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(Y(Object(e))?k.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,a=0,i=e.length;a<n;a++)e[i++]=t[a];return e.length=i,e},grep:function(e,t,n){for(var a=[],i=0,r=e.length,s=!n;i<r;i++)!t(e[i],i)!==s&&a.push(e[i]);return a},map:function(e,t,n){var a,i,r=0,s=[];if(Y(e))for(a=e.length;r<a;r++)null!=(i=t(e[r],r,n))&&s.push(i);else for(r in e)null!=(i=t(e[r],r,n))&&s.push(i);return d(s)},guid:1,support:p}),"function"==typeof Symbol&&(k.fn[Symbol.iterator]=r[Symbol.iterator]),k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){c["[object "+t+"]"]=t.toLowerCase()}));var D=
/*!
   * Sizzle CSS Selector Engine v2.3.5
   * https://sizzlejs.com/
   *
   * Copyright JS Foundation and other contributors
   * Released under the MIT license
   * https://js.foundation/
   *
   * Date: 2020-03-14
   */
function(e){var t,n,a,i,r,s,o,d,l,u,c,h,m,_,f,p,g,y,M,v="sizzle"+1*new Date,L=e.document,b=0,k=0,Y=de(),D=de(),w=de(),x=de(),T=function(e,t){return e===t&&(c=!0),0},S={}.hasOwnProperty,H=[],j=H.pop,P=H.push,C=H.push,A=H.slice,O=function(e,t){for(var n=0,a=e.length;n<a;n++)if(e[n]===t)return n;return-1},E="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",W="[\\x20\\t\\r\\n\\f]",F="(?:\\\\[\\da-fA-F]{1,6}"+W+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",N="\\["+W+"*("+F+")(?:"+W+"*([*^$|!~]?=)"+W+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+F+"))|)"+W+"*\\]",I=":("+F+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+N+")*)|.*)\\)|)",R=new RegExp(W+"+","g"),z=new RegExp("^"+W+"+|((?:^|[^\\\\])(?:\\\\.)*)"+W+"+$","g"),B=new RegExp("^"+W+"*,"+W+"*"),V=new RegExp("^"+W+"*([>+~]|"+W+")"+W+"*"),q=new RegExp(W+"|>"),J=new RegExp(I),U=new RegExp("^"+F+"$"),$={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),TAG:new RegExp("^("+F+"|[*])"),ATTR:new RegExp("^"+N),PSEUDO:new RegExp("^"+I),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+W+"*(even|odd|(([+-]|)(\\d*)n|)"+W+"*(?:([+-]|)"+W+"*(\\d+)|))"+W+"*\\)|)","i"),bool:new RegExp("^(?:"+E+")$","i"),needsContext:new RegExp("^"+W+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+W+"*((?:-\\d)?\\d*)"+W+"*\\)|)(?=[^-]|$)","i")},G=/HTML$/i,K=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+W+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},ae=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=function(){h()},se=ve((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{C.apply(H=A.call(L.childNodes),L.childNodes),H[L.childNodes.length].nodeType}catch(e){C={apply:H.length?function(e,t){P.apply(e,A.call(t))}:function(e,t){for(var n=e.length,a=0;e[n++]=t[a++];);e.length=n-1}}}function oe(e,t,a,i){var r,o,l,u,c,_,g,y=t&&t.ownerDocument,L=t?t.nodeType:9;if(a=a||[],"string"!=typeof e||!e||1!==L&&9!==L&&11!==L)return a;if(!i&&(h(t),t=t||m,f)){if(11!==L&&(c=Q.exec(e)))if(r=c[1]){if(9===L){if(!(l=t.getElementById(r)))return a;if(l.id===r)return a.push(l),a}else if(y&&(l=y.getElementById(r))&&M(t,l)&&l.id===r)return a.push(l),a}else{if(c[2])return C.apply(a,t.getElementsByTagName(e)),a;if((r=c[3])&&n.getElementsByClassName&&t.getElementsByClassName)return C.apply(a,t.getElementsByClassName(r)),a}if(n.qsa&&!x[e+" "]&&(!p||!p.test(e))&&(1!==L||"object"!==t.nodeName.toLowerCase())){if(g=e,y=t,1===L&&(q.test(e)||V.test(e))){for((y=ee.test(e)&&ge(t.parentNode)||t)===t&&n.scope||((u=t.getAttribute("id"))?u=u.replace(ae,ie):t.setAttribute("id",u=v)),o=(_=s(e)).length;o--;)_[o]=(u?"#"+u:":scope")+" "+Me(_[o]);g=_.join(",")}try{return C.apply(a,y.querySelectorAll(g)),a}catch(t){x(e,!0)}finally{u===v&&t.removeAttribute("id")}}}return d(e.replace(z,"$1"),t,a,i)}function de(){var e=[];return function t(n,i){return e.push(n+" ")>a.cacheLength&&delete t[e.shift()],t[n+" "]=i}}function le(e){return e[v]=!0,e}function ue(e){var t=m.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var n=e.split("|"),i=n.length;i--;)a.attrHandle[n[i]]=t}function he(e,t){var n=t&&e,a=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(a)return a;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function me(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function _e(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function fe(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&se(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function pe(e){return le((function(t){return t=+t,le((function(n,a){for(var i,r=e([],n.length,t),s=r.length;s--;)n[i=r[s]]&&(n[i]=!(a[i]=n[i]))}))}))}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=oe.support={},r=oe.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!G.test(t||n&&n.nodeName||"HTML")},h=oe.setDocument=function(e){var t,i,s=e?e.ownerDocument||e:L;return s!=m&&9===s.nodeType&&s.documentElement?(_=(m=s).documentElement,f=!r(m),L!=m&&(i=m.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",re,!1):i.attachEvent&&i.attachEvent("onunload",re)),n.scope=ue((function(e){return _.appendChild(e).appendChild(m.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ue((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ue((function(e){return e.appendChild(m.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=Z.test(m.getElementsByClassName),n.getById=ue((function(e){return _.appendChild(e).id=v,!m.getElementsByName||!m.getElementsByName(v).length})),n.getById?(a.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},a.find.ID=function(e,t){if(void 0!==t.getElementById&&f){var n=t.getElementById(e);return n?[n]:[]}}):(a.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},a.find.ID=function(e,t){if(void 0!==t.getElementById&&f){var n,a,i,r=t.getElementById(e);if(r){if((n=r.getAttributeNode("id"))&&n.value===e)return[r];for(i=t.getElementsByName(e),a=0;r=i[a++];)if((n=r.getAttributeNode("id"))&&n.value===e)return[r]}return[]}}),a.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,a=[],i=0,r=t.getElementsByTagName(e);if("*"===e){for(;n=r[i++];)1===n.nodeType&&a.push(n);return a}return r},a.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&f)return t.getElementsByClassName(e)},g=[],p=[],(n.qsa=Z.test(m.querySelectorAll))&&(ue((function(e){var t;_.appendChild(e).innerHTML="<a id='"+v+"'></a><select id='"+v+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&p.push("[*^$]="+W+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||p.push("\\["+W+"*(?:value|"+E+")"),e.querySelectorAll("[id~="+v+"-]").length||p.push("~="),(t=m.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||p.push("\\["+W+"*name"+W+"*="+W+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||p.push(":checked"),e.querySelectorAll("a#"+v+"+*").length||p.push(".#.+[+~]"),e.querySelectorAll("\\\f"),p.push("[\\r\\n\\f]")})),ue((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=m.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&p.push("name"+W+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&p.push(":enabled",":disabled"),_.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&p.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),p.push(",.*:")}))),(n.matchesSelector=Z.test(y=_.matches||_.webkitMatchesSelector||_.mozMatchesSelector||_.oMatchesSelector||_.msMatchesSelector))&&ue((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),g.push("!=",I)})),p=p.length&&new RegExp(p.join("|")),g=g.length&&new RegExp(g.join("|")),t=Z.test(_.compareDocumentPosition),M=t||Z.test(_.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,a=t&&t.parentNode;return e===a||!(!a||1!==a.nodeType||!(n.contains?n.contains(a):e.compareDocumentPosition&&16&e.compareDocumentPosition(a)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},T=t?function(e,t){if(e===t)return c=!0,0;var a=!e.compareDocumentPosition-!t.compareDocumentPosition;return a||(1&(a=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===a?e==m||e.ownerDocument==L&&M(L,e)?-1:t==m||t.ownerDocument==L&&M(L,t)?1:u?O(u,e)-O(u,t):0:4&a?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,a=0,i=e.parentNode,r=t.parentNode,s=[e],o=[t];if(!i||!r)return e==m?-1:t==m?1:i?-1:r?1:u?O(u,e)-O(u,t):0;if(i===r)return he(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)o.unshift(n);for(;s[a]===o[a];)a++;return a?he(s[a],o[a]):s[a]==L?-1:o[a]==L?1:0},m):m},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if(h(e),n.matchesSelector&&f&&!x[t+" "]&&(!g||!g.test(t))&&(!p||!p.test(t)))try{var a=y.call(e,t);if(a||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return a}catch(e){x(t,!0)}return oe(t,m,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!=m&&h(e),M(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!=m&&h(e);var i=a.attrHandle[t.toLowerCase()],r=i&&S.call(a.attrHandle,t.toLowerCase())?i(e,t,!f):void 0;return void 0!==r?r:n.attributes||!f?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},oe.escape=function(e){return(e+"").replace(ae,ie)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,a=[],i=0,r=0;if(c=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(T),c){for(;t=e[r++];)t===e[r]&&(i=a.push(r));for(;i--;)e.splice(a[i],1)}return u=null,e},i=oe.getText=function(e){var t,n="",a=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[a++];)n+=i(t);return n},(a=oe.selectors={cacheLength:50,createPseudo:le,match:$,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return $.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&J.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=Y[e+" "];return t||(t=new RegExp("(^|"+W+")"+e+"("+W+"|$)"))&&Y(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(a){var i=oe.attr(a,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(R," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,a,i){var r="nth"!==e.slice(0,3),s="last"!==e.slice(-4),o="of-type"===t;return 1===a&&0===i?function(e){return!!e.parentNode}:function(t,n,d){var l,u,c,h,m,_,f=r!==s?"nextSibling":"previousSibling",p=t.parentNode,g=o&&t.nodeName.toLowerCase(),y=!d&&!o,M=!1;if(p){if(r){for(;f;){for(h=t;h=h[f];)if(o?h.nodeName.toLowerCase()===g:1===h.nodeType)return!1;_=f="only"===e&&!_&&"nextSibling"}return!0}if(_=[s?p.firstChild:p.lastChild],s&&y){for(M=(m=(l=(u=(c=(h=p)[v]||(h[v]={}))[h.uniqueID]||(c[h.uniqueID]={}))[e]||[])[0]===b&&l[1])&&l[2],h=m&&p.childNodes[m];h=++m&&h&&h[f]||(M=m=0)||_.pop();)if(1===h.nodeType&&++M&&h===t){u[e]=[b,m,M];break}}else if(y&&(M=m=(l=(u=(c=(h=t)[v]||(h[v]={}))[h.uniqueID]||(c[h.uniqueID]={}))[e]||[])[0]===b&&l[1]),!1===M)for(;(h=++m&&h&&h[f]||(M=m=0)||_.pop())&&((o?h.nodeName.toLowerCase()!==g:1!==h.nodeType)||!++M||(y&&((u=(c=h[v]||(h[v]={}))[h.uniqueID]||(c[h.uniqueID]={}))[e]=[b,M]),h!==t)););return(M-=i)===a||M%a==0&&M/a>=0}}},PSEUDO:function(e,t){var n,i=a.pseudos[e]||a.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return i[v]?i(t):i.length>1?(n=[e,e,"",t],a.setFilters.hasOwnProperty(e.toLowerCase())?le((function(e,n){for(var a,r=i(e,t),s=r.length;s--;)e[a=O(e,r[s])]=!(n[a]=r[s])})):function(e){return i(e,0,n)}):i}},pseudos:{not:le((function(e){var t=[],n=[],a=o(e.replace(z,"$1"));return a[v]?le((function(e,t,n,i){for(var r,s=a(e,null,i,[]),o=e.length;o--;)(r=s[o])&&(e[o]=!(t[o]=r))})):function(e,i,r){return t[0]=e,a(t,null,r,n),t[0]=null,!n.pop()}})),has:le((function(e){return function(t){return oe(e,t).length>0}})),contains:le((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||i(t)).indexOf(e)>-1}})),lang:le((function(e){return U.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=f?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===_},focus:function(e){return e===m.activeElement&&(!m.hasFocus||m.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:fe(!1),disabled:fe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!a.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return K.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:pe((function(){return[0]})),last:pe((function(e,t){return[t-1]})),eq:pe((function(e,t,n){return[n<0?n+t:n]})),even:pe((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:pe((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:pe((function(e,t,n){for(var a=n<0?n+t:n>t?t:n;--a>=0;)e.push(a);return e})),gt:pe((function(e,t,n){for(var a=n<0?n+t:n;++a<t;)e.push(a);return e}))}}).pseudos.nth=a.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})a.pseudos[t]=me(t);for(t in{submit:!0,reset:!0})a.pseudos[t]=_e(t);function ye(){}function Me(e){for(var t=0,n=e.length,a="";t<n;t++)a+=e[t].value;return a}function ve(e,t,n){var a=t.dir,i=t.next,r=i||a,s=n&&"parentNode"===r,o=k++;return t.first?function(t,n,i){for(;t=t[a];)if(1===t.nodeType||s)return e(t,n,i);return!1}:function(t,n,d){var l,u,c,h=[b,o];if(d){for(;t=t[a];)if((1===t.nodeType||s)&&e(t,n,d))return!0}else for(;t=t[a];)if(1===t.nodeType||s)if(u=(c=t[v]||(t[v]={}))[t.uniqueID]||(c[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[a]||t;else{if((l=u[r])&&l[0]===b&&l[1]===o)return h[2]=l[2];if(u[r]=h,h[2]=e(t,n,d))return!0}return!1}}function Le(e){return e.length>1?function(t,n,a){for(var i=e.length;i--;)if(!e[i](t,n,a))return!1;return!0}:e[0]}function be(e,t,n,a,i){for(var r,s=[],o=0,d=e.length,l=null!=t;o<d;o++)(r=e[o])&&(n&&!n(r,a,i)||(s.push(r),l&&t.push(o)));return s}function ke(e,t,n,a,i,r){return a&&!a[v]&&(a=ke(a)),i&&!i[v]&&(i=ke(i,r)),le((function(r,s,o,d){var l,u,c,h=[],m=[],_=s.length,f=r||function(e,t,n){for(var a=0,i=t.length;a<i;a++)oe(e,t[a],n);return n}(t||"*",o.nodeType?[o]:o,[]),p=!e||!r&&t?f:be(f,h,e,o,d),g=n?i||(r?e:_||a)?[]:s:p;if(n&&n(p,g,o,d),a)for(l=be(g,m),a(l,[],o,d),u=l.length;u--;)(c=l[u])&&(g[m[u]]=!(p[m[u]]=c));if(r){if(i||e){if(i){for(l=[],u=g.length;u--;)(c=g[u])&&l.push(p[u]=c);i(null,g=[],l,d)}for(u=g.length;u--;)(c=g[u])&&(l=i?O(r,c):h[u])>-1&&(r[l]=!(s[l]=c))}}else g=be(g===s?g.splice(_,g.length):g),i?i(null,s,g,d):C.apply(s,g)}))}function Ye(e){for(var t,n,i,r=e.length,s=a.relative[e[0].type],o=s||a.relative[" "],d=s?1:0,u=ve((function(e){return e===t}),o,!0),c=ve((function(e){return O(t,e)>-1}),o,!0),h=[function(e,n,a){var i=!s&&(a||n!==l)||((t=n).nodeType?u(e,n,a):c(e,n,a));return t=null,i}];d<r;d++)if(n=a.relative[e[d].type])h=[ve(Le(h),n)];else{if((n=a.filter[e[d].type].apply(null,e[d].matches))[v]){for(i=++d;i<r&&!a.relative[e[i].type];i++);return ke(d>1&&Le(h),d>1&&Me(e.slice(0,d-1).concat({value:" "===e[d-2].type?"*":""})).replace(z,"$1"),n,d<i&&Ye(e.slice(d,i)),i<r&&Ye(e=e.slice(i)),i<r&&Me(e))}h.push(n)}return Le(h)}return ye.prototype=a.filters=a.pseudos,a.setFilters=new ye,s=oe.tokenize=function(e,t){var n,i,r,s,o,d,l,u=D[e+" "];if(u)return t?0:u.slice(0);for(o=e,d=[],l=a.preFilter;o;){for(s in n&&!(i=B.exec(o))||(i&&(o=o.slice(i[0].length)||o),d.push(r=[])),n=!1,(i=V.exec(o))&&(n=i.shift(),r.push({value:n,type:i[0].replace(z," ")}),o=o.slice(n.length)),a.filter)!(i=$[s].exec(o))||l[s]&&!(i=l[s](i))||(n=i.shift(),r.push({value:n,type:s,matches:i}),o=o.slice(n.length));if(!n)break}return t?o.length:o?oe.error(e):D(e,d).slice(0)},o=oe.compile=function(e,t){var n,i=[],r=[],o=w[e+" "];if(!o){for(t||(t=s(e)),n=t.length;n--;)(o=Ye(t[n]))[v]?i.push(o):r.push(o);(o=w(e,function(e,t){var n=t.length>0,i=e.length>0,r=function(r,s,o,d,u){var c,_,p,g=0,y="0",M=r&&[],v=[],L=l,k=r||i&&a.find.TAG("*",u),Y=b+=null==L?1:Math.random()||.1,D=k.length;for(u&&(l=s==m||s||u);y!==D&&null!=(c=k[y]);y++){if(i&&c){for(_=0,s||c.ownerDocument==m||(h(c),o=!f);p=e[_++];)if(p(c,s||m,o)){d.push(c);break}u&&(b=Y)}n&&((c=!p&&c)&&g--,r&&M.push(c))}if(g+=y,n&&y!==g){for(_=0;p=t[_++];)p(M,v,s,o);if(r){if(g>0)for(;y--;)M[y]||v[y]||(v[y]=j.call(d));v=be(v)}C.apply(d,v),u&&!r&&v.length>0&&g+t.length>1&&oe.uniqueSort(d)}return u&&(b=Y,l=L),M};return n?le(r):r}(r,i))).selector=e}return o},d=oe.select=function(e,t,n,i){var r,d,l,u,c,h="function"==typeof e&&e,m=!i&&s(e=h.selector||e);if(n=n||[],1===m.length){if((d=m[0]=m[0].slice(0)).length>2&&"ID"===(l=d[0]).type&&9===t.nodeType&&f&&a.relative[d[1].type]){if(!(t=(a.find.ID(l.matches[0].replace(te,ne),t)||[])[0]))return n;h&&(t=t.parentNode),e=e.slice(d.shift().value.length)}for(r=$.needsContext.test(e)?0:d.length;r--&&(l=d[r],!a.relative[u=l.type]);)if((c=a.find[u])&&(i=c(l.matches[0].replace(te,ne),ee.test(d[0].type)&&ge(t.parentNode)||t))){if(d.splice(r,1),!(e=i.length&&Me(d)))return C.apply(n,i),n;break}}return(h||o(e,m))(i,t,!f,n,!t||ee.test(e)&&ge(t.parentNode)||t),n},n.sortStable=v.split("").sort(T).join("")===v,n.detectDuplicates=!!c,h(),n.sortDetached=ue((function(e){return 1&e.compareDocumentPosition(m.createElement("fieldset"))})),ue((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||ce("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ue((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||ce("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ue((function(e){return null==e.getAttribute("disabled")}))||ce(E,(function(e,t,n){var a;if(!n)return!0===e[t]?t.toLowerCase():(a=e.getAttributeNode(t))&&a.specified?a.value:null})),oe}(n);k.find=D,k.expr=D.selectors,k.expr[":"]=k.expr.pseudos,k.uniqueSort=k.unique=D.uniqueSort,k.text=D.getText,k.isXMLDoc=D.isXML,k.contains=D.contains,k.escapeSelector=D.escape;var w=function(e,t,n){for(var a=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&k(e).is(n))break;a.push(e)}return a},x=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},T=k.expr.match.needsContext;function S(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var H=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function j(e,t,n){return g(t)?k.grep(e,(function(e,a){return!!t.call(e,a,e)!==n})):t.nodeType?k.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?k.grep(e,(function(e){return u.call(t,e)>-1!==n})):k.filter(t,e,n)}k.filter=function(e,t,n){var a=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===a.nodeType?k.find.matchesSelector(a,e)?[a]:[]:k.find.matches(e,k.grep(t,(function(e){return 1===e.nodeType})))},k.fn.extend({find:function(e){var t,n,a=this.length,i=this;if("string"!=typeof e)return this.pushStack(k(e).filter((function(){for(t=0;t<a;t++)if(k.contains(i[t],this))return!0})));for(n=this.pushStack([]),t=0;t<a;t++)k.find(e,i[t],n);return a>1?k.uniqueSort(n):n},filter:function(e){return this.pushStack(j(this,e||[],!1))},not:function(e){return this.pushStack(j(this,e||[],!0))},is:function(e){return!!j(this,"string"==typeof e&&T.test(e)?k(e):e||[],!1).length}});var P,C=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(k.fn.init=function(e,t,n){var a,i;if(!e)return this;if(n=n||P,"string"==typeof e){if(!(a="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:C.exec(e))||!a[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(a[1]){if(t=t instanceof k?t[0]:t,k.merge(this,k.parseHTML(a[1],t&&t.nodeType?t.ownerDocument||t:M,!0)),H.test(a[1])&&k.isPlainObject(t))for(a in t)g(this[a])?this[a](t[a]):this.attr(a,t[a]);return this}return(i=M.getElementById(a[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(k):k.makeArray(e,this)}).prototype=k.fn,P=k(M);var A=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function E(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}k.fn.extend({has:function(e){var t=k(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(k.contains(this,t[e]))return!0}))},closest:function(e,t){var n,a=0,i=this.length,r=[],s="string"!=typeof e&&k(e);if(!T.test(e))for(;a<i;a++)for(n=this[a];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&k.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(r.length>1?k.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?u.call(k(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(k.uniqueSort(k.merge(this.get(),k(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),k.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return w(e,"parentNode")},parentsUntil:function(e,t,n){return w(e,"parentNode",n)},next:function(e){return E(e,"nextSibling")},prev:function(e){return E(e,"previousSibling")},nextAll:function(e){return w(e,"nextSibling")},prevAll:function(e){return w(e,"previousSibling")},nextUntil:function(e,t,n){return w(e,"nextSibling",n)},prevUntil:function(e,t,n){return w(e,"previousSibling",n)},siblings:function(e){return x((e.parentNode||{}).firstChild,e)},children:function(e){return x(e.firstChild)},contents:function(e){return null!=e.contentDocument&&s(e.contentDocument)?e.contentDocument:(S(e,"template")&&(e=e.content||e),k.merge([],e.childNodes))}},(function(e,t){k.fn[e]=function(n,a){var i=k.map(this,t,n);return"Until"!==e.slice(-5)&&(a=n),a&&"string"==typeof a&&(i=k.filter(a,i)),this.length>1&&(O[e]||k.uniqueSort(i),A.test(e)&&i.reverse()),this.pushStack(i)}}));var W=/[^\x20\t\r\n\f]+/g;function F(e){return e}function N(e){throw e}function I(e,t,n,a){var i;try{e&&g(i=e.promise)?i.call(e).done(t).fail(n):e&&g(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(a))}catch(e){n.apply(void 0,[e])}}k.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return k.each(e.match(W)||[],(function(e,n){t[n]=!0})),t}(e):k.extend({},e);var t,n,a,i,r=[],s=[],o=-1,d=function(){for(i=i||e.once,a=t=!0;s.length;o=-1)for(n=s.shift();++o<r.length;)!1===r[o].apply(n[0],n[1])&&e.stopOnFalse&&(o=r.length,n=!1);e.memory||(n=!1),t=!1,i&&(r=n?[]:"")},l={add:function(){return r&&(n&&!t&&(o=r.length-1,s.push(n)),function t(n){k.each(n,(function(n,a){g(a)?e.unique&&l.has(a)||r.push(a):a&&a.length&&"string"!==b(a)&&t(a)}))}(arguments),n&&!t&&d()),this},remove:function(){return k.each(arguments,(function(e,t){for(var n;(n=k.inArray(t,r,n))>-1;)r.splice(n,1),n<=o&&o--})),this},has:function(e){return e?k.inArray(e,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return i=s=[],r=n="",this},disabled:function(){return!r},lock:function(){return i=s=[],n||t||(r=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||d()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!a}};return l},k.extend({Deferred:function(e){var t=[["notify","progress",k.Callbacks("memory"),k.Callbacks("memory"),2],["resolve","done",k.Callbacks("once memory"),k.Callbacks("once memory"),0,"resolved"],["reject","fail",k.Callbacks("once memory"),k.Callbacks("once memory"),1,"rejected"]],a="pending",i={state:function(){return a},always:function(){return r.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return k.Deferred((function(n){k.each(t,(function(t,a){var i=g(e[a[4]])&&e[a[4]];r[a[1]]((function(){var e=i&&i.apply(this,arguments);e&&g(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[a[0]+"With"](this,i?[e]:arguments)}))})),e=null})).promise()},then:function(e,a,i){var r=0;function s(e,t,a,i){return function(){var o=this,d=arguments,l=function(){var n,l;if(!(e<r)){if((n=a.apply(o,d))===t.promise())throw new TypeError("Thenable self-resolution");l=n&&("object"==typeof n||"function"==typeof n)&&n.then,g(l)?i?l.call(n,s(r,t,F,i),s(r,t,N,i)):(r++,l.call(n,s(r,t,F,i),s(r,t,N,i),s(r,t,F,t.notifyWith))):(a!==F&&(o=void 0,d=[n]),(i||t.resolveWith)(o,d))}},u=i?l:function(){try{l()}catch(n){k.Deferred.exceptionHook&&k.Deferred.exceptionHook(n,u.stackTrace),e+1>=r&&(a!==N&&(o=void 0,d=[n]),t.rejectWith(o,d))}};e?u():(k.Deferred.getStackHook&&(u.stackTrace=k.Deferred.getStackHook()),n.setTimeout(u))}}return k.Deferred((function(n){t[0][3].add(s(0,n,g(i)?i:F,n.notifyWith)),t[1][3].add(s(0,n,g(e)?e:F)),t[2][3].add(s(0,n,g(a)?a:N))})).promise()},promise:function(e){return null!=e?k.extend(e,i):i}},r={};return k.each(t,(function(e,n){var s=n[2],o=n[5];i[n[1]]=s.add,o&&s.add((function(){a=o}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(n[3].fire),r[n[0]]=function(){return r[n[0]+"With"](this===r?void 0:this,arguments),this},r[n[0]+"With"]=s.fireWith})),i.promise(r),e&&e.call(r,r),r},when:function(e){var t=arguments.length,n=t,a=Array(n),i=o.call(arguments),r=k.Deferred(),s=function(e){return function(n){a[e]=this,i[e]=arguments.length>1?o.call(arguments):n,--t||r.resolveWith(a,i)}};if(t<=1&&(I(e,r.done(s(n)).resolve,r.reject,!t),"pending"===r.state()||g(i[n]&&i[n].then)))return r.then();for(;n--;)I(i[n],s(n),r.reject);return r.promise()}});var R=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;k.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&R.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},k.readyException=function(e){n.setTimeout((function(){throw e}))};var z=k.Deferred();function B(){M.removeEventListener("DOMContentLoaded",B),n.removeEventListener("load",B),k.ready()}k.fn.ready=function(e){return z.then(e).catch((function(e){k.readyException(e)})),this},k.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--k.readyWait:k.isReady)||(k.isReady=!0,!0!==e&&--k.readyWait>0||z.resolveWith(M,[k]))}}),k.ready.then=z.then,"complete"===M.readyState||"loading"!==M.readyState&&!M.documentElement.doScroll?n.setTimeout(k.ready):(M.addEventListener("DOMContentLoaded",B),n.addEventListener("load",B));var V=function(e,t,n,a,i,r,s){var o=0,d=e.length,l=null==n;if("object"===b(n))for(o in i=!0,n)V(e,t,o,n[o],!0,r,s);else if(void 0!==a&&(i=!0,g(a)||(s=!0),l&&(s?(t.call(e,a),t=null):(l=t,t=function(e,t,n){return l.call(k(e),n)})),t))for(;o<d;o++)t(e[o],n,s?a:a.call(e[o],o,t(e[o],n)));return i?e:l?t.call(e):d?t(e[0],n):r},q=/^-ms-/,J=/-([a-z])/g;function U(e,t){return t.toUpperCase()}function $(e){return e.replace(q,"ms-").replace(J,U)}var G=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function K(){this.expando=k.expando+K.uid++}K.uid=1,K.prototype={cache:function(e){var t=e[this.expando];return t||(t={},G(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var a,i=this.cache(e);if("string"==typeof t)i[$(t)]=n;else for(a in t)i[$(a)]=t[a];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][$(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,a=e[this.expando];if(void 0!==a){if(void 0!==t){n=(t=Array.isArray(t)?t.map($):(t=$(t))in a?[t]:t.match(W)||[]).length;for(;n--;)delete a[t[n]]}(void 0===t||k.isEmptyObject(a))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!k.isEmptyObject(t)}};var X=new K,Z=new K,Q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ee=/[A-Z]/g;function te(e,t,n){var a;if(void 0===n&&1===e.nodeType)if(a="data-"+t.replace(ee,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(a))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Q.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}k.extend({hasData:function(e){return Z.hasData(e)||X.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return X.access(e,t,n)},_removeData:function(e,t){X.remove(e,t)}}),k.fn.extend({data:function(e,t){var n,a,i,r=this[0],s=r&&r.attributes;if(void 0===e){if(this.length&&(i=Z.get(r),1===r.nodeType&&!X.get(r,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(a=s[n].name).indexOf("data-")&&(a=$(a.slice(5)),te(r,a,i[a]));X.set(r,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each((function(){Z.set(this,e)})):V(this,(function(t){var n;if(r&&void 0===t)return void 0!==(n=Z.get(r,e))||void 0!==(n=te(r,e))?n:void 0;this.each((function(){Z.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Z.remove(this,e)}))}}),k.extend({queue:function(e,t,n){var a;if(e)return t=(t||"fx")+"queue",a=X.get(e,t),n&&(!a||Array.isArray(n)?a=X.access(e,t,k.makeArray(n)):a.push(n)),a||[]},dequeue:function(e,t){t=t||"fx";var n=k.queue(e,t),a=n.length,i=n.shift(),r=k._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),a--),i&&("fx"===t&&n.unshift("inprogress"),delete r.stop,i.call(e,(function(){k.dequeue(e,t)}),r)),!a&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return X.get(e,n)||X.access(e,n,{empty:k.Callbacks("once memory").add((function(){X.remove(e,[t+"queue",n])}))})}}),k.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?k.queue(this[0],e):void 0===t?this:this.each((function(){var n=k.queue(this,e,t);k._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&k.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){k.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,a=1,i=k.Deferred(),r=this,s=this.length,o=function(){--a||i.resolveWith(r,[r])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=X.get(r[s],e+"queueHooks"))&&n.empty&&(a++,n.empty.add(o));return o(),i.promise(t)}});var ne=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ae=new RegExp("^(?:([+-])=|)("+ne+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],re=M.documentElement,se=function(e){return k.contains(e.ownerDocument,e)},oe={composed:!0};re.getRootNode&&(se=function(e){return k.contains(e.ownerDocument,e)||e.getRootNode(oe)===e.ownerDocument});var de=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&se(e)&&"none"===k.css(e,"display")};function le(e,t,n,a){var i,r,s=20,o=a?function(){return a.cur()}:function(){return k.css(e,t,"")},d=o(),l=n&&n[3]||(k.cssNumber[t]?"":"px"),u=e.nodeType&&(k.cssNumber[t]||"px"!==l&&+d)&&ae.exec(k.css(e,t));if(u&&u[3]!==l){for(d/=2,l=l||u[3],u=+d||1;s--;)k.style(e,t,u+l),(1-r)*(1-(r=o()/d||.5))<=0&&(s=0),u/=r;u*=2,k.style(e,t,u+l),n=n||[]}return n&&(u=+u||+d||0,i=n[1]?u+(n[1]+1)*n[2]:+n[2],a&&(a.unit=l,a.start=u,a.end=i)),i}var ue={};function ce(e){var t,n=e.ownerDocument,a=e.nodeName,i=ue[a];return i||(t=n.body.appendChild(n.createElement(a)),i=k.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),ue[a]=i,i)}function he(e,t){for(var n,a,i=[],r=0,s=e.length;r<s;r++)(a=e[r]).style&&(n=a.style.display,t?("none"===n&&(i[r]=X.get(a,"display")||null,i[r]||(a.style.display="")),""===a.style.display&&de(a)&&(i[r]=ce(a))):"none"!==n&&(i[r]="none",X.set(a,"display",n)));for(r=0;r<s;r++)null!=i[r]&&(e[r].style.display=i[r]);return e}k.fn.extend({show:function(){return he(this,!0)},hide:function(){return he(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){de(this)?k(this).show():k(this).hide()}))}});var me,_e,fe=/^(?:checkbox|radio)$/i,pe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ge=/^$|^module$|\/(?:java|ecma)script/i;me=M.createDocumentFragment().appendChild(M.createElement("div")),(_e=M.createElement("input")).setAttribute("type","radio"),_e.setAttribute("checked","checked"),_e.setAttribute("name","t"),me.appendChild(_e),p.checkClone=me.cloneNode(!0).cloneNode(!0).lastChild.checked,me.innerHTML="<textarea>x</textarea>",p.noCloneChecked=!!me.cloneNode(!0).lastChild.defaultValue,me.innerHTML="<option></option>",p.option=!!me.lastChild;var ye={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function Me(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&S(e,t)?k.merge([e],n):n}function ve(e,t){for(var n=0,a=e.length;n<a;n++)X.set(e[n],"globalEval",!t||X.get(t[n],"globalEval"))}ye.tbody=ye.tfoot=ye.colgroup=ye.caption=ye.thead,ye.th=ye.td,p.option||(ye.optgroup=ye.option=[1,"<select multiple='multiple'>","</select>"]);var Le=/<|&#?\w+;/;function be(e,t,n,a,i){for(var r,s,o,d,l,u,c=t.createDocumentFragment(),h=[],m=0,_=e.length;m<_;m++)if((r=e[m])||0===r)if("object"===b(r))k.merge(h,r.nodeType?[r]:r);else if(Le.test(r)){for(s=s||c.appendChild(t.createElement("div")),o=(pe.exec(r)||["",""])[1].toLowerCase(),d=ye[o]||ye._default,s.innerHTML=d[1]+k.htmlPrefilter(r)+d[2],u=d[0];u--;)s=s.lastChild;k.merge(h,s.childNodes),(s=c.firstChild).textContent=""}else h.push(t.createTextNode(r));for(c.textContent="",m=0;r=h[m++];)if(a&&k.inArray(r,a)>-1)i&&i.push(r);else if(l=se(r),s=Me(c.appendChild(r),"script"),l&&ve(s),n)for(u=0;r=s[u++];)ge.test(r.type||"")&&n.push(r);return c}var ke=/^key/,Ye=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,De=/^([^.]*)(?:\.(.+)|)/;function we(){return!0}function xe(){return!1}function Te(e,t){return e===function(){try{return M.activeElement}catch(e){}}()==("focus"===t)}function Se(e,t,n,a,i,r){var s,o;if("object"==typeof t){for(o in"string"!=typeof n&&(a=a||n,n=void 0),t)Se(e,o,n,a,t[o],r);return e}if(null==a&&null==i?(i=n,a=n=void 0):null==i&&("string"==typeof n?(i=a,a=void 0):(i=a,a=n,n=void 0)),!1===i)i=xe;else if(!i)return e;return 1===r&&(s=i,(i=function(e){return k().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=k.guid++)),e.each((function(){k.event.add(this,t,i,a,n)}))}function He(e,t,n){n?(X.set(e,t,!1),k.event.add(e,t,{namespace:!1,handler:function(e){var a,i,r=X.get(this,t);if(1&e.isTrigger&&this[t]){if(r.length)(k.event.special[t]||{}).delegateType&&e.stopPropagation();else if(r=o.call(arguments),X.set(this,t,r),a=n(this,t),this[t](),r!==(i=X.get(this,t))||a?X.set(this,t,!1):i={},r!==i)return e.stopImmediatePropagation(),e.preventDefault(),i.value}else r.length&&(X.set(this,t,{value:k.event.trigger(k.extend(r[0],k.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===X.get(e,t)&&k.event.add(e,t,we)}k.event={global:{},add:function(e,t,n,a,i){var r,s,o,d,l,u,c,h,m,_,f,p=X.get(e);if(G(e))for(n.handler&&(n=(r=n).handler,i=r.selector),i&&k.find.matchesSelector(re,i),n.guid||(n.guid=k.guid++),(d=p.events)||(d=p.events=Object.create(null)),(s=p.handle)||(s=p.handle=function(t){return void 0!==k&&k.event.triggered!==t.type?k.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(W)||[""]).length;l--;)m=f=(o=De.exec(t[l])||[])[1],_=(o[2]||"").split(".").sort(),m&&(c=k.event.special[m]||{},m=(i?c.delegateType:c.bindType)||m,c=k.event.special[m]||{},u=k.extend({type:m,origType:f,data:a,handler:n,guid:n.guid,selector:i,needsContext:i&&k.expr.match.needsContext.test(i),namespace:_.join(".")},r),(h=d[m])||((h=d[m]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(e,a,_,s)||e.addEventListener&&e.addEventListener(m,s)),c.add&&(c.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),i?h.splice(h.delegateCount++,0,u):h.push(u),k.event.global[m]=!0)},remove:function(e,t,n,a,i){var r,s,o,d,l,u,c,h,m,_,f,p=X.hasData(e)&&X.get(e);if(p&&(d=p.events)){for(l=(t=(t||"").match(W)||[""]).length;l--;)if(m=f=(o=De.exec(t[l])||[])[1],_=(o[2]||"").split(".").sort(),m){for(c=k.event.special[m]||{},h=d[m=(a?c.delegateType:c.bindType)||m]||[],o=o[2]&&new RegExp("(^|\\.)"+_.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=h.length;r--;)u=h[r],!i&&f!==u.origType||n&&n.guid!==u.guid||o&&!o.test(u.namespace)||a&&a!==u.selector&&("**"!==a||!u.selector)||(h.splice(r,1),u.selector&&h.delegateCount--,c.remove&&c.remove.call(e,u));s&&!h.length&&(c.teardown&&!1!==c.teardown.call(e,_,p.handle)||k.removeEvent(e,m,p.handle),delete d[m])}else for(m in d)k.event.remove(e,m+t[l],n,a,!0);k.isEmptyObject(d)&&X.remove(e,"handle events")}},dispatch:function(e){var t,n,a,i,r,s,o=new Array(arguments.length),d=k.event.fix(e),l=(X.get(this,"events")||Object.create(null))[d.type]||[],u=k.event.special[d.type]||{};for(o[0]=d,t=1;t<arguments.length;t++)o[t]=arguments[t];if(d.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,d)){for(s=k.event.handlers.call(this,d,l),t=0;(i=s[t++])&&!d.isPropagationStopped();)for(d.currentTarget=i.elem,n=0;(r=i.handlers[n++])&&!d.isImmediatePropagationStopped();)d.rnamespace&&!1!==r.namespace&&!d.rnamespace.test(r.namespace)||(d.handleObj=r,d.data=r.data,void 0!==(a=((k.event.special[r.origType]||{}).handle||r.handler).apply(i.elem,o))&&!1===(d.result=a)&&(d.preventDefault(),d.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,d),d.result}},handlers:function(e,t){var n,a,i,r,s,o=[],d=t.delegateCount,l=e.target;if(d&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(r=[],s={},n=0;n<d;n++)void 0===s[i=(a=t[n]).selector+" "]&&(s[i]=a.needsContext?k(i,this).index(l)>-1:k.find(i,this,null,[l]).length),s[i]&&r.push(a);r.length&&o.push({elem:l,handlers:r})}return l=this,d<t.length&&o.push({elem:l,handlers:t.slice(d)}),o},addProp:function(e,t){Object.defineProperty(k.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[k.expando]?e:new k.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return fe.test(t.type)&&t.click&&S(t,"input")&&He(t,"click",we),!1},trigger:function(e){var t=this||e;return fe.test(t.type)&&t.click&&S(t,"input")&&He(t,"click"),!0},_default:function(e){var t=e.target;return fe.test(t.type)&&t.click&&S(t,"input")&&X.get(t,"click")||S(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},k.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},k.Event=function(e,t){if(!(this instanceof k.Event))return new k.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?we:xe,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&k.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[k.expando]=!0},k.Event.prototype={constructor:k.Event,isDefaultPrevented:xe,isPropagationStopped:xe,isImmediatePropagationStopped:xe,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=we,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=we,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=we,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},k.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&ke.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ye.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},k.event.addProp),k.each({focus:"focusin",blur:"focusout"},(function(e,t){k.event.special[e]={setup:function(){return He(this,e,Te),!1},trigger:function(){return He(this,e),!0},delegateType:t}})),k.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){k.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,a=this,i=e.relatedTarget,r=e.handleObj;return i&&(i===a||k.contains(a,i))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}})),k.fn.extend({on:function(e,t,n,a){return Se(this,e,t,n,a)},one:function(e,t,n,a){return Se(this,e,t,n,a,1)},off:function(e,t,n){var a,i;if(e&&e.preventDefault&&e.handleObj)return a=e.handleObj,k(e.delegateTarget).off(a.namespace?a.origType+"."+a.namespace:a.origType,a.selector,a.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=xe),this.each((function(){k.event.remove(this,e,n,t)}))}});var je=/<script|<style|<link/i,Pe=/checked\s*(?:[^=]|=\s*.checked.)/i,Ce=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ae(e,t){return S(e,"table")&&S(11!==t.nodeType?t:t.firstChild,"tr")&&k(e).children("tbody")[0]||e}function Oe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ee(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function We(e,t){var n,a,i,r,s,o;if(1===t.nodeType){if(X.hasData(e)&&(o=X.get(e).events))for(i in X.remove(t,"handle events"),o)for(n=0,a=o[i].length;n<a;n++)k.event.add(t,i,o[i][n]);Z.hasData(e)&&(r=Z.access(e),s=k.extend({},r),Z.set(t,s))}}function Fe(e,t){var n=t.nodeName.toLowerCase();"input"===n&&fe.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Ne(e,t,n,a){t=d(t);var i,r,s,o,l,u,c=0,h=e.length,m=h-1,_=t[0],f=g(_);if(f||h>1&&"string"==typeof _&&!p.checkClone&&Pe.test(_))return e.each((function(i){var r=e.eq(i);f&&(t[0]=_.call(this,i,r.html())),Ne(r,t,n,a)}));if(h&&(r=(i=be(t,e[0].ownerDocument,!1,e,a)).firstChild,1===i.childNodes.length&&(i=r),r||a)){for(o=(s=k.map(Me(i,"script"),Oe)).length;c<h;c++)l=i,c!==m&&(l=k.clone(l,!0,!0),o&&k.merge(s,Me(l,"script"))),n.call(e[c],l,c);if(o)for(u=s[s.length-1].ownerDocument,k.map(s,Ee),c=0;c<o;c++)l=s[c],ge.test(l.type||"")&&!X.access(l,"globalEval")&&k.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?k._evalUrl&&!l.noModule&&k._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},u):L(l.textContent.replace(Ce,""),l,u))}return e}function Ie(e,t,n){for(var a,i=t?k.filter(t,e):e,r=0;null!=(a=i[r]);r++)n||1!==a.nodeType||k.cleanData(Me(a)),a.parentNode&&(n&&se(a)&&ve(Me(a,"script")),a.parentNode.removeChild(a));return e}k.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var a,i,r,s,o=e.cloneNode(!0),d=se(e);if(!(p.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||k.isXMLDoc(e)))for(s=Me(o),a=0,i=(r=Me(e)).length;a<i;a++)Fe(r[a],s[a]);if(t)if(n)for(r=r||Me(e),s=s||Me(o),a=0,i=r.length;a<i;a++)We(r[a],s[a]);else We(e,o);return(s=Me(o,"script")).length>0&&ve(s,!d&&Me(e,"script")),o},cleanData:function(e){for(var t,n,a,i=k.event.special,r=0;void 0!==(n=e[r]);r++)if(G(n)){if(t=n[X.expando]){if(t.events)for(a in t.events)i[a]?k.event.remove(n,a):k.removeEvent(n,a,t.handle);n[X.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),k.fn.extend({detach:function(e){return Ie(this,e,!0)},remove:function(e){return Ie(this,e)},text:function(e){return V(this,(function(e){return void 0===e?k.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Ne(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ae(this,e).appendChild(e)}))},prepend:function(){return Ne(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ae(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Ne(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Ne(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(k.cleanData(Me(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return k.clone(this,e,t)}))},html:function(e){return V(this,(function(e){var t=this[0]||{},n=0,a=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!je.test(e)&&!ye[(pe.exec(e)||["",""])[1].toLowerCase()]){e=k.htmlPrefilter(e);try{for(;n<a;n++)1===(t=this[n]||{}).nodeType&&(k.cleanData(Me(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Ne(this,arguments,(function(t){var n=this.parentNode;k.inArray(this,e)<0&&(k.cleanData(Me(this)),n&&n.replaceChild(t,this))}),e)}}),k.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){k.fn[e]=function(e){for(var n,a=[],i=k(e),r=i.length-1,s=0;s<=r;s++)n=s===r?this:this.clone(!0),k(i[s])[t](n),l.apply(a,n.get());return this.pushStack(a)}}));var Re=new RegExp("^("+ne+")(?!px)[a-z%]+$","i"),ze=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Be=function(e,t,n){var a,i,r={};for(i in t)r[i]=e.style[i],e.style[i]=t[i];for(i in a=n.call(e),t)e.style[i]=r[i];return a},Ve=new RegExp(ie.join("|"),"i");function qe(e,t,n){var a,i,r,s,o=e.style;return(n=n||ze(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||se(e)||(s=k.style(e,t)),!p.pixelBoxStyles()&&Re.test(s)&&Ve.test(t)&&(a=o.width,i=o.minWidth,r=o.maxWidth,o.minWidth=o.maxWidth=o.width=s,s=n.width,o.width=a,o.minWidth=i,o.maxWidth=r)),void 0!==s?s+"":s}function Je(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",re.appendChild(l).appendChild(u);var e=n.getComputedStyle(u);a="1%"!==e.top,d=12===t(e.marginLeft),u.style.right="60%",s=36===t(e.right),i=36===t(e.width),u.style.position="absolute",r=12===t(u.offsetWidth/3),re.removeChild(l),u=null}}function t(e){return Math.round(parseFloat(e))}var a,i,r,s,o,d,l=M.createElement("div"),u=M.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",p.clearCloneStyle="content-box"===u.style.backgroundClip,k.extend(p,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),a},reliableMarginLeft:function(){return e(),d},scrollboxSize:function(){return e(),r},reliableTrDimensions:function(){var e,t,a,i;return null==o&&(e=M.createElement("table"),t=M.createElement("tr"),a=M.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",a.style.height="9px",re.appendChild(e).appendChild(t).appendChild(a),i=n.getComputedStyle(t),o=parseInt(i.height)>3,re.removeChild(e)),o}}))}();var Ue=["Webkit","Moz","ms"],$e=M.createElement("div").style,Ge={};function Ke(e){var t=k.cssProps[e]||Ge[e];return t||(e in $e?e:Ge[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ue.length;n--;)if((e=Ue[n]+t)in $e)return e}(e)||e)}var Xe=/^(none|table(?!-c[ea]).+)/,Ze=/^--/,Qe={position:"absolute",visibility:"hidden",display:"block"},et={letterSpacing:"0",fontWeight:"400"};function tt(e,t,n){var a=ae.exec(t);return a?Math.max(0,a[2]-(n||0))+(a[3]||"px"):t}function nt(e,t,n,a,i,r){var s="width"===t?1:0,o=0,d=0;if(n===(a?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(d+=k.css(e,n+ie[s],!0,i)),a?("content"===n&&(d-=k.css(e,"padding"+ie[s],!0,i)),"margin"!==n&&(d-=k.css(e,"border"+ie[s]+"Width",!0,i))):(d+=k.css(e,"padding"+ie[s],!0,i),"padding"!==n?d+=k.css(e,"border"+ie[s]+"Width",!0,i):o+=k.css(e,"border"+ie[s]+"Width",!0,i));return!a&&r>=0&&(d+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-r-d-o-.5))||0),d}function at(e,t,n){var a=ze(e),i=(!p.boxSizingReliable()||n)&&"border-box"===k.css(e,"boxSizing",!1,a),r=i,s=qe(e,t,a),o="offset"+t[0].toUpperCase()+t.slice(1);if(Re.test(s)){if(!n)return s;s="auto"}return(!p.boxSizingReliable()&&i||!p.reliableTrDimensions()&&S(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===k.css(e,"display",!1,a))&&e.getClientRects().length&&(i="border-box"===k.css(e,"boxSizing",!1,a),(r=o in e)&&(s=e[o])),(s=parseFloat(s)||0)+nt(e,t,n||(i?"border":"content"),r,a,s)+"px"}function it(e,t,n,a,i){return new it.prototype.init(e,t,n,a,i)}k.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=qe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,a){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,r,s,o=$(t),d=Ze.test(t),l=e.style;if(d||(t=Ke(o)),s=k.cssHooks[t]||k.cssHooks[o],void 0===n)return s&&"get"in s&&void 0!==(i=s.get(e,!1,a))?i:l[t];"string"===(r=typeof n)&&(i=ae.exec(n))&&i[1]&&(n=le(e,t,i),r="number"),null!=n&&n==n&&("number"!==r||d||(n+=i&&i[3]||(k.cssNumber[o]?"":"px")),p.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,a))||(d?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,a){var i,r,s,o=$(t);return Ze.test(t)||(t=Ke(o)),(s=k.cssHooks[t]||k.cssHooks[o])&&"get"in s&&(i=s.get(e,!0,n)),void 0===i&&(i=qe(e,t,a)),"normal"===i&&t in et&&(i=et[t]),""===n||n?(r=parseFloat(i),!0===n||isFinite(r)?r||0:i):i}}),k.each(["height","width"],(function(e,t){k.cssHooks[t]={get:function(e,n,a){if(n)return!Xe.test(k.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?at(e,t,a):Be(e,Qe,(function(){return at(e,t,a)}))},set:function(e,n,a){var i,r=ze(e),s=!p.scrollboxSize()&&"absolute"===r.position,o=(s||a)&&"border-box"===k.css(e,"boxSizing",!1,r),d=a?nt(e,t,a,o,r):0;return o&&s&&(d-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(r[t])-nt(e,t,"border",!1,r)-.5)),d&&(i=ae.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=k.css(e,t)),tt(0,n,d)}}})),k.cssHooks.marginLeft=Je(p.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(qe(e,"marginLeft"))||e.getBoundingClientRect().left-Be(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),k.each({margin:"",padding:"",border:"Width"},(function(e,t){k.cssHooks[e+t]={expand:function(n){for(var a=0,i={},r="string"==typeof n?n.split(" "):[n];a<4;a++)i[e+ie[a]+t]=r[a]||r[a-2]||r[0];return i}},"margin"!==e&&(k.cssHooks[e+t].set=tt)})),k.fn.extend({css:function(e,t){return V(this,(function(e,t,n){var a,i,r={},s=0;if(Array.isArray(t)){for(a=ze(e),i=t.length;s<i;s++)r[t[s]]=k.css(e,t[s],!1,a);return r}return void 0!==n?k.style(e,t,n):k.css(e,t)}),e,t,arguments.length>1)}}),k.Tween=it,it.prototype={constructor:it,init:function(e,t,n,a,i,r){this.elem=e,this.prop=n,this.easing=i||k.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=a,this.unit=r||(k.cssNumber[n]?"":"px")},cur:function(){var e=it.propHooks[this.prop];return e&&e.get?e.get(this):it.propHooks._default.get(this)},run:function(e){var t,n=it.propHooks[this.prop];return this.options.duration?this.pos=t=k.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):it.propHooks._default.set(this),this}},it.prototype.init.prototype=it.prototype,it.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=k.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){k.fx.step[e.prop]?k.fx.step[e.prop](e):1!==e.elem.nodeType||!k.cssHooks[e.prop]&&null==e.elem.style[Ke(e.prop)]?e.elem[e.prop]=e.now:k.style(e.elem,e.prop,e.now+e.unit)}}},it.propHooks.scrollTop=it.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},k.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},k.fx=it.prototype.init,k.fx.step={};var rt,st,ot=/^(?:toggle|show|hide)$/,dt=/queueHooks$/;function lt(){st&&(!1===M.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(lt):n.setTimeout(lt,k.fx.interval),k.fx.tick())}function ut(){return n.setTimeout((function(){rt=void 0})),rt=Date.now()}function ct(e,t){var n,a=0,i={height:e};for(t=t?1:0;a<4;a+=2-t)i["margin"+(n=ie[a])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function ht(e,t,n){for(var a,i=(mt.tweeners[t]||[]).concat(mt.tweeners["*"]),r=0,s=i.length;r<s;r++)if(a=i[r].call(n,t,e))return a}function mt(e,t,n){var a,i,r=0,s=mt.prefilters.length,o=k.Deferred().always((function(){delete d.elem})),d=function(){if(i)return!1;for(var t=rt||ut(),n=Math.max(0,l.startTime+l.duration-t),a=1-(n/l.duration||0),r=0,s=l.tweens.length;r<s;r++)l.tweens[r].run(a);return o.notifyWith(e,[l,a,n]),a<1&&s?n:(s||o.notifyWith(e,[l,1,0]),o.resolveWith(e,[l]),!1)},l=o.promise({elem:e,props:k.extend({},t),opts:k.extend(!0,{specialEasing:{},easing:k.easing._default},n),originalProperties:t,originalOptions:n,startTime:rt||ut(),duration:n.duration,tweens:[],createTween:function(t,n){var a=k.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(a),a},stop:function(t){var n=0,a=t?l.tweens.length:0;if(i)return this;for(i=!0;n<a;n++)l.tweens[n].run(1);return t?(o.notifyWith(e,[l,1,0]),o.resolveWith(e,[l,t])):o.rejectWith(e,[l,t]),this}}),u=l.props;for(!function(e,t){var n,a,i,r,s;for(n in e)if(i=t[a=$(n)],r=e[n],Array.isArray(r)&&(i=r[1],r=e[n]=r[0]),n!==a&&(e[a]=r,delete e[n]),(s=k.cssHooks[a])&&"expand"in s)for(n in r=s.expand(r),delete e[a],r)n in e||(e[n]=r[n],t[n]=i);else t[a]=i}(u,l.opts.specialEasing);r<s;r++)if(a=mt.prefilters[r].call(l,e,u,l.opts))return g(a.stop)&&(k._queueHooks(l.elem,l.opts.queue).stop=a.stop.bind(a)),a;return k.map(u,ht,l),g(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),k.fx.timer(k.extend(d,{elem:e,anim:l,queue:l.opts.queue})),l}k.Animation=k.extend(mt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return le(n.elem,e,ae.exec(t),n),n}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match(W);for(var n,a=0,i=e.length;a<i;a++)n=e[a],mt.tweeners[n]=mt.tweeners[n]||[],mt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var a,i,r,s,o,d,l,u,c="width"in t||"height"in t,h=this,m={},_=e.style,f=e.nodeType&&de(e),p=X.get(e,"fxshow");for(a in n.queue||(null==(s=k._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,o=s.empty.fire,s.empty.fire=function(){s.unqueued||o()}),s.unqueued++,h.always((function(){h.always((function(){s.unqueued--,k.queue(e,"fx").length||s.empty.fire()}))}))),t)if(i=t[a],ot.test(i)){if(delete t[a],r=r||"toggle"===i,i===(f?"hide":"show")){if("show"!==i||!p||void 0===p[a])continue;f=!0}m[a]=p&&p[a]||k.style(e,a)}if((d=!k.isEmptyObject(t))||!k.isEmptyObject(m))for(a in c&&1===e.nodeType&&(n.overflow=[_.overflow,_.overflowX,_.overflowY],null==(l=p&&p.display)&&(l=X.get(e,"display")),"none"===(u=k.css(e,"display"))&&(l?u=l:(he([e],!0),l=e.style.display||l,u=k.css(e,"display"),he([e]))),("inline"===u||"inline-block"===u&&null!=l)&&"none"===k.css(e,"float")&&(d||(h.done((function(){_.display=l})),null==l&&(u=_.display,l="none"===u?"":u)),_.display="inline-block")),n.overflow&&(_.overflow="hidden",h.always((function(){_.overflow=n.overflow[0],_.overflowX=n.overflow[1],_.overflowY=n.overflow[2]}))),d=!1,m)d||(p?"hidden"in p&&(f=p.hidden):p=X.access(e,"fxshow",{display:l}),r&&(p.hidden=!f),f&&he([e],!0),h.done((function(){for(a in f||he([e]),X.remove(e,"fxshow"),m)k.style(e,a,m[a])}))),d=ht(f?p[a]:0,a,h),a in p||(p[a]=d.start,f&&(d.end=d.start,d.start=0))}],prefilter:function(e,t){t?mt.prefilters.unshift(e):mt.prefilters.push(e)}}),k.speed=function(e,t,n){var a=e&&"object"==typeof e?k.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return k.fx.off?a.duration=0:"number"!=typeof a.duration&&(a.duration in k.fx.speeds?a.duration=k.fx.speeds[a.duration]:a.duration=k.fx.speeds._default),null!=a.queue&&!0!==a.queue||(a.queue="fx"),a.old=a.complete,a.complete=function(){g(a.old)&&a.old.call(this),a.queue&&k.dequeue(this,a.queue)},a},k.fn.extend({fadeTo:function(e,t,n,a){return this.filter(de).css("opacity",0).show().end().animate({opacity:t},e,n,a)},animate:function(e,t,n,a){var i=k.isEmptyObject(e),r=k.speed(t,n,a),s=function(){var t=mt(this,k.extend({},e),r);(i||X.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(e,t,n){var a=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,i=null!=e&&e+"queueHooks",r=k.timers,s=X.get(this);if(i)s[i]&&s[i].stop&&a(s[i]);else for(i in s)s[i]&&s[i].stop&&dt.test(i)&&a(s[i]);for(i=r.length;i--;)r[i].elem!==this||null!=e&&r[i].queue!==e||(r[i].anim.stop(n),t=!1,r.splice(i,1));!t&&n||k.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=X.get(this),a=n[e+"queue"],i=n[e+"queueHooks"],r=k.timers,s=a?a.length:0;for(n.finish=!0,k.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===e&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<s;t++)a[t]&&a[t].finish&&a[t].finish.call(this);delete n.finish}))}}),k.each(["toggle","show","hide"],(function(e,t){var n=k.fn[t];k.fn[t]=function(e,a,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ct(t,!0),e,a,i)}})),k.each({slideDown:ct("show"),slideUp:ct("hide"),slideToggle:ct("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){k.fn[e]=function(e,n,a){return this.animate(t,e,n,a)}})),k.timers=[],k.fx.tick=function(){var e,t=0,n=k.timers;for(rt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||k.fx.stop(),rt=void 0},k.fx.timer=function(e){k.timers.push(e),k.fx.start()},k.fx.interval=13,k.fx.start=function(){st||(st=!0,lt())},k.fx.stop=function(){st=null},k.fx.speeds={slow:600,fast:200,_default:400},k.fn.delay=function(e,t){return e=k.fx&&k.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,a){var i=n.setTimeout(t,e);a.stop=function(){n.clearTimeout(i)}}))},function(){var e=M.createElement("input"),t=M.createElement("select").appendChild(M.createElement("option"));e.type="checkbox",p.checkOn=""!==e.value,p.optSelected=t.selected,(e=M.createElement("input")).value="t",e.type="radio",p.radioValue="t"===e.value}();var _t,ft=k.expr.attrHandle;k.fn.extend({attr:function(e,t){return V(this,k.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){k.removeAttr(this,e)}))}}),k.extend({attr:function(e,t,n){var a,i,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?k.prop(e,t,n):(1===r&&k.isXMLDoc(e)||(i=k.attrHooks[t.toLowerCase()]||(k.expr.match.bool.test(t)?_t:void 0)),void 0!==n?null===n?void k.removeAttr(e,t):i&&"set"in i&&void 0!==(a=i.set(e,n,t))?a:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(a=i.get(e,t))?a:null==(a=k.find.attr(e,t))?void 0:a)},attrHooks:{type:{set:function(e,t){if(!p.radioValue&&"radio"===t&&S(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,a=0,i=t&&t.match(W);if(i&&1===e.nodeType)for(;n=i[a++];)e.removeAttribute(n)}}),_t={set:function(e,t,n){return!1===t?k.removeAttr(e,n):e.setAttribute(n,n),n}},k.each(k.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=ft[t]||k.find.attr;ft[t]=function(e,t,a){var i,r,s=t.toLowerCase();return a||(r=ft[s],ft[s]=i,i=null!=n(e,t,a)?s:null,ft[s]=r),i}}));var pt=/^(?:input|select|textarea|button)$/i,gt=/^(?:a|area)$/i;function yt(e){return(e.match(W)||[]).join(" ")}function Mt(e){return e.getAttribute&&e.getAttribute("class")||""}function vt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(W)||[]}k.fn.extend({prop:function(e,t){return V(this,k.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[k.propFix[e]||e]}))}}),k.extend({prop:function(e,t,n){var a,i,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&k.isXMLDoc(e)||(t=k.propFix[t]||t,i=k.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(a=i.set(e,n,t))?a:e[t]=n:i&&"get"in i&&null!==(a=i.get(e,t))?a:e[t]},propHooks:{tabIndex:{get:function(e){var t=k.find.attr(e,"tabindex");return t?parseInt(t,10):pt.test(e.nodeName)||gt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),p.optSelected||(k.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),k.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){k.propFix[this.toLowerCase()]=this})),k.fn.extend({addClass:function(e){var t,n,a,i,r,s,o,d=0;if(g(e))return this.each((function(t){k(this).addClass(e.call(this,t,Mt(this)))}));if((t=vt(e)).length)for(;n=this[d++];)if(i=Mt(n),a=1===n.nodeType&&" "+yt(i)+" "){for(s=0;r=t[s++];)a.indexOf(" "+r+" ")<0&&(a+=r+" ");i!==(o=yt(a))&&n.setAttribute("class",o)}return this},removeClass:function(e){var t,n,a,i,r,s,o,d=0;if(g(e))return this.each((function(t){k(this).removeClass(e.call(this,t,Mt(this)))}));if(!arguments.length)return this.attr("class","");if((t=vt(e)).length)for(;n=this[d++];)if(i=Mt(n),a=1===n.nodeType&&" "+yt(i)+" "){for(s=0;r=t[s++];)for(;a.indexOf(" "+r+" ")>-1;)a=a.replace(" "+r+" "," ");i!==(o=yt(a))&&n.setAttribute("class",o)}return this},toggleClass:function(e,t){var n=typeof e,a="string"===n||Array.isArray(e);return"boolean"==typeof t&&a?t?this.addClass(e):this.removeClass(e):g(e)?this.each((function(n){k(this).toggleClass(e.call(this,n,Mt(this),t),t)})):this.each((function(){var t,i,r,s;if(a)for(i=0,r=k(this),s=vt(e);t=s[i++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else void 0!==e&&"boolean"!==n||((t=Mt(this))&&X.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":X.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,a=0;for(t=" "+e+" ";n=this[a++];)if(1===n.nodeType&&(" "+yt(Mt(n))+" ").indexOf(t)>-1)return!0;return!1}});var Lt=/\r/g;k.fn.extend({val:function(e){var t,n,a,i=this[0];return arguments.length?(a=g(e),this.each((function(n){var i;1===this.nodeType&&(null==(i=a?e.call(this,n,k(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=k.map(i,(function(e){return null==e?"":e+""}))),(t=k.valHooks[this.type]||k.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))}))):i?(t=k.valHooks[i.type]||k.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(Lt,""):null==n?"":n:void 0}}),k.extend({valHooks:{option:{get:function(e){var t=k.find.attr(e,"value");return null!=t?t:yt(k.text(e))}},select:{get:function(e){var t,n,a,i=e.options,r=e.selectedIndex,s="select-one"===e.type,o=s?null:[],d=s?r+1:i.length;for(a=r<0?d:s?r:0;a<d;a++)if(((n=i[a]).selected||a===r)&&!n.disabled&&(!n.parentNode.disabled||!S(n.parentNode,"optgroup"))){if(t=k(n).val(),s)return t;o.push(t)}return o},set:function(e,t){for(var n,a,i=e.options,r=k.makeArray(t),s=i.length;s--;)((a=i[s]).selected=k.inArray(k.valHooks.option.get(a),r)>-1)&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),k.each(["radio","checkbox"],(function(){k.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=k.inArray(k(e).val(),t)>-1}},p.checkOn||(k.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),p.focusin="onfocusin"in n;var bt=/^(?:focusinfocus|focusoutblur)$/,kt=function(e){e.stopPropagation()};k.extend(k.event,{trigger:function(e,t,a,i){var r,s,o,d,l,u,c,h,_=[a||M],f=m.call(e,"type")?e.type:e,p=m.call(e,"namespace")?e.namespace.split("."):[];if(s=h=o=a=a||M,3!==a.nodeType&&8!==a.nodeType&&!bt.test(f+k.event.triggered)&&(f.indexOf(".")>-1&&(p=f.split("."),f=p.shift(),p.sort()),l=f.indexOf(":")<0&&"on"+f,(e=e[k.expando]?e:new k.Event(f,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=p.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=a),t=null==t?[e]:k.makeArray(t,[e]),c=k.event.special[f]||{},i||!c.trigger||!1!==c.trigger.apply(a,t))){if(!i&&!c.noBubble&&!y(a)){for(d=c.delegateType||f,bt.test(d+f)||(s=s.parentNode);s;s=s.parentNode)_.push(s),o=s;o===(a.ownerDocument||M)&&_.push(o.defaultView||o.parentWindow||n)}for(r=0;(s=_[r++])&&!e.isPropagationStopped();)h=s,e.type=r>1?d:c.bindType||f,(u=(X.get(s,"events")||Object.create(null))[e.type]&&X.get(s,"handle"))&&u.apply(s,t),(u=l&&s[l])&&u.apply&&G(s)&&(e.result=u.apply(s,t),!1===e.result&&e.preventDefault());return e.type=f,i||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(_.pop(),t)||!G(a)||l&&g(a[f])&&!y(a)&&((o=a[l])&&(a[l]=null),k.event.triggered=f,e.isPropagationStopped()&&h.addEventListener(f,kt),a[f](),e.isPropagationStopped()&&h.removeEventListener(f,kt),k.event.triggered=void 0,o&&(a[l]=o)),e.result}},simulate:function(e,t,n){var a=k.extend(new k.Event,n,{type:e,isSimulated:!0});k.event.trigger(a,null,t)}}),k.fn.extend({trigger:function(e,t){return this.each((function(){k.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return k.event.trigger(e,t,n,!0)}}),p.focusin||k.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){k.event.simulate(t,e.target,k.event.fix(e))};k.event.special[t]={setup:function(){var a=this.ownerDocument||this.document||this,i=X.access(a,t);i||a.addEventListener(e,n,!0),X.access(a,t,(i||0)+1)},teardown:function(){var a=this.ownerDocument||this.document||this,i=X.access(a,t)-1;i?X.access(a,t,i):(a.removeEventListener(e,n,!0),X.remove(a,t))}}}));var Yt=n.location,Dt={guid:Date.now()},wt=/\?/;k.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||k.error("Invalid XML: "+e),t};var xt=/\[\]$/,Tt=/\r?\n/g,St=/^(?:submit|button|image|reset|file)$/i,Ht=/^(?:input|select|textarea|keygen)/i;function jt(e,t,n,a){var i;if(Array.isArray(t))k.each(t,(function(t,i){n||xt.test(e)?a(e,i):jt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,a)}));else if(n||"object"!==b(t))a(e,t);else for(i in t)jt(e+"["+i+"]",t[i],n,a)}k.param=function(e,t){var n,a=[],i=function(e,t){var n=g(t)?t():t;a[a.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!k.isPlainObject(e))k.each(e,(function(){i(this.name,this.value)}));else for(n in e)jt(n,e[n],t,i);return a.join("&")},k.fn.extend({serialize:function(){return k.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=k.prop(this,"elements");return e?k.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!k(this).is(":disabled")&&Ht.test(this.nodeName)&&!St.test(e)&&(this.checked||!fe.test(e))})).map((function(e,t){var n=k(this).val();return null==n?null:Array.isArray(n)?k.map(n,(function(e){return{name:t.name,value:e.replace(Tt,"\r\n")}})):{name:t.name,value:n.replace(Tt,"\r\n")}})).get()}});var Pt=/%20/g,Ct=/#.*$/,At=/([?&])_=[^&]*/,Ot=/^(.*?):[ \t]*([^\r\n]*)$/gm,Et=/^(?:GET|HEAD)$/,Wt=/^\/\//,Ft={},Nt={},It="*/".concat("*"),Rt=M.createElement("a");function zt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var a,i=0,r=t.toLowerCase().match(W)||[];if(g(n))for(;a=r[i++];)"+"===a[0]?(a=a.slice(1)||"*",(e[a]=e[a]||[]).unshift(n)):(e[a]=e[a]||[]).push(n)}}function Bt(e,t,n,a){var i={},r=e===Nt;function s(o){var d;return i[o]=!0,k.each(e[o]||[],(function(e,o){var l=o(t,n,a);return"string"!=typeof l||r||i[l]?r?!(d=l):void 0:(t.dataTypes.unshift(l),s(l),!1)})),d}return s(t.dataTypes[0])||!i["*"]&&s("*")}function Vt(e,t){var n,a,i=k.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:a||(a={}))[n]=t[n]);return a&&k.extend(!0,e,a),e}Rt.href=Yt.href,k.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Yt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Yt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":It,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":k.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Vt(Vt(e,k.ajaxSettings),t):Vt(k.ajaxSettings,e)},ajaxPrefilter:zt(Ft),ajaxTransport:zt(Nt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var a,i,r,s,o,d,l,u,c,h,m=k.ajaxSetup({},t),_=m.context||m,f=m.context&&(_.nodeType||_.jquery)?k(_):k.event,p=k.Deferred(),g=k.Callbacks("once memory"),y=m.statusCode||{},v={},L={},b="canceled",Y={readyState:0,getResponseHeader:function(e){var t;if(l){if(!s)for(s={};t=Ot.exec(r);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return l?r:null},setRequestHeader:function(e,t){return null==l&&(e=L[e.toLowerCase()]=L[e.toLowerCase()]||e,v[e]=t),this},overrideMimeType:function(e){return null==l&&(m.mimeType=e),this},statusCode:function(e){var t;if(e)if(l)Y.always(e[Y.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||b;return a&&a.abort(t),D(0,t),this}};if(p.promise(Y),m.url=((e||m.url||Yt.href)+"").replace(Wt,Yt.protocol+"//"),m.type=t.method||t.type||m.method||m.type,m.dataTypes=(m.dataType||"*").toLowerCase().match(W)||[""],null==m.crossDomain){d=M.createElement("a");try{d.href=m.url,d.href=d.href,m.crossDomain=Rt.protocol+"//"+Rt.host!=d.protocol+"//"+d.host}catch(e){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=k.param(m.data,m.traditional)),Bt(Ft,m,t,Y),l)return Y;for(c in(u=k.event&&m.global)&&0==k.active++&&k.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!Et.test(m.type),i=m.url.replace(Ct,""),m.hasContent?m.data&&m.processData&&0===(m.contentType||"").indexOf("application/x-www-form-urlencoded")&&(m.data=m.data.replace(Pt,"+")):(h=m.url.slice(i.length),m.data&&(m.processData||"string"==typeof m.data)&&(i+=(wt.test(i)?"&":"?")+m.data,delete m.data),!1===m.cache&&(i=i.replace(At,"$1"),h=(wt.test(i)?"&":"?")+"_="+Dt.guid+++h),m.url=i+h),m.ifModified&&(k.lastModified[i]&&Y.setRequestHeader("If-Modified-Since",k.lastModified[i]),k.etag[i]&&Y.setRequestHeader("If-None-Match",k.etag[i])),(m.data&&m.hasContent&&!1!==m.contentType||t.contentType)&&Y.setRequestHeader("Content-Type",m.contentType),Y.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+It+"; q=0.01":""):m.accepts["*"]),m.headers)Y.setRequestHeader(c,m.headers[c]);if(m.beforeSend&&(!1===m.beforeSend.call(_,Y,m)||l))return Y.abort();if(b="abort",g.add(m.complete),Y.done(m.success),Y.fail(m.error),a=Bt(Nt,m,t,Y)){if(Y.readyState=1,u&&f.trigger("ajaxSend",[Y,m]),l)return Y;m.async&&m.timeout>0&&(o=n.setTimeout((function(){Y.abort("timeout")}),m.timeout));try{l=!1,a.send(v,D)}catch(e){if(l)throw e;D(-1,e)}}else D(-1,"No Transport");function D(e,t,s,d){var c,h,M,v,L,b=t;l||(l=!0,o&&n.clearTimeout(o),a=void 0,r=d||"",Y.readyState=e>0?4:0,c=e>=200&&e<300||304===e,s&&(v=function(e,t,n){for(var a,i,r,s,o=e.contents,d=e.dataTypes;"*"===d[0];)d.shift(),void 0===a&&(a=e.mimeType||t.getResponseHeader("Content-Type"));if(a)for(i in o)if(o[i]&&o[i].test(a)){d.unshift(i);break}if(d[0]in n)r=d[0];else{for(i in n){if(!d[0]||e.converters[i+" "+d[0]]){r=i;break}s||(s=i)}r=r||s}if(r)return r!==d[0]&&d.unshift(r),n[r]}(m,Y,s)),!c&&k.inArray("script",m.dataTypes)>-1&&(m.converters["text script"]=function(){}),v=function(e,t,n,a){var i,r,s,o,d,l={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];for(r=u.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!d&&a&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),d=r,r=u.shift())if("*"===r)r=d;else if("*"!==d&&d!==r){if(!(s=l[d+" "+r]||l["* "+r]))for(i in l)if((o=i.split(" "))[1]===r&&(s=l[d+" "+o[0]]||l["* "+o[0]])){!0===s?s=l[i]:!0!==l[i]&&(r=o[0],u.unshift(o[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+d+" to "+r}}}return{state:"success",data:t}}(m,v,Y,c),c?(m.ifModified&&((L=Y.getResponseHeader("Last-Modified"))&&(k.lastModified[i]=L),(L=Y.getResponseHeader("etag"))&&(k.etag[i]=L)),204===e||"HEAD"===m.type?b="nocontent":304===e?b="notmodified":(b=v.state,h=v.data,c=!(M=v.error))):(M=b,!e&&b||(b="error",e<0&&(e=0))),Y.status=e,Y.statusText=(t||b)+"",c?p.resolveWith(_,[h,b,Y]):p.rejectWith(_,[Y,b,M]),Y.statusCode(y),y=void 0,u&&f.trigger(c?"ajaxSuccess":"ajaxError",[Y,m,c?h:M]),g.fireWith(_,[Y,b]),u&&(f.trigger("ajaxComplete",[Y,m]),--k.active||k.event.trigger("ajaxStop")))}return Y},getJSON:function(e,t,n){return k.get(e,t,n,"json")},getScript:function(e,t){return k.get(e,void 0,t,"script")}}),k.each(["get","post"],(function(e,t){k[t]=function(e,n,a,i){return g(n)&&(i=i||a,a=n,n=void 0),k.ajax(k.extend({url:e,type:t,dataType:i,data:n,success:a},k.isPlainObject(e)&&e))}})),k.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),k._evalUrl=function(e,t,n){return k.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){k.globalEval(e,t,n)}})},k.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=k(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return g(e)?this.each((function(t){k(this).wrapInner(e.call(this,t))})):this.each((function(){var t=k(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=g(e);return this.each((function(n){k(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){k(this).replaceWith(this.childNodes)})),this}}),k.expr.pseudos.hidden=function(e){return!k.expr.pseudos.visible(e)},k.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},k.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var qt={0:200,1223:204},Jt=k.ajaxSettings.xhr();p.cors=!!Jt&&"withCredentials"in Jt,p.ajax=Jt=!!Jt,k.ajaxTransport((function(e){var t,a;if(p.cors||Jt&&!e.crossDomain)return{send:function(i,r){var s,o=e.xhr();if(o.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)o[s]=e.xhrFields[s];for(s in e.mimeType&&o.overrideMimeType&&o.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)o.setRequestHeader(s,i[s]);t=function(e){return function(){t&&(t=a=o.onload=o.onerror=o.onabort=o.ontimeout=o.onreadystatechange=null,"abort"===e?o.abort():"error"===e?"number"!=typeof o.status?r(0,"error"):r(o.status,o.statusText):r(qt[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=t(),a=o.onerror=o.ontimeout=t("error"),void 0!==o.onabort?o.onabort=a:o.onreadystatechange=function(){4===o.readyState&&n.setTimeout((function(){t&&a()}))},t=t("abort");try{o.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),k.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),k.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return k.globalEval(e),e}}}),k.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),k.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(a,i){t=k("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),M.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Ut,$t=[],Gt=/(=)\?(?=&|$)|\?\?/;k.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=$t.pop()||k.expando+"_"+Dt.guid++;return this[e]=!0,e}}),k.ajaxPrefilter("json jsonp",(function(e,t,a){var i,r,s,o=!1!==e.jsonp&&(Gt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gt.test(e.data)&&"data");if(o||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=g(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,o?e[o]=e[o].replace(Gt,"$1"+i):!1!==e.jsonp&&(e.url+=(wt.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return s||k.error(i+" was not called"),s[0]},e.dataTypes[0]="json",r=n[i],n[i]=function(){s=arguments},a.always((function(){void 0===r?k(n).removeProp(i):n[i]=r,e[i]&&(e.jsonpCallback=t.jsonpCallback,$t.push(i)),s&&g(r)&&r(s[0]),s=r=void 0})),"script"})),p.createHTMLDocument=((Ut=M.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ut.childNodes.length),k.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(p.createHTMLDocument?((a=(t=M.implementation.createHTMLDocument("")).createElement("base")).href=M.location.href,t.head.appendChild(a)):t=M),r=!n&&[],(i=H.exec(e))?[t.createElement(i[1])]:(i=be([e],t,r),r&&r.length&&k(r).remove(),k.merge([],i.childNodes)));var a,i,r},k.fn.load=function(e,t,n){var a,i,r,s=this,o=e.indexOf(" ");return o>-1&&(a=yt(e.slice(o)),e=e.slice(0,o)),g(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),s.length>0&&k.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done((function(e){r=arguments,s.html(a?k("<div>").append(k.parseHTML(e)).find(a):e)})).always(n&&function(e,t){s.each((function(){n.apply(this,r||[e.responseText,t,e])}))}),this},k.expr.pseudos.animated=function(e){return k.grep(k.timers,(function(t){return e===t.elem})).length},k.offset={setOffset:function(e,t,n){var a,i,r,s,o,d,l=k.css(e,"position"),u=k(e),c={};"static"===l&&(e.style.position="relative"),o=u.offset(),r=k.css(e,"top"),d=k.css(e,"left"),("absolute"===l||"fixed"===l)&&(r+d).indexOf("auto")>-1?(s=(a=u.position()).top,i=a.left):(s=parseFloat(r)||0,i=parseFloat(d)||0),g(t)&&(t=t.call(e,n,k.extend({},o))),null!=t.top&&(c.top=t.top-o.top+s),null!=t.left&&(c.left=t.left-o.left+i),"using"in t?t.using.call(e,c):("number"==typeof c.top&&(c.top+="px"),"number"==typeof c.left&&(c.left+="px"),u.css(c))}},k.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){k.offset.setOffset(this,e,t)}));var t,n,a=this[0];return a?a.getClientRects().length?(t=a.getBoundingClientRect(),n=a.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,a=this[0],i={top:0,left:0};if("fixed"===k.css(a,"position"))t=a.getBoundingClientRect();else{for(t=this.offset(),n=a.ownerDocument,e=a.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===k.css(e,"position");)e=e.parentNode;e&&e!==a&&1===e.nodeType&&((i=k(e).offset()).top+=k.css(e,"borderTopWidth",!0),i.left+=k.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-k.css(a,"marginTop",!0),left:t.left-i.left-k.css(a,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===k.css(e,"position");)e=e.offsetParent;return e||re}))}}),k.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;k.fn[e]=function(a){return V(this,(function(e,a,i){var r;if(y(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===i)return r?r[t]:e[a];r?r.scrollTo(n?r.pageXOffset:i,n?i:r.pageYOffset):e[a]=i}),e,a,arguments.length)}})),k.each(["top","left"],(function(e,t){k.cssHooks[t]=Je(p.pixelPosition,(function(e,n){if(n)return n=qe(e,t),Re.test(n)?k(e).position()[t]+"px":n}))})),k.each({Height:"height",Width:"width"},(function(e,t){k.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,a){k.fn[a]=function(i,r){var s=arguments.length&&(n||"boolean"!=typeof i),o=n||(!0===i||!0===r?"margin":"border");return V(this,(function(t,n,i){var r;return y(t)?0===a.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===i?k.css(t,n,o):k.style(t,n,i,o)}),t,s?i:void 0,s)}}))})),k.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){k.fn[t]=function(e){return this.on(t,e)}})),k.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,a){return this.on(t,e,n,a)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),k.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){k.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Kt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;k.proxy=function(e,t){var n,a,i;if("string"==typeof t&&(n=e[t],t=e,e=n),g(e))return a=o.call(arguments,2),(i=function(){return e.apply(t||this,a.concat(o.call(arguments)))}).guid=e.guid=e.guid||k.guid++,i},k.holdReady=function(e){e?k.readyWait++:k.ready(!0)},k.isArray=Array.isArray,k.parseJSON=JSON.parse,k.nodeName=S,k.isFunction=g,k.isWindow=y,k.camelCase=$,k.type=b,k.now=Date.now,k.isNumeric=function(e){var t=k.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},k.trim=function(e){return null==e?"":(e+"").replace(Kt,"")},void 0===(a=function(){return k}.apply(t,[]))||(e.exports=a);var Xt=n.jQuery,Zt=n.$;return k.noConflict=function(e){return n.$===k&&(n.$=Zt),e&&n.jQuery===k&&(n.jQuery=Xt),k},void 0===i&&(n.jQuery=n.$=k),k}))},function(e,t,n){"use strict";n(174)},function(e,t,n){var a=n(1),i=n(175);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){},function(e,t,n){
/*!
 * Chart.js v2.9.4
 * https://www.chartjs.org
 * (c) 2020 Chart.js Contributors
 * Released under the MIT License
 */
e.exports=function(e){"use strict";e=e&&e.hasOwnProperty("default")?e.default:e;var t={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},n=function(e,t){return e(t={exports:{}},t.exports),t.exports}((function(e){var n={};for(var a in t)t.hasOwnProperty(a)&&(n[t[a]]=a);var i=e.exports={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var r in i)if(i.hasOwnProperty(r)){if(!("channels"in i[r]))throw new Error("missing channels property: "+r);if(!("labels"in i[r]))throw new Error("missing channel labels property: "+r);if(i[r].labels.length!==i[r].channels)throw new Error("channel and label counts mismatch: "+r);var s=i[r].channels,o=i[r].labels;delete i[r].channels,delete i[r].labels,Object.defineProperty(i[r],"channels",{value:s}),Object.defineProperty(i[r],"labels",{value:o})}i.rgb.hsl=function(e){var t,n,a=e[0]/255,i=e[1]/255,r=e[2]/255,s=Math.min(a,i,r),o=Math.max(a,i,r),d=o-s;return o===s?t=0:a===o?t=(i-r)/d:i===o?t=2+(r-a)/d:r===o&&(t=4+(a-i)/d),(t=Math.min(60*t,360))<0&&(t+=360),n=(s+o)/2,[t,100*(o===s?0:n<=.5?d/(o+s):d/(2-o-s)),100*n]},i.rgb.hsv=function(e){var t,n,a,i,r,s=e[0]/255,o=e[1]/255,d=e[2]/255,l=Math.max(s,o,d),u=l-Math.min(s,o,d),c=function(e){return(l-e)/6/u+.5};return 0===u?i=r=0:(r=u/l,t=c(s),n=c(o),a=c(d),s===l?i=a-n:o===l?i=1/3+t-a:d===l&&(i=2/3+n-t),i<0?i+=1:i>1&&(i-=1)),[360*i,100*r,100*l]},i.rgb.hwb=function(e){var t=e[0],n=e[1],a=e[2];return[i.rgb.hsl(e)[0],1/255*Math.min(t,Math.min(n,a))*100,100*(a=1-1/255*Math.max(t,Math.max(n,a)))]},i.rgb.cmyk=function(e){var t,n=e[0]/255,a=e[1]/255,i=e[2]/255;return[100*((1-n-(t=Math.min(1-n,1-a,1-i)))/(1-t)||0),100*((1-a-t)/(1-t)||0),100*((1-i-t)/(1-t)||0),100*t]},i.rgb.keyword=function(e){var a=n[e];if(a)return a;var i,r,s,o=1/0;for(var d in t)if(t.hasOwnProperty(d)){var l=t[d],u=(r=e,s=l,Math.pow(r[0]-s[0],2)+Math.pow(r[1]-s[1],2)+Math.pow(r[2]-s[2],2));u<o&&(o=u,i=d)}return i},i.keyword.rgb=function(e){return t[e]},i.rgb.xyz=function(e){var t=e[0]/255,n=e[1]/255,a=e[2]/255;return[100*(.4124*(t=t>.04045?Math.pow((t+.055)/1.055,2.4):t/12.92)+.3576*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)+.1805*(a=a>.04045?Math.pow((a+.055)/1.055,2.4):a/12.92)),100*(.2126*t+.7152*n+.0722*a),100*(.0193*t+.1192*n+.9505*a)]},i.rgb.lab=function(e){var t=i.rgb.xyz(e),n=t[0],a=t[1],r=t[2];return a/=100,r/=108.883,n=(n/=95.047)>.008856?Math.pow(n,1/3):7.787*n+16/116,[116*(a=a>.008856?Math.pow(a,1/3):7.787*a+16/116)-16,500*(n-a),200*(a-(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116))]},i.hsl.rgb=function(e){var t,n,a,i,r,s=e[0]/360,o=e[1]/100,d=e[2]/100;if(0===o)return[r=255*d,r,r];t=2*d-(n=d<.5?d*(1+o):d+o-d*o),i=[0,0,0];for(var l=0;l<3;l++)(a=s+1/3*-(l-1))<0&&a++,a>1&&a--,r=6*a<1?t+6*(n-t)*a:2*a<1?n:3*a<2?t+(n-t)*(2/3-a)*6:t,i[l]=255*r;return i},i.hsl.hsv=function(e){var t=e[0],n=e[1]/100,a=e[2]/100,i=n,r=Math.max(a,.01);return n*=(a*=2)<=1?a:2-a,i*=r<=1?r:2-r,[t,100*(0===a?2*i/(r+i):2*n/(a+n)),(a+n)/2*100]},i.hsv.rgb=function(e){var t=e[0]/60,n=e[1]/100,a=e[2]/100,i=Math.floor(t)%6,r=t-Math.floor(t),s=255*a*(1-n),o=255*a*(1-n*r),d=255*a*(1-n*(1-r));switch(a*=255,i){case 0:return[a,d,s];case 1:return[o,a,s];case 2:return[s,a,d];case 3:return[s,o,a];case 4:return[d,s,a];case 5:return[a,s,o]}},i.hsv.hsl=function(e){var t,n,a,i=e[0],r=e[1]/100,s=e[2]/100,o=Math.max(s,.01);return a=(2-r)*s,n=r*o,[i,100*(n=(n/=(t=(2-r)*o)<=1?t:2-t)||0),100*(a/=2)]},i.hwb.rgb=function(e){var t,n,a,i,r,s,o,d=e[0]/360,l=e[1]/100,u=e[2]/100,c=l+u;switch(c>1&&(l/=c,u/=c),a=6*d-(t=Math.floor(6*d)),0!=(1&t)&&(a=1-a),i=l+a*((n=1-u)-l),t){default:case 6:case 0:r=n,s=i,o=l;break;case 1:r=i,s=n,o=l;break;case 2:r=l,s=n,o=i;break;case 3:r=l,s=i,o=n;break;case 4:r=i,s=l,o=n;break;case 5:r=n,s=l,o=i}return[255*r,255*s,255*o]},i.cmyk.rgb=function(e){var t=e[0]/100,n=e[1]/100,a=e[2]/100,i=e[3]/100;return[255*(1-Math.min(1,t*(1-i)+i)),255*(1-Math.min(1,n*(1-i)+i)),255*(1-Math.min(1,a*(1-i)+i))]},i.xyz.rgb=function(e){var t,n,a,i=e[0]/100,r=e[1]/100,s=e[2]/100;return n=-.9689*i+1.8758*r+.0415*s,a=.0557*i+-.204*r+1.057*s,t=(t=3.2406*i+-1.5372*r+-.4986*s)>.0031308?1.055*Math.pow(t,1/2.4)-.055:12.92*t,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:12.92*n,a=a>.0031308?1.055*Math.pow(a,1/2.4)-.055:12.92*a,[255*(t=Math.min(Math.max(0,t),1)),255*(n=Math.min(Math.max(0,n),1)),255*(a=Math.min(Math.max(0,a),1))]},i.xyz.lab=function(e){var t=e[0],n=e[1],a=e[2];return n/=100,a/=108.883,t=(t/=95.047)>.008856?Math.pow(t,1/3):7.787*t+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(t-n),200*(n-(a=a>.008856?Math.pow(a,1/3):7.787*a+16/116))]},i.lab.xyz=function(e){var t,n,a,i=e[0];t=e[1]/500+(n=(i+16)/116),a=n-e[2]/200;var r=Math.pow(n,3),s=Math.pow(t,3),o=Math.pow(a,3);return n=r>.008856?r:(n-16/116)/7.787,t=s>.008856?s:(t-16/116)/7.787,a=o>.008856?o:(a-16/116)/7.787,[t*=95.047,n*=100,a*=108.883]},i.lab.lch=function(e){var t,n=e[0],a=e[1],i=e[2];return(t=360*Math.atan2(i,a)/2/Math.PI)<0&&(t+=360),[n,Math.sqrt(a*a+i*i),t]},i.lch.lab=function(e){var t,n=e[0],a=e[1];return t=e[2]/360*2*Math.PI,[n,a*Math.cos(t),a*Math.sin(t)]},i.rgb.ansi16=function(e){var t=e[0],n=e[1],a=e[2],r=1 in arguments?arguments[1]:i.rgb.hsv(e)[2];if(0===(r=Math.round(r/50)))return 30;var s=30+(Math.round(a/255)<<2|Math.round(n/255)<<1|Math.round(t/255));return 2===r&&(s+=60),s},i.hsv.ansi16=function(e){return i.rgb.ansi16(i.hsv.rgb(e),e[2])},i.rgb.ansi256=function(e){var t=e[0],n=e[1],a=e[2];return t===n&&n===a?t<8?16:t>248?231:Math.round((t-8)/247*24)+232:16+36*Math.round(t/255*5)+6*Math.round(n/255*5)+Math.round(a/255*5)},i.ansi16.rgb=function(e){var t=e%10;if(0===t||7===t)return e>50&&(t+=3.5),[t=t/10.5*255,t,t];var n=.5*(1+~~(e>50));return[(1&t)*n*255,(t>>1&1)*n*255,(t>>2&1)*n*255]},i.ansi256.rgb=function(e){if(e>=232){var t=10*(e-232)+8;return[t,t,t]}var n;return e-=16,[Math.floor(e/36)/5*255,Math.floor((n=e%36)/6)/5*255,n%6/5*255]},i.rgb.hex=function(e){var t=(((255&Math.round(e[0]))<<16)+((255&Math.round(e[1]))<<8)+(255&Math.round(e[2]))).toString(16).toUpperCase();return"000000".substring(t.length)+t},i.hex.rgb=function(e){var t=e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!t)return[0,0,0];var n=t[0];3===t[0].length&&(n=n.split("").map((function(e){return e+e})).join(""));var a=parseInt(n,16);return[a>>16&255,a>>8&255,255&a]},i.rgb.hcg=function(e){var t,n=e[0]/255,a=e[1]/255,i=e[2]/255,r=Math.max(Math.max(n,a),i),s=Math.min(Math.min(n,a),i),o=r-s;return t=o<=0?0:r===n?(a-i)/o%6:r===a?2+(i-n)/o:4+(n-a)/o+4,t/=6,[360*(t%=1),100*o,100*(o<1?s/(1-o):0)]},i.hsl.hcg=function(e){var t=e[1]/100,n=e[2]/100,a=1,i=0;return(a=n<.5?2*t*n:2*t*(1-n))<1&&(i=(n-.5*a)/(1-a)),[e[0],100*a,100*i]},i.hsv.hcg=function(e){var t=e[1]/100,n=e[2]/100,a=t*n,i=0;return a<1&&(i=(n-a)/(1-a)),[e[0],100*a,100*i]},i.hcg.rgb=function(e){var t=e[0]/360,n=e[1]/100,a=e[2]/100;if(0===n)return[255*a,255*a,255*a];var i,r=[0,0,0],s=t%1*6,o=s%1,d=1-o;switch(Math.floor(s)){case 0:r[0]=1,r[1]=o,r[2]=0;break;case 1:r[0]=d,r[1]=1,r[2]=0;break;case 2:r[0]=0,r[1]=1,r[2]=o;break;case 3:r[0]=0,r[1]=d,r[2]=1;break;case 4:r[0]=o,r[1]=0,r[2]=1;break;default:r[0]=1,r[1]=0,r[2]=d}return i=(1-n)*a,[255*(n*r[0]+i),255*(n*r[1]+i),255*(n*r[2]+i)]},i.hcg.hsv=function(e){var t=e[1]/100,n=t+e[2]/100*(1-t),a=0;return n>0&&(a=t/n),[e[0],100*a,100*n]},i.hcg.hsl=function(e){var t=e[1]/100,n=e[2]/100*(1-t)+.5*t,a=0;return n>0&&n<.5?a=t/(2*n):n>=.5&&n<1&&(a=t/(2*(1-n))),[e[0],100*a,100*n]},i.hcg.hwb=function(e){var t=e[1]/100,n=t+e[2]/100*(1-t);return[e[0],100*(n-t),100*(1-n)]},i.hwb.hcg=function(e){var t=e[1]/100,n=1-e[2]/100,a=n-t,i=0;return a<1&&(i=(n-a)/(1-a)),[e[0],100*a,100*i]},i.apple.rgb=function(e){return[e[0]/65535*255,e[1]/65535*255,e[2]/65535*255]},i.rgb.apple=function(e){return[e[0]/255*65535,e[1]/255*65535,e[2]/255*65535]},i.gray.rgb=function(e){return[e[0]/100*255,e[0]/100*255,e[0]/100*255]},i.gray.hsl=i.gray.hsv=function(e){return[0,0,e[0]]},i.gray.hwb=function(e){return[0,100,e[0]]},i.gray.cmyk=function(e){return[0,0,0,e[0]]},i.gray.lab=function(e){return[e[0],0,0]},i.gray.hex=function(e){var t=255&Math.round(e[0]/100*255),n=((t<<16)+(t<<8)+t).toString(16).toUpperCase();return"000000".substring(n.length)+n},i.rgb.gray=function(e){return[(e[0]+e[1]+e[2])/3/255*100]}}));function a(e){var t=function(){for(var e={},t=Object.keys(n),a=t.length,i=0;i<a;i++)e[t[i]]={distance:-1,parent:null};return e}(),a=[e];for(t[e].distance=0;a.length;)for(var i=a.pop(),r=Object.keys(n[i]),s=r.length,o=0;o<s;o++){var d=r[o],l=t[d];-1===l.distance&&(l.distance=t[i].distance+1,l.parent=i,a.unshift(d))}return t}function i(e,t){return function(n){return t(e(n))}}function r(e,t){for(var a=[t[e].parent,e],r=n[t[e].parent][e],s=t[e].parent;t[s].parent;)a.unshift(t[s].parent),r=i(n[t[s].parent][s],r),s=t[s].parent;return r.conversion=a,r}n.rgb,n.hsl,n.hsv,n.hwb,n.cmyk,n.xyz,n.lab,n.lch,n.hex,n.keyword,n.ansi16,n.ansi256,n.hcg,n.apple,n.gray;var s={};Object.keys(n).forEach((function(e){s[e]={},Object.defineProperty(s[e],"channels",{value:n[e].channels}),Object.defineProperty(s[e],"labels",{value:n[e].labels});var t=function(e){for(var t=a(e),n={},i=Object.keys(t),s=i.length,o=0;o<s;o++){var d=i[o];null!==t[d].parent&&(n[d]=r(d,t))}return n}(e);Object.keys(t).forEach((function(n){var a=t[n];s[e][n]=function(e){var t=function(t){if(null==t)return t;arguments.length>1&&(t=Array.prototype.slice.call(arguments));var n=e(t);if("object"==typeof n)for(var a=n.length,i=0;i<a;i++)n[i]=Math.round(n[i]);return n};return"conversion"in e&&(t.conversion=e.conversion),t}(a),s[e][n].raw=function(e){var t=function(t){return null==t?t:(arguments.length>1&&(t=Array.prototype.slice.call(arguments)),e(t))};return"conversion"in e&&(t.conversion=e.conversion),t}(a)}))}));var o=s,d={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},l={getRgba:u,getHsla:c,getRgb:function(e){var t=u(e);return t&&t.slice(0,3)},getHsl:function(e){var t=c(e);return t&&t.slice(0,3)},getHwb:h,getAlpha:function(e){var t=u(e);return t||(t=c(e))||(t=h(e))?t[3]:void 0},hexString:function(e,t){return t=void 0!==t&&3===e.length?t:e[3],"#"+g(e[0])+g(e[1])+g(e[2])+(t>=0&&t<1?g(Math.round(255*t)):"")},rgbString:function(e,t){return t<1||e[3]&&e[3]<1?m(e,t):"rgb("+e[0]+", "+e[1]+", "+e[2]+")"},rgbaString:m,percentString:function(e,t){if(t<1||e[3]&&e[3]<1)return _(e,t);var n=Math.round(e[0]/255*100),a=Math.round(e[1]/255*100),i=Math.round(e[2]/255*100);return"rgb("+n+"%, "+a+"%, "+i+"%)"},percentaString:_,hslString:function(e,t){return t<1||e[3]&&e[3]<1?f(e,t):"hsl("+e[0]+", "+e[1]+"%, "+e[2]+"%)"},hslaString:f,hwbString:function(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"hwb("+e[0]+", "+e[1]+"%, "+e[2]+"%"+(void 0!==t&&1!==t?", "+t:"")+")"},keyword:function(e){return y[e.slice(0,3)]}};function u(e){if(e){var t=[0,0,0],n=1,a=e.match(/^#([a-fA-F0-9]{3,4})$/i),i="";if(a){i=(a=a[1])[3];for(var r=0;r<t.length;r++)t[r]=parseInt(a[r]+a[r],16);i&&(n=Math.round(parseInt(i+i,16)/255*100)/100)}else if(a=e.match(/^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i)){for(i=a[2],a=a[1],r=0;r<t.length;r++)t[r]=parseInt(a.slice(2*r,2*r+2),16);i&&(n=Math.round(parseInt(i,16)/255*100)/100)}else if(a=e.match(/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(r=0;r<t.length;r++)t[r]=parseInt(a[r+1]);n=parseFloat(a[4])}else if(a=e.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(r=0;r<t.length;r++)t[r]=Math.round(2.55*parseFloat(a[r+1]));n=parseFloat(a[4])}else if(a=e.match(/(\w+)/)){if("transparent"==a[1])return[0,0,0,0];if(!(t=d[a[1]]))return}for(r=0;r<t.length;r++)t[r]=p(t[r],0,255);return n=n||0==n?p(n,0,1):1,t[3]=n,t}}function c(e){if(e){var t=e.match(/^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(t){var n=parseFloat(t[4]);return[p(parseInt(t[1]),0,360),p(parseFloat(t[2]),0,100),p(parseFloat(t[3]),0,100),p(isNaN(n)?1:n,0,1)]}}}function h(e){if(e){var t=e.match(/^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(t){var n=parseFloat(t[4]);return[p(parseInt(t[1]),0,360),p(parseFloat(t[2]),0,100),p(parseFloat(t[3]),0,100),p(isNaN(n)?1:n,0,1)]}}}function m(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"rgba("+e[0]+", "+e[1]+", "+e[2]+", "+t+")"}function _(e,t){return"rgba("+Math.round(e[0]/255*100)+"%, "+Math.round(e[1]/255*100)+"%, "+Math.round(e[2]/255*100)+"%, "+(t||e[3]||1)+")"}function f(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"hsla("+e[0]+", "+e[1]+"%, "+e[2]+"%, "+t+")"}function p(e,t,n){return Math.min(Math.max(t,e),n)}function g(e){var t=e.toString(16).toUpperCase();return t.length<2?"0"+t:t}var y={};for(var M in d)y[d[M]]=M;var v=function(e){return e instanceof v?e:this instanceof v?(this.valid=!1,this.values={rgb:[0,0,0],hsl:[0,0,0],hsv:[0,0,0],hwb:[0,0,0],cmyk:[0,0,0,0],alpha:1},void("string"==typeof e?(t=l.getRgba(e))?this.setValues("rgb",t):(t=l.getHsla(e))?this.setValues("hsl",t):(t=l.getHwb(e))&&this.setValues("hwb",t):"object"==typeof e&&(void 0!==(t=e).r||void 0!==t.red?this.setValues("rgb",t):void 0!==t.l||void 0!==t.lightness?this.setValues("hsl",t):void 0!==t.v||void 0!==t.value?this.setValues("hsv",t):void 0!==t.w||void 0!==t.whiteness?this.setValues("hwb",t):void 0===t.c&&void 0===t.cyan||this.setValues("cmyk",t)))):new v(e);var t};v.prototype={isValid:function(){return this.valid},rgb:function(){return this.setSpace("rgb",arguments)},hsl:function(){return this.setSpace("hsl",arguments)},hsv:function(){return this.setSpace("hsv",arguments)},hwb:function(){return this.setSpace("hwb",arguments)},cmyk:function(){return this.setSpace("cmyk",arguments)},rgbArray:function(){return this.values.rgb},hslArray:function(){return this.values.hsl},hsvArray:function(){return this.values.hsv},hwbArray:function(){var e=this.values;return 1!==e.alpha?e.hwb.concat([e.alpha]):e.hwb},cmykArray:function(){return this.values.cmyk},rgbaArray:function(){var e=this.values;return e.rgb.concat([e.alpha])},hslaArray:function(){var e=this.values;return e.hsl.concat([e.alpha])},alpha:function(e){return void 0===e?this.values.alpha:(this.setValues("alpha",e),this)},red:function(e){return this.setChannel("rgb",0,e)},green:function(e){return this.setChannel("rgb",1,e)},blue:function(e){return this.setChannel("rgb",2,e)},hue:function(e){return e&&(e=(e%=360)<0?360+e:e),this.setChannel("hsl",0,e)},saturation:function(e){return this.setChannel("hsl",1,e)},lightness:function(e){return this.setChannel("hsl",2,e)},saturationv:function(e){return this.setChannel("hsv",1,e)},whiteness:function(e){return this.setChannel("hwb",1,e)},blackness:function(e){return this.setChannel("hwb",2,e)},value:function(e){return this.setChannel("hsv",2,e)},cyan:function(e){return this.setChannel("cmyk",0,e)},magenta:function(e){return this.setChannel("cmyk",1,e)},yellow:function(e){return this.setChannel("cmyk",2,e)},black:function(e){return this.setChannel("cmyk",3,e)},hexString:function(){return l.hexString(this.values.rgb)},rgbString:function(){return l.rgbString(this.values.rgb,this.values.alpha)},rgbaString:function(){return l.rgbaString(this.values.rgb,this.values.alpha)},percentString:function(){return l.percentString(this.values.rgb,this.values.alpha)},hslString:function(){return l.hslString(this.values.hsl,this.values.alpha)},hslaString:function(){return l.hslaString(this.values.hsl,this.values.alpha)},hwbString:function(){return l.hwbString(this.values.hwb,this.values.alpha)},keyword:function(){return l.keyword(this.values.rgb,this.values.alpha)},rgbNumber:function(){var e=this.values.rgb;return e[0]<<16|e[1]<<8|e[2]},luminosity:function(){for(var e=this.values.rgb,t=[],n=0;n<e.length;n++){var a=e[n]/255;t[n]=a<=.03928?a/12.92:Math.pow((a+.055)/1.055,2.4)}return.2126*t[0]+.7152*t[1]+.0722*t[2]},contrast:function(e){var t=this.luminosity(),n=e.luminosity();return t>n?(t+.05)/(n+.05):(n+.05)/(t+.05)},level:function(e){var t=this.contrast(e);return t>=7.1?"AAA":t>=4.5?"AA":""},dark:function(){var e=this.values.rgb;return(299*e[0]+587*e[1]+114*e[2])/1e3<128},light:function(){return!this.dark()},negate:function(){for(var e=[],t=0;t<3;t++)e[t]=255-this.values.rgb[t];return this.setValues("rgb",e),this},lighten:function(e){var t=this.values.hsl;return t[2]+=t[2]*e,this.setValues("hsl",t),this},darken:function(e){var t=this.values.hsl;return t[2]-=t[2]*e,this.setValues("hsl",t),this},saturate:function(e){var t=this.values.hsl;return t[1]+=t[1]*e,this.setValues("hsl",t),this},desaturate:function(e){var t=this.values.hsl;return t[1]-=t[1]*e,this.setValues("hsl",t),this},whiten:function(e){var t=this.values.hwb;return t[1]+=t[1]*e,this.setValues("hwb",t),this},blacken:function(e){var t=this.values.hwb;return t[2]+=t[2]*e,this.setValues("hwb",t),this},greyscale:function(){var e=this.values.rgb,t=.3*e[0]+.59*e[1]+.11*e[2];return this.setValues("rgb",[t,t,t]),this},clearer:function(e){var t=this.values.alpha;return this.setValues("alpha",t-t*e),this},opaquer:function(e){var t=this.values.alpha;return this.setValues("alpha",t+t*e),this},rotate:function(e){var t=this.values.hsl,n=(t[0]+e)%360;return t[0]=n<0?360+n:n,this.setValues("hsl",t),this},mix:function(e,t){var n=e,a=void 0===t?.5:t,i=2*a-1,r=this.alpha()-n.alpha(),s=((i*r==-1?i:(i+r)/(1+i*r))+1)/2,o=1-s;return this.rgb(s*this.red()+o*n.red(),s*this.green()+o*n.green(),s*this.blue()+o*n.blue()).alpha(this.alpha()*a+n.alpha()*(1-a))},toJSON:function(){return this.rgb()},clone:function(){var e,t,n=new v,a=this.values,i=n.values;for(var r in a)a.hasOwnProperty(r)&&(e=a[r],"[object Array]"===(t={}.toString.call(e))?i[r]=e.slice(0):"[object Number]"===t?i[r]=e:console.error("unexpected color value:",e));return n}},v.prototype.spaces={rgb:["red","green","blue"],hsl:["hue","saturation","lightness"],hsv:["hue","saturation","value"],hwb:["hue","whiteness","blackness"],cmyk:["cyan","magenta","yellow","black"]},v.prototype.maxes={rgb:[255,255,255],hsl:[360,100,100],hsv:[360,100,100],hwb:[360,100,100],cmyk:[100,100,100,100]},v.prototype.getValues=function(e){for(var t=this.values,n={},a=0;a<e.length;a++)n[e.charAt(a)]=t[e][a];return 1!==t.alpha&&(n.a=t.alpha),n},v.prototype.setValues=function(e,t){var n,a,i=this.values,r=this.spaces,s=this.maxes,d=1;if(this.valid=!0,"alpha"===e)d=t;else if(t.length)i[e]=t.slice(0,e.length),d=t[e.length];else if(void 0!==t[e.charAt(0)]){for(n=0;n<e.length;n++)i[e][n]=t[e.charAt(n)];d=t.a}else if(void 0!==t[r[e][0]]){var l=r[e];for(n=0;n<e.length;n++)i[e][n]=t[l[n]];d=t.alpha}if(i.alpha=Math.max(0,Math.min(1,void 0===d?i.alpha:d)),"alpha"===e)return!1;for(n=0;n<e.length;n++)a=Math.max(0,Math.min(s[e][n],i[e][n])),i[e][n]=Math.round(a);for(var u in r)u!==e&&(i[u]=o[e][u](i[e]));return!0},v.prototype.setSpace=function(e,t){var n=t[0];return void 0===n?this.getValues(e):("number"==typeof n&&(n=Array.prototype.slice.call(t)),this.setValues(e,n),this)},v.prototype.setChannel=function(e,t,n){var a=this.values[e];return void 0===n?a[t]:(n===a[t]||(a[t]=n,this.setValues(e,a)),this)},"undefined"!=typeof window&&(window.Color=v);var L=v;function b(e){return-1===["__proto__","prototype","constructor"].indexOf(e)}var k,Y={noop:function(){},uid:(k=0,function(){return k++}),isNullOrUndef:function(e){return null==e},isArray:function(e){if(Array.isArray&&Array.isArray(e))return!0;var t=Object.prototype.toString.call(e);return"[object"===t.substr(0,7)&&"Array]"===t.substr(-6)},isObject:function(e){return null!==e&&"[object Object]"===Object.prototype.toString.call(e)},isFinite:function(e){return("number"==typeof e||e instanceof Number)&&isFinite(e)},valueOrDefault:function(e,t){return void 0===e?t:e},valueAtIndexOrDefault:function(e,t,n){return Y.valueOrDefault(Y.isArray(e)?e[t]:e,n)},callback:function(e,t,n){if(e&&"function"==typeof e.call)return e.apply(n,t)},each:function(e,t,n,a){var i,r,s;if(Y.isArray(e))if(r=e.length,a)for(i=r-1;i>=0;i--)t.call(n,e[i],i);else for(i=0;i<r;i++)t.call(n,e[i],i);else if(Y.isObject(e))for(r=(s=Object.keys(e)).length,i=0;i<r;i++)t.call(n,e[s[i]],s[i])},arrayEquals:function(e,t){var n,a,i,r;if(!e||!t||e.length!==t.length)return!1;for(n=0,a=e.length;n<a;++n)if(i=e[n],r=t[n],i instanceof Array&&r instanceof Array){if(!Y.arrayEquals(i,r))return!1}else if(i!==r)return!1;return!0},clone:function(e){if(Y.isArray(e))return e.map(Y.clone);if(Y.isObject(e)){for(var t=Object.create(e),n=Object.keys(e),a=n.length,i=0;i<a;++i)t[n[i]]=Y.clone(e[n[i]]);return t}return e},_merger:function(e,t,n,a){if(b(e)){var i=t[e],r=n[e];Y.isObject(i)&&Y.isObject(r)?Y.merge(i,r,a):t[e]=Y.clone(r)}},_mergerIf:function(e,t,n){if(b(e)){var a=t[e],i=n[e];Y.isObject(a)&&Y.isObject(i)?Y.mergeIf(a,i):t.hasOwnProperty(e)||(t[e]=Y.clone(i))}},merge:function(e,t,n){var a,i,r,s,o,d=Y.isArray(t)?t:[t],l=d.length;if(!Y.isObject(e))return e;for(a=(n=n||{}).merger||Y._merger,i=0;i<l;++i)if(t=d[i],Y.isObject(t))for(o=0,s=(r=Object.keys(t)).length;o<s;++o)a(r[o],e,t,n);return e},mergeIf:function(e,t){return Y.merge(e,t,{merger:Y._mergerIf})},extend:Object.assign||function(e){return Y.merge(e,[].slice.call(arguments,1),{merger:function(e,t,n){t[e]=n[e]}})},inherits:function(e){var t=this,n=e&&e.hasOwnProperty("constructor")?e.constructor:function(){return t.apply(this,arguments)},a=function(){this.constructor=n};return a.prototype=t.prototype,n.prototype=new a,n.extend=Y.inherits,e&&Y.extend(n.prototype,e),n.__super__=t.prototype,n},_deprecated:function(e,t,n,a){void 0!==t&&console.warn(e+': "'+n+'" is deprecated. Please use "'+a+'" instead')}},D=Y;Y.callCallback=Y.callback,Y.indexOf=function(e,t,n){return Array.prototype.indexOf.call(e,t,n)},Y.getValueOrDefault=Y.valueOrDefault,Y.getValueAtIndexOrDefault=Y.valueAtIndexOrDefault;var w={linear:function(e){return e},easeInQuad:function(e){return e*e},easeOutQuad:function(e){return-e*(e-2)},easeInOutQuad:function(e){return(e/=.5)<1?.5*e*e:-.5*(--e*(e-2)-1)},easeInCubic:function(e){return e*e*e},easeOutCubic:function(e){return(e-=1)*e*e+1},easeInOutCubic:function(e){return(e/=.5)<1?.5*e*e*e:.5*((e-=2)*e*e+2)},easeInQuart:function(e){return e*e*e*e},easeOutQuart:function(e){return-((e-=1)*e*e*e-1)},easeInOutQuart:function(e){return(e/=.5)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2)},easeInQuint:function(e){return e*e*e*e*e},easeOutQuint:function(e){return(e-=1)*e*e*e*e+1},easeInOutQuint:function(e){return(e/=.5)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2)},easeInSine:function(e){return 1-Math.cos(e*(Math.PI/2))},easeOutSine:function(e){return Math.sin(e*(Math.PI/2))},easeInOutSine:function(e){return-.5*(Math.cos(Math.PI*e)-1)},easeInExpo:function(e){return 0===e?0:Math.pow(2,10*(e-1))},easeOutExpo:function(e){return 1===e?1:1-Math.pow(2,-10*e)},easeInOutExpo:function(e){return 0===e?0:1===e?1:(e/=.5)<1?.5*Math.pow(2,10*(e-1)):.5*(2-Math.pow(2,-10*--e))},easeInCirc:function(e){return e>=1?e:-(Math.sqrt(1-e*e)-1)},easeOutCirc:function(e){return Math.sqrt(1-(e-=1)*e)},easeInOutCirc:function(e){return(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)},easeInElastic:function(e){var t=1.70158,n=0,a=1;return 0===e?0:1===e?1:(n||(n=.3),a<1?(a=1,t=n/4):t=n/(2*Math.PI)*Math.asin(1/a),-a*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/n))},easeOutElastic:function(e){var t=1.70158,n=0,a=1;return 0===e?0:1===e?1:(n||(n=.3),a<1?(a=1,t=n/4):t=n/(2*Math.PI)*Math.asin(1/a),a*Math.pow(2,-10*e)*Math.sin((e-t)*(2*Math.PI)/n)+1)},easeInOutElastic:function(e){var t=1.70158,n=0,a=1;return 0===e?0:2==(e/=.5)?1:(n||(n=.45),a<1?(a=1,t=n/4):t=n/(2*Math.PI)*Math.asin(1/a),e<1?a*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/n)*-.5:a*Math.pow(2,-10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/n)*.5+1)},easeInBack:function(e){var t=1.70158;return e*e*((t+1)*e-t)},easeOutBack:function(e){var t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},easeInOutBack:function(e){var t=1.70158;return(e/=.5)<1?e*e*((1+(t*=1.525))*e-t)*.5:.5*((e-=2)*e*((1+(t*=1.525))*e+t)+2)},easeInBounce:function(e){return 1-w.easeOutBounce(1-e)},easeOutBounce:function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},easeInOutBounce:function(e){return e<.5?.5*w.easeInBounce(2*e):.5*w.easeOutBounce(2*e-1)+.5}},x={effects:w};D.easingEffects=w;var T=Math.PI,S=T/180,H=2*T,j=T/2,P=T/4,C=2*T/3,A={clear:function(e){e.ctx.clearRect(0,0,e.width,e.height)},roundedRect:function(e,t,n,a,i,r){if(r){var s=Math.min(r,i/2,a/2),o=t+s,d=n+s,l=t+a-s,u=n+i-s;e.moveTo(t,d),o<l&&d<u?(e.arc(o,d,s,-T,-j),e.arc(l,d,s,-j,0),e.arc(l,u,s,0,j),e.arc(o,u,s,j,T)):o<l?(e.moveTo(o,n),e.arc(l,d,s,-j,j),e.arc(o,d,s,j,T+j)):d<u?(e.arc(o,d,s,-T,0),e.arc(o,u,s,0,T)):e.arc(o,d,s,-T,T),e.closePath(),e.moveTo(t,n)}else e.rect(t,n,a,i)},drawPoint:function(e,t,n,a,i,r){var s,o,d,l,u,c=(r||0)*S;if(t&&"object"==typeof t&&("[object HTMLImageElement]"===(s=t.toString())||"[object HTMLCanvasElement]"===s))return e.save(),e.translate(a,i),e.rotate(c),e.drawImage(t,-t.width/2,-t.height/2,t.width,t.height),void e.restore();if(!(isNaN(n)||n<=0)){switch(e.beginPath(),t){default:e.arc(a,i,n,0,H),e.closePath();break;case"triangle":e.moveTo(a+Math.sin(c)*n,i-Math.cos(c)*n),c+=C,e.lineTo(a+Math.sin(c)*n,i-Math.cos(c)*n),c+=C,e.lineTo(a+Math.sin(c)*n,i-Math.cos(c)*n),e.closePath();break;case"rectRounded":l=n-(u=.516*n),o=Math.cos(c+P)*l,d=Math.sin(c+P)*l,e.arc(a-o,i-d,u,c-T,c-j),e.arc(a+d,i-o,u,c-j,c),e.arc(a+o,i+d,u,c,c+j),e.arc(a-d,i+o,u,c+j,c+T),e.closePath();break;case"rect":if(!r){l=Math.SQRT1_2*n,e.rect(a-l,i-l,2*l,2*l);break}c+=P;case"rectRot":o=Math.cos(c)*n,d=Math.sin(c)*n,e.moveTo(a-o,i-d),e.lineTo(a+d,i-o),e.lineTo(a+o,i+d),e.lineTo(a-d,i+o),e.closePath();break;case"crossRot":c+=P;case"cross":o=Math.cos(c)*n,d=Math.sin(c)*n,e.moveTo(a-o,i-d),e.lineTo(a+o,i+d),e.moveTo(a+d,i-o),e.lineTo(a-d,i+o);break;case"star":o=Math.cos(c)*n,d=Math.sin(c)*n,e.moveTo(a-o,i-d),e.lineTo(a+o,i+d),e.moveTo(a+d,i-o),e.lineTo(a-d,i+o),c+=P,o=Math.cos(c)*n,d=Math.sin(c)*n,e.moveTo(a-o,i-d),e.lineTo(a+o,i+d),e.moveTo(a+d,i-o),e.lineTo(a-d,i+o);break;case"line":o=Math.cos(c)*n,d=Math.sin(c)*n,e.moveTo(a-o,i-d),e.lineTo(a+o,i+d);break;case"dash":e.moveTo(a,i),e.lineTo(a+Math.cos(c)*n,i+Math.sin(c)*n)}e.fill(),e.stroke()}},_isPointInArea:function(e,t){return e.x>t.left-1e-6&&e.x<t.right+1e-6&&e.y>t.top-1e-6&&e.y<t.bottom+1e-6},clipArea:function(e,t){e.save(),e.beginPath(),e.rect(t.left,t.top,t.right-t.left,t.bottom-t.top),e.clip()},unclipArea:function(e){e.restore()},lineTo:function(e,t,n,a){var i=n.steppedLine;if(i){if("middle"===i){var r=(t.x+n.x)/2;e.lineTo(r,a?n.y:t.y),e.lineTo(r,a?t.y:n.y)}else"after"===i&&!a||"after"!==i&&a?e.lineTo(t.x,n.y):e.lineTo(n.x,t.y);e.lineTo(n.x,n.y)}else n.tension?e.bezierCurveTo(a?t.controlPointPreviousX:t.controlPointNextX,a?t.controlPointPreviousY:t.controlPointNextY,a?n.controlPointNextX:n.controlPointPreviousX,a?n.controlPointNextY:n.controlPointPreviousY,n.x,n.y):e.lineTo(n.x,n.y)}},O=A;D.clear=A.clear,D.drawRoundedRectangle=function(e){e.beginPath(),A.roundedRect.apply(A,arguments)};var E={_set:function(e,t){return D.merge(this[e]||(this[e]={}),t)}};E._set("global",{defaultColor:"rgba(0,0,0,0.1)",defaultFontColor:"#666",defaultFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",defaultFontSize:12,defaultFontStyle:"normal",defaultLineHeight:1.2,showLines:!0});var W=E,F=D.valueOrDefault,N={toLineHeight:function(e,t){var n=(""+e).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);if(!n||"normal"===n[1])return 1.2*t;switch(e=+n[2],n[3]){case"px":return e;case"%":e/=100}return t*e},toPadding:function(e){var t,n,a,i;return D.isObject(e)?(t=+e.top||0,n=+e.right||0,a=+e.bottom||0,i=+e.left||0):t=n=a=i=+e||0,{top:t,right:n,bottom:a,left:i,height:t+a,width:i+n}},_parseFont:function(e){var t=W.global,n=F(e.fontSize,t.defaultFontSize),a={family:F(e.fontFamily,t.defaultFontFamily),lineHeight:D.options.toLineHeight(F(e.lineHeight,t.defaultLineHeight),n),size:n,style:F(e.fontStyle,t.defaultFontStyle),weight:null,string:""};return a.string=function(e){return!e||D.isNullOrUndef(e.size)||D.isNullOrUndef(e.family)?null:(e.style?e.style+" ":"")+(e.weight?e.weight+" ":"")+e.size+"px "+e.family}(a),a},resolve:function(e,t,n,a){var i,r,s,o=!0;for(i=0,r=e.length;i<r;++i)if(void 0!==(s=e[i])&&(void 0!==t&&"function"==typeof s&&(s=s(t),o=!1),void 0!==n&&D.isArray(s)&&(s=s[n],o=!1),void 0!==s))return a&&!o&&(a.cacheable=!1),s}},I={_factorize:function(e){var t,n=[],a=Math.sqrt(e);for(t=1;t<a;t++)e%t==0&&(n.push(t),n.push(e/t));return a===(0|a)&&n.push(a),n.sort((function(e,t){return e-t})).pop(),n},log10:Math.log10||function(e){var t=Math.log(e)*Math.LOG10E,n=Math.round(t);return e===Math.pow(10,n)?n:t}},R=I;D.log10=I.log10;var z=D,B=x,V=O,q=N,J=R,U={getRtlAdapter:function(e,t,n){return e?function(e,t){return{x:function(n){return e+e+t-n},setWidth:function(e){t=e},textAlign:function(e){return"center"===e?e:"right"===e?"left":"right"},xPlus:function(e,t){return e-t},leftForLtr:function(e,t){return e-t}}}(t,n):{x:function(e){return e},setWidth:function(e){},textAlign:function(e){return e},xPlus:function(e,t){return e+t},leftForLtr:function(e,t){return e}}},overrideTextDirection:function(e,t){var n,a;"ltr"!==t&&"rtl"!==t||(a=[(n=e.canvas.style).getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",t,"important"),e.prevTextDirection=a)},restoreTextDirection:function(e){var t=e.prevTextDirection;void 0!==t&&(delete e.prevTextDirection,e.canvas.style.setProperty("direction",t[0],t[1]))}};z.easing=B,z.canvas=V,z.options=q,z.math=J,z.rtl=U;var $=function(e){z.extend(this,e),this.initialize.apply(this,arguments)};z.extend($.prototype,{_type:void 0,initialize:function(){this.hidden=!1},pivot:function(){var e=this;return e._view||(e._view=z.extend({},e._model)),e._start={},e},transition:function(e){var t=this,n=t._model,a=t._start,i=t._view;return n&&1!==e?(i||(i=t._view={}),a||(a=t._start={}),function(e,t,n,a){var i,r,s,o,d,l,u,c,h,m=Object.keys(n);for(i=0,r=m.length;i<r;++i)if(l=n[s=m[i]],t.hasOwnProperty(s)||(t[s]=l),(o=t[s])!==l&&"_"!==s[0]){if(e.hasOwnProperty(s)||(e[s]=o),(u=typeof l)==typeof(d=e[s]))if("string"===u){if((c=L(d)).valid&&(h=L(l)).valid){t[s]=h.mix(c,a).rgbString();continue}}else if(z.isFinite(d)&&z.isFinite(l)){t[s]=d+(l-d)*a;continue}t[s]=l}}(a,i,n,e),t):(t._view=z.extend({},n),t._start=null,t)},tooltipPosition:function(){return{x:this._model.x,y:this._model.y}},hasValue:function(){return z.isNumber(this._model.x)&&z.isNumber(this._model.y)}}),$.extend=z.inherits;var G=$,K=G.extend({chart:null,currentStep:0,numSteps:60,easing:"",render:null,onAnimationProgress:null,onAnimationComplete:null}),X=K;Object.defineProperty(K.prototype,"animationObject",{get:function(){return this}}),Object.defineProperty(K.prototype,"chartInstance",{get:function(){return this.chart},set:function(e){this.chart=e}}),W._set("global",{animation:{duration:1e3,easing:"easeOutQuart",onProgress:z.noop,onComplete:z.noop}});var Z={animations:[],request:null,addAnimation:function(e,t,n,a){var i,r,s=this.animations;for(t.chart=e,t.startTime=Date.now(),t.duration=n,a||(e.animating=!0),i=0,r=s.length;i<r;++i)if(s[i].chart===e)return void(s[i]=t);s.push(t),1===s.length&&this.requestAnimationFrame()},cancelAnimation:function(e){var t=z.findIndex(this.animations,(function(t){return t.chart===e}));-1!==t&&(this.animations.splice(t,1),e.animating=!1)},requestAnimationFrame:function(){var e=this;null===e.request&&(e.request=z.requestAnimFrame.call(window,(function(){e.request=null,e.startDigest()})))},startDigest:function(){this.advance(),this.animations.length>0&&this.requestAnimationFrame()},advance:function(){for(var e,t,n,a,i=this.animations,r=0;r<i.length;)t=(e=i[r]).chart,n=e.numSteps,a=Math.floor((Date.now()-e.startTime)/e.duration*n)+1,e.currentStep=Math.min(a,n),z.callback(e.render,[t,e],t),z.callback(e.onAnimationProgress,[e],t),e.currentStep>=n?(z.callback(e.onAnimationComplete,[e],t),t.animating=!1,i.splice(r,1)):++r}},Q=z.options.resolve,ee=["push","pop","shift","splice","unshift"];function te(e,t){var n=e._chartjs;if(n){var a=n.listeners,i=a.indexOf(t);-1!==i&&a.splice(i,1),a.length>0||(ee.forEach((function(t){delete e[t]})),delete e._chartjs)}}var ne=function(e,t){this.initialize(e,t)};z.extend(ne.prototype,{datasetElementType:null,dataElementType:null,_datasetElementOptions:["backgroundColor","borderCapStyle","borderColor","borderDash","borderDashOffset","borderJoinStyle","borderWidth"],_dataElementOptions:["backgroundColor","borderColor","borderWidth","pointStyle"],initialize:function(e,t){var n=this;n.chart=e,n.index=t,n.linkScales(),n.addElements(),n._type=n.getMeta().type},updateIndex:function(e){this.index=e},linkScales:function(){var e=this.getMeta(),t=this.chart,n=t.scales,a=this.getDataset(),i=t.options.scales;null!==e.xAxisID&&e.xAxisID in n&&!a.xAxisID||(e.xAxisID=a.xAxisID||i.xAxes[0].id),null!==e.yAxisID&&e.yAxisID in n&&!a.yAxisID||(e.yAxisID=a.yAxisID||i.yAxes[0].id)},getDataset:function(){return this.chart.data.datasets[this.index]},getMeta:function(){return this.chart.getDatasetMeta(this.index)},getScaleForId:function(e){return this.chart.scales[e]},_getValueScaleId:function(){return this.getMeta().yAxisID},_getIndexScaleId:function(){return this.getMeta().xAxisID},_getValueScale:function(){return this.getScaleForId(this._getValueScaleId())},_getIndexScale:function(){return this.getScaleForId(this._getIndexScaleId())},reset:function(){this._update(!0)},destroy:function(){this._data&&te(this._data,this)},createMetaDataset:function(){var e=this.datasetElementType;return e&&new e({_chart:this.chart,_datasetIndex:this.index})},createMetaData:function(e){var t=this.dataElementType;return t&&new t({_chart:this.chart,_datasetIndex:this.index,_index:e})},addElements:function(){var e,t,n=this.getMeta(),a=this.getDataset().data||[],i=n.data;for(e=0,t=a.length;e<t;++e)i[e]=i[e]||this.createMetaData(e);n.dataset=n.dataset||this.createMetaDataset()},addElementAndReset:function(e){var t=this.createMetaData(e);this.getMeta().data.splice(e,0,t),this.updateElement(t,e,!0)},buildOrUpdateElements:function(){var e,t,n=this,a=n.getDataset(),i=a.data||(a.data=[]);n._data!==i&&(n._data&&te(n._data,n),i&&Object.isExtensible(i)&&(t=n,(e=i)._chartjs?e._chartjs.listeners.push(t):(Object.defineProperty(e,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[t]}}),ee.forEach((function(t){var n="onData"+t.charAt(0).toUpperCase()+t.slice(1),a=e[t];Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:function(){var t=Array.prototype.slice.call(arguments),i=a.apply(this,t);return z.each(e._chartjs.listeners,(function(e){"function"==typeof e[n]&&e[n].apply(e,t)})),i}})})))),n._data=i),n.resyncElements()},_configure:function(){this._config=z.merge(Object.create(null),[this.chart.options.datasets[this._type],this.getDataset()],{merger:function(e,t,n){"_meta"!==e&&"data"!==e&&z._merger(e,t,n)}})},_update:function(e){this._configure(),this._cachedDataOpts=null,this.update(e)},update:z.noop,transition:function(e){for(var t=this.getMeta(),n=t.data||[],a=n.length,i=0;i<a;++i)n[i].transition(e);t.dataset&&t.dataset.transition(e)},draw:function(){var e=this.getMeta(),t=e.data||[],n=t.length,a=0;for(e.dataset&&e.dataset.draw();a<n;++a)t[a].draw()},getStyle:function(e){var t,n=this.getMeta(),a=n.dataset;return this._configure(),a&&void 0===e?t=this._resolveDatasetElementOptions(a||{}):(e=e||0,t=this._resolveDataElementOptions(n.data[e]||{},e)),!1!==t.fill&&null!==t.fill||(t.backgroundColor=t.borderColor),t},_resolveDatasetElementOptions:function(e,t){var n,a,i,r,s=this,o=s.chart,d=s._config,l=e.custom||{},u=o.options.elements[s.datasetElementType.prototype._type]||{},c=s._datasetElementOptions,h={},m={chart:o,dataset:s.getDataset(),datasetIndex:s.index,hover:t};for(n=0,a=c.length;n<a;++n)i=c[n],r=t?"hover"+i.charAt(0).toUpperCase()+i.slice(1):i,h[i]=Q([l[r],d[r],u[r]],m);return h},_resolveDataElementOptions:function(e,t){var n=this,a=e&&e.custom,i=n._cachedDataOpts;if(i&&!a)return i;var r,s,o,d,l=n.chart,u=n._config,c=l.options.elements[n.dataElementType.prototype._type]||{},h=n._dataElementOptions,m={},_={chart:l,dataIndex:t,dataset:n.getDataset(),datasetIndex:n.index},f={cacheable:!a};if(a=a||{},z.isArray(h))for(s=0,o=h.length;s<o;++s)m[d=h[s]]=Q([a[d],u[d],c[d]],_,t,f);else for(s=0,o=(r=Object.keys(h)).length;s<o;++s)m[d=r[s]]=Q([a[d],u[h[d]],u[d],c[d]],_,t,f);return f.cacheable&&(n._cachedDataOpts=Object.freeze(m)),m},removeHoverStyle:function(e){z.merge(e._model,e.$previousStyle||{}),delete e.$previousStyle},setHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],n=e._index,a=e.custom||{},i=e._model,r=z.getHoverColor;e.$previousStyle={backgroundColor:i.backgroundColor,borderColor:i.borderColor,borderWidth:i.borderWidth},i.backgroundColor=Q([a.hoverBackgroundColor,t.hoverBackgroundColor,r(i.backgroundColor)],void 0,n),i.borderColor=Q([a.hoverBorderColor,t.hoverBorderColor,r(i.borderColor)],void 0,n),i.borderWidth=Q([a.hoverBorderWidth,t.hoverBorderWidth,i.borderWidth],void 0,n)},_removeDatasetHoverStyle:function(){var e=this.getMeta().dataset;e&&this.removeHoverStyle(e)},_setDatasetHoverStyle:function(){var e,t,n,a,i,r,s=this.getMeta().dataset,o={};if(s){for(r=s._model,i=this._resolveDatasetElementOptions(s,!0),e=0,t=(a=Object.keys(i)).length;e<t;++e)o[n=a[e]]=r[n],r[n]=i[n];s.$previousStyle=o}},resyncElements:function(){var e=this.getMeta(),t=this.getDataset().data,n=e.data.length,a=t.length;a<n?e.data.splice(a,n-a):a>n&&this.insertElements(n,a-n)},insertElements:function(e,t){for(var n=0;n<t;++n)this.addElementAndReset(e+n)},onDataPush:function(){var e=arguments.length;this.insertElements(this.getDataset().data.length-e,e)},onDataPop:function(){this.getMeta().data.pop()},onDataShift:function(){this.getMeta().data.shift()},onDataSplice:function(e,t){this.getMeta().data.splice(e,t),this.insertElements(e,arguments.length-2)},onDataUnshift:function(){this.insertElements(0,arguments.length)}}),ne.extend=z.inherits;var ae=ne,ie=2*Math.PI;function re(e,t){var n=t.startAngle,a=t.endAngle,i=t.pixelMargin,r=i/t.outerRadius,s=t.x,o=t.y;e.beginPath(),e.arc(s,o,t.outerRadius,n-r,a+r),t.innerRadius>i?(r=i/t.innerRadius,e.arc(s,o,t.innerRadius-i,a+r,n-r,!0)):e.arc(s,o,i,a+Math.PI/2,n-Math.PI/2),e.closePath(),e.clip()}function se(e,t,n){var a="inner"===t.borderAlign;a?(e.lineWidth=2*t.borderWidth,e.lineJoin="round"):(e.lineWidth=t.borderWidth,e.lineJoin="bevel"),n.fullCircles&&function(e,t,n,a){var i,r=n.endAngle;for(a&&(n.endAngle=n.startAngle+ie,re(e,n),n.endAngle=r,n.endAngle===n.startAngle&&n.fullCircles&&(n.endAngle+=ie,n.fullCircles--)),e.beginPath(),e.arc(n.x,n.y,n.innerRadius,n.startAngle+ie,n.startAngle,!0),i=0;i<n.fullCircles;++i)e.stroke();for(e.beginPath(),e.arc(n.x,n.y,t.outerRadius,n.startAngle,n.startAngle+ie),i=0;i<n.fullCircles;++i)e.stroke()}(e,t,n,a),a&&re(e,n),e.beginPath(),e.arc(n.x,n.y,t.outerRadius,n.startAngle,n.endAngle),e.arc(n.x,n.y,n.innerRadius,n.endAngle,n.startAngle,!0),e.closePath(),e.stroke()}W._set("global",{elements:{arc:{backgroundColor:W.global.defaultColor,borderColor:"#fff",borderWidth:2,borderAlign:"center"}}});var oe=G.extend({_type:"arc",inLabelRange:function(e){var t=this._view;return!!t&&Math.pow(e-t.x,2)<Math.pow(t.radius+t.hoverRadius,2)},inRange:function(e,t){var n=this._view;if(n){for(var a=z.getAngleFromPoint(n,{x:e,y:t}),i=a.angle,r=a.distance,s=n.startAngle,o=n.endAngle;o<s;)o+=ie;for(;i>o;)i-=ie;for(;i<s;)i+=ie;var d=i>=s&&i<=o,l=r>=n.innerRadius&&r<=n.outerRadius;return d&&l}return!1},getCenterPoint:function(){var e=this._view,t=(e.startAngle+e.endAngle)/2,n=(e.innerRadius+e.outerRadius)/2;return{x:e.x+Math.cos(t)*n,y:e.y+Math.sin(t)*n}},getArea:function(){var e=this._view;return Math.PI*((e.endAngle-e.startAngle)/(2*Math.PI))*(Math.pow(e.outerRadius,2)-Math.pow(e.innerRadius,2))},tooltipPosition:function(){var e=this._view,t=e.startAngle+(e.endAngle-e.startAngle)/2,n=(e.outerRadius-e.innerRadius)/2+e.innerRadius;return{x:e.x+Math.cos(t)*n,y:e.y+Math.sin(t)*n}},draw:function(){var e,t=this._chart.ctx,n=this._view,a="inner"===n.borderAlign?.33:0,i={x:n.x,y:n.y,innerRadius:n.innerRadius,outerRadius:Math.max(n.outerRadius-a,0),pixelMargin:a,startAngle:n.startAngle,endAngle:n.endAngle,fullCircles:Math.floor(n.circumference/ie)};if(t.save(),t.fillStyle=n.backgroundColor,t.strokeStyle=n.borderColor,i.fullCircles){for(i.endAngle=i.startAngle+ie,t.beginPath(),t.arc(i.x,i.y,i.outerRadius,i.startAngle,i.endAngle),t.arc(i.x,i.y,i.innerRadius,i.endAngle,i.startAngle,!0),t.closePath(),e=0;e<i.fullCircles;++e)t.fill();i.endAngle=i.startAngle+n.circumference%ie}t.beginPath(),t.arc(i.x,i.y,i.outerRadius,i.startAngle,i.endAngle),t.arc(i.x,i.y,i.innerRadius,i.endAngle,i.startAngle,!0),t.closePath(),t.fill(),n.borderWidth&&se(t,n,i),t.restore()}}),de=z.valueOrDefault,le=W.global.defaultColor;W._set("global",{elements:{line:{tension:.4,backgroundColor:le,borderWidth:3,borderColor:le,borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",capBezierPoints:!0,fill:!0}}});var ue=G.extend({_type:"line",draw:function(){var e,t,n,a=this,i=a._view,r=a._chart.ctx,s=i.spanGaps,o=a._children.slice(),d=W.global,l=d.elements.line,u=-1,c=a._loop;if(o.length){if(a._loop){for(e=0;e<o.length;++e)if(t=z.previousItem(o,e),!o[e]._view.skip&&t._view.skip){o=o.slice(e).concat(o.slice(0,e)),c=s;break}c&&o.push(o[0])}for(r.save(),r.lineCap=i.borderCapStyle||l.borderCapStyle,r.setLineDash&&r.setLineDash(i.borderDash||l.borderDash),r.lineDashOffset=de(i.borderDashOffset,l.borderDashOffset),r.lineJoin=i.borderJoinStyle||l.borderJoinStyle,r.lineWidth=de(i.borderWidth,l.borderWidth),r.strokeStyle=i.borderColor||d.defaultColor,r.beginPath(),(n=o[0]._view).skip||(r.moveTo(n.x,n.y),u=0),e=1;e<o.length;++e)n=o[e]._view,t=-1===u?z.previousItem(o,e):o[u],n.skip||(u!==e-1&&!s||-1===u?r.moveTo(n.x,n.y):z.canvas.lineTo(r,t._view,n),u=e);c&&r.closePath(),r.stroke(),r.restore()}}}),ce=z.valueOrDefault,he=W.global.defaultColor;function me(e){var t=this._view;return!!t&&Math.abs(e-t.x)<t.radius+t.hitRadius}W._set("global",{elements:{point:{radius:3,pointStyle:"circle",backgroundColor:he,borderColor:he,borderWidth:1,hitRadius:1,hoverRadius:4,hoverBorderWidth:1}}});var _e=G.extend({_type:"point",inRange:function(e,t){var n=this._view;return!!n&&Math.pow(e-n.x,2)+Math.pow(t-n.y,2)<Math.pow(n.hitRadius+n.radius,2)},inLabelRange:me,inXRange:me,inYRange:function(e){var t=this._view;return!!t&&Math.abs(e-t.y)<t.radius+t.hitRadius},getCenterPoint:function(){var e=this._view;return{x:e.x,y:e.y}},getArea:function(){return Math.PI*Math.pow(this._view.radius,2)},tooltipPosition:function(){var e=this._view;return{x:e.x,y:e.y,padding:e.radius+e.borderWidth}},draw:function(e){var t=this._view,n=this._chart.ctx,a=t.pointStyle,i=t.rotation,r=t.radius,s=t.x,o=t.y,d=W.global,l=d.defaultColor;t.skip||(void 0===e||z.canvas._isPointInArea(t,e))&&(n.strokeStyle=t.borderColor||l,n.lineWidth=ce(t.borderWidth,d.elements.point.borderWidth),n.fillStyle=t.backgroundColor||l,z.canvas.drawPoint(n,a,r,s,o,i))}}),fe=W.global.defaultColor;function pe(e){return e&&void 0!==e.width}function ge(e){var t,n,a,i,r;return pe(e)?(r=e.width/2,t=e.x-r,n=e.x+r,a=Math.min(e.y,e.base),i=Math.max(e.y,e.base)):(r=e.height/2,t=Math.min(e.x,e.base),n=Math.max(e.x,e.base),a=e.y-r,i=e.y+r),{left:t,top:a,right:n,bottom:i}}function ye(e,t,n){return e===t?n:e===n?t:e}function Me(e,t,n){var a,i,r,s,o=e.borderWidth,d=function(e){var t=e.borderSkipped,n={};return t?(e.horizontal?e.base>e.x&&(t=ye(t,"left","right")):e.base<e.y&&(t=ye(t,"bottom","top")),n[t]=!0,n):n}(e);return z.isObject(o)?(a=+o.top||0,i=+o.right||0,r=+o.bottom||0,s=+o.left||0):a=i=r=s=+o||0,{t:d.top||a<0?0:a>n?n:a,r:d.right||i<0?0:i>t?t:i,b:d.bottom||r<0?0:r>n?n:r,l:d.left||s<0?0:s>t?t:s}}function ve(e,t,n){var a=null===t,i=null===n,r=!(!e||a&&i)&&ge(e);return r&&(a||t>=r.left&&t<=r.right)&&(i||n>=r.top&&n<=r.bottom)}W._set("global",{elements:{rectangle:{backgroundColor:fe,borderColor:fe,borderSkipped:"bottom",borderWidth:0}}});var Le=G.extend({_type:"rectangle",draw:function(){var e=this._chart.ctx,t=this._view,n=function(e){var t=ge(e),n=t.right-t.left,a=t.bottom-t.top,i=Me(e,n/2,a/2);return{outer:{x:t.left,y:t.top,w:n,h:a},inner:{x:t.left+i.l,y:t.top+i.t,w:n-i.l-i.r,h:a-i.t-i.b}}}(t),a=n.outer,i=n.inner;e.fillStyle=t.backgroundColor,e.fillRect(a.x,a.y,a.w,a.h),a.w===i.w&&a.h===i.h||(e.save(),e.beginPath(),e.rect(a.x,a.y,a.w,a.h),e.clip(),e.fillStyle=t.borderColor,e.rect(i.x,i.y,i.w,i.h),e.fill("evenodd"),e.restore())},height:function(){var e=this._view;return e.base-e.y},inRange:function(e,t){return ve(this._view,e,t)},inLabelRange:function(e,t){var n=this._view;return pe(n)?ve(n,e,null):ve(n,null,t)},inXRange:function(e){return ve(this._view,e,null)},inYRange:function(e){return ve(this._view,null,e)},getCenterPoint:function(){var e,t,n=this._view;return pe(n)?(e=n.x,t=(n.y+n.base)/2):(e=(n.x+n.base)/2,t=n.y),{x:e,y:t}},getArea:function(){var e=this._view;return pe(e)?e.width*Math.abs(e.y-e.base):e.height*Math.abs(e.x-e.base)},tooltipPosition:function(){var e=this._view;return{x:e.x,y:e.y}}}),be={},ke=oe,Ye=ue,De=_e,we=Le;be.Arc=ke,be.Line=Ye,be.Point=De,be.Rectangle=we;var xe=z._deprecated,Te=z.valueOrDefault;function Se(e,t,n){var a,i,r=n.barThickness,s=t.stackCount,o=t.pixels[e],d=z.isNullOrUndef(r)?function(e,t){var n,a,i,r,s=e._length;for(i=1,r=t.length;i<r;++i)s=Math.min(s,Math.abs(t[i]-t[i-1]));for(i=0,r=e.getTicks().length;i<r;++i)a=e.getPixelForTick(i),s=i>0?Math.min(s,Math.abs(a-n)):s,n=a;return s}(t.scale,t.pixels):-1;return z.isNullOrUndef(r)?(a=d*n.categoryPercentage,i=n.barPercentage):(a=r*s,i=1),{chunk:a/s,ratio:i,start:o-a/2}}W._set("bar",{hover:{mode:"label"},scales:{xAxes:[{type:"category",offset:!0,gridLines:{offsetGridLines:!0}}],yAxes:[{type:"linear"}]}}),W._set("global",{datasets:{bar:{categoryPercentage:.8,barPercentage:.9}}});var He=ae.extend({dataElementType:be.Rectangle,_dataElementOptions:["backgroundColor","borderColor","borderSkipped","borderWidth","barPercentage","barThickness","categoryPercentage","maxBarThickness","minBarLength"],initialize:function(){var e,t,n=this;ae.prototype.initialize.apply(n,arguments),(e=n.getMeta()).stack=n.getDataset().stack,e.bar=!0,t=n._getIndexScale().options,xe("bar chart",t.barPercentage,"scales.[x/y]Axes.barPercentage","dataset.barPercentage"),xe("bar chart",t.barThickness,"scales.[x/y]Axes.barThickness","dataset.barThickness"),xe("bar chart",t.categoryPercentage,"scales.[x/y]Axes.categoryPercentage","dataset.categoryPercentage"),xe("bar chart",n._getValueScale().options.minBarLength,"scales.[x/y]Axes.minBarLength","dataset.minBarLength"),xe("bar chart",t.maxBarThickness,"scales.[x/y]Axes.maxBarThickness","dataset.maxBarThickness")},update:function(e){var t,n,a=this.getMeta().data;for(this._ruler=this.getRuler(),t=0,n=a.length;t<n;++t)this.updateElement(a[t],t,e)},updateElement:function(e,t,n){var a=this,i=a.getMeta(),r=a.getDataset(),s=a._resolveDataElementOptions(e,t);e._xScale=a.getScaleForId(i.xAxisID),e._yScale=a.getScaleForId(i.yAxisID),e._datasetIndex=a.index,e._index=t,e._model={backgroundColor:s.backgroundColor,borderColor:s.borderColor,borderSkipped:s.borderSkipped,borderWidth:s.borderWidth,datasetLabel:r.label,label:a.chart.data.labels[t]},z.isArray(r.data[t])&&(e._model.borderSkipped=null),a._updateElementGeometry(e,t,n,s),e.pivot()},_updateElementGeometry:function(e,t,n,a){var i=this,r=e._model,s=i._getValueScale(),o=s.getBasePixel(),d=s.isHorizontal(),l=i._ruler||i.getRuler(),u=i.calculateBarValuePixels(i.index,t,a),c=i.calculateBarIndexPixels(i.index,t,l,a);r.horizontal=d,r.base=n?o:u.base,r.x=d?n?o:u.head:c.center,r.y=d?c.center:n?o:u.head,r.height=d?c.size:void 0,r.width=d?void 0:c.size},_getStacks:function(e){var t,n,a=this._getIndexScale(),i=a._getMatchingVisibleMetas(this._type),r=a.options.stacked,s=i.length,o=[];for(t=0;t<s&&(n=i[t],(!1===r||-1===o.indexOf(n.stack)||void 0===r&&void 0===n.stack)&&o.push(n.stack),n.index!==e);++t);return o},getStackCount:function(){return this._getStacks().length},getStackIndex:function(e,t){var n=this._getStacks(e),a=void 0!==t?n.indexOf(t):-1;return-1===a?n.length-1:a},getRuler:function(){var e,t,n=this._getIndexScale(),a=[];for(e=0,t=this.getMeta().data.length;e<t;++e)a.push(n.getPixelForValue(null,e,this.index));return{pixels:a,start:n._startPixel,end:n._endPixel,stackCount:this.getStackCount(),scale:n}},calculateBarValuePixels:function(e,t,n){var a,i,r,s,o,d,l,u=this.chart,c=this._getValueScale(),h=c.isHorizontal(),m=u.data.datasets,_=c._getMatchingVisibleMetas(this._type),f=c._parseValue(m[e].data[t]),p=n.minBarLength,g=c.options.stacked,y=this.getMeta().stack,M=void 0===f.start?0:f.max>=0&&f.min>=0?f.min:f.max,v=void 0===f.start?f.end:f.max>=0&&f.min>=0?f.max-f.min:f.min-f.max,L=_.length;if(g||void 0===g&&void 0!==y)for(a=0;a<L&&(i=_[a]).index!==e;++a)i.stack===y&&(r=void 0===(l=c._parseValue(m[i.index].data[t])).start?l.end:l.min>=0&&l.max>=0?l.max:l.min,(f.min<0&&r<0||f.max>=0&&r>0)&&(M+=r));return s=c.getPixelForValue(M),d=(o=c.getPixelForValue(M+v))-s,void 0!==p&&Math.abs(d)<p&&(d=p,o=v>=0&&!h||v<0&&h?s-p:s+p),{size:d,base:s,head:o,center:o+d/2}},calculateBarIndexPixels:function(e,t,n,a){var i="flex"===a.barThickness?function(e,t,n){var a,i=t.pixels,r=i[e],s=e>0?i[e-1]:null,o=e<i.length-1?i[e+1]:null,d=n.categoryPercentage;return null===s&&(s=r-(null===o?t.end-t.start:o-r)),null===o&&(o=r+r-s),a=r-(r-Math.min(s,o))/2*d,{chunk:Math.abs(o-s)/2*d/t.stackCount,ratio:n.barPercentage,start:a}}(t,n,a):Se(t,n,a),r=this.getStackIndex(e,this.getMeta().stack),s=i.start+i.chunk*r+i.chunk/2,o=Math.min(Te(a.maxBarThickness,1/0),i.chunk*i.ratio);return{base:s-o/2,head:s+o/2,center:s,size:o}},draw:function(){var e=this.chart,t=this._getValueScale(),n=this.getMeta().data,a=this.getDataset(),i=n.length,r=0;for(z.canvas.clipArea(e.ctx,e.chartArea);r<i;++r){var s=t._parseValue(a.data[r]);isNaN(s.min)||isNaN(s.max)||n[r].draw()}z.canvas.unclipArea(e.ctx)},_resolveDataElementOptions:function(){var e=this,t=z.extend({},ae.prototype._resolveDataElementOptions.apply(e,arguments)),n=e._getIndexScale().options,a=e._getValueScale().options;return t.barPercentage=Te(n.barPercentage,t.barPercentage),t.barThickness=Te(n.barThickness,t.barThickness),t.categoryPercentage=Te(n.categoryPercentage,t.categoryPercentage),t.maxBarThickness=Te(n.maxBarThickness,t.maxBarThickness),t.minBarLength=Te(a.minBarLength,t.minBarLength),t}}),je=z.valueOrDefault,Pe=z.options.resolve;W._set("bubble",{hover:{mode:"single"},scales:{xAxes:[{type:"linear",position:"bottom",id:"x-axis-0"}],yAxes:[{type:"linear",position:"left",id:"y-axis-0"}]},tooltips:{callbacks:{title:function(){return""},label:function(e,t){var n=t.datasets[e.datasetIndex].label||"",a=t.datasets[e.datasetIndex].data[e.index];return n+": ("+e.xLabel+", "+e.yLabel+", "+a.r+")"}}}});var Ce=ae.extend({dataElementType:be.Point,_dataElementOptions:["backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","hoverRadius","hitRadius","pointStyle","rotation"],update:function(e){var t=this,n=t.getMeta().data;z.each(n,(function(n,a){t.updateElement(n,a,e)}))},updateElement:function(e,t,n){var a=this,i=a.getMeta(),r=e.custom||{},s=a.getScaleForId(i.xAxisID),o=a.getScaleForId(i.yAxisID),d=a._resolveDataElementOptions(e,t),l=a.getDataset().data[t],u=a.index,c=n?s.getPixelForDecimal(.5):s.getPixelForValue("object"==typeof l?l:NaN,t,u),h=n?o.getBasePixel():o.getPixelForValue(l,t,u);e._xScale=s,e._yScale=o,e._options=d,e._datasetIndex=u,e._index=t,e._model={backgroundColor:d.backgroundColor,borderColor:d.borderColor,borderWidth:d.borderWidth,hitRadius:d.hitRadius,pointStyle:d.pointStyle,rotation:d.rotation,radius:n?0:d.radius,skip:r.skip||isNaN(c)||isNaN(h),x:c,y:h},e.pivot()},setHoverStyle:function(e){var t=e._model,n=e._options,a=z.getHoverColor;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth,radius:t.radius},t.backgroundColor=je(n.hoverBackgroundColor,a(n.backgroundColor)),t.borderColor=je(n.hoverBorderColor,a(n.borderColor)),t.borderWidth=je(n.hoverBorderWidth,n.borderWidth),t.radius=n.radius+n.hoverRadius},_resolveDataElementOptions:function(e,t){var n=this,a=n.chart,i=n.getDataset(),r=e.custom||{},s=i.data[t]||{},o=ae.prototype._resolveDataElementOptions.apply(n,arguments),d={chart:a,dataIndex:t,dataset:i,datasetIndex:n.index};return n._cachedDataOpts===o&&(o=z.extend({},o)),o.radius=Pe([r.radius,s.r,n._config.radius,a.options.elements.point.radius],d,t),o}}),Ae=z.valueOrDefault,Oe=Math.PI,Ee=2*Oe,We=Oe/2;W._set("doughnut",{animation:{animateRotate:!0,animateScale:!1},hover:{mode:"single"},legendCallback:function(e){var t,n,a,i=document.createElement("ul"),r=e.data,s=r.datasets,o=r.labels;if(i.setAttribute("class",e.id+"-legend"),s.length)for(t=0,n=s[0].data.length;t<n;++t)(a=i.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=s[0].backgroundColor[t],o[t]&&a.appendChild(document.createTextNode(o[t]));return i.outerHTML},legend:{labels:{generateLabels:function(e){var t=e.data;return t.labels.length&&t.datasets.length?t.labels.map((function(n,a){var i=e.getDatasetMeta(0),r=i.controller.getStyle(a);return{text:n,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,hidden:isNaN(t.datasets[0].data[a])||i.data[a].hidden,index:a}})):[]}},onClick:function(e,t){var n,a,i,r=t.index,s=this.chart;for(n=0,a=(s.data.datasets||[]).length;n<a;++n)(i=s.getDatasetMeta(n)).data[r]&&(i.data[r].hidden=!i.data[r].hidden);s.update()}},cutoutPercentage:50,rotation:-We,circumference:Ee,tooltips:{callbacks:{title:function(){return""},label:function(e,t){var n=t.labels[e.index],a=": "+t.datasets[e.datasetIndex].data[e.index];return z.isArray(n)?(n=n.slice())[0]+=a:n+=a,n}}}});var Fe=ae.extend({dataElementType:be.Arc,linkScales:z.noop,_dataElementOptions:["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"],getRingIndex:function(e){for(var t=0,n=0;n<e;++n)this.chart.isDatasetVisible(n)&&++t;return t},update:function(e){var t,n,a,i,r=this,s=r.chart,o=s.chartArea,d=s.options,l=1,u=1,c=0,h=0,m=r.getMeta(),_=m.data,f=d.cutoutPercentage/100||0,p=d.circumference,g=r._getRingWeight(r.index);if(p<Ee){var y=d.rotation%Ee,M=(y+=y>=Oe?-Ee:y<-Oe?Ee:0)+p,v=Math.cos(y),L=Math.sin(y),b=Math.cos(M),k=Math.sin(M),Y=y<=0&&M>=0||M>=Ee,D=y<=We&&M>=We||M>=Ee+We,w=y<=-We&&M>=-We||M>=Oe+We,x=y===-Oe||M>=Oe?-1:Math.min(v,v*f,b,b*f),T=w?-1:Math.min(L,L*f,k,k*f),S=Y?1:Math.max(v,v*f,b,b*f),H=D?1:Math.max(L,L*f,k,k*f);l=(S-x)/2,u=(H-T)/2,c=-(S+x)/2,h=-(H+T)/2}for(a=0,i=_.length;a<i;++a)_[a]._options=r._resolveDataElementOptions(_[a],a);for(s.borderWidth=r.getMaxBorderWidth(),t=(o.right-o.left-s.borderWidth)/l,n=(o.bottom-o.top-s.borderWidth)/u,s.outerRadius=Math.max(Math.min(t,n)/2,0),s.innerRadius=Math.max(s.outerRadius*f,0),s.radiusLength=(s.outerRadius-s.innerRadius)/(r._getVisibleDatasetWeightTotal()||1),s.offsetX=c*s.outerRadius,s.offsetY=h*s.outerRadius,m.total=r.calculateTotal(),r.outerRadius=s.outerRadius-s.radiusLength*r._getRingWeightOffset(r.index),r.innerRadius=Math.max(r.outerRadius-s.radiusLength*g,0),a=0,i=_.length;a<i;++a)r.updateElement(_[a],a,e)},updateElement:function(e,t,n){var a=this,i=a.chart,r=i.chartArea,s=i.options,o=s.animation,d=(r.left+r.right)/2,l=(r.top+r.bottom)/2,u=s.rotation,c=s.rotation,h=a.getDataset(),m=n&&o.animateRotate||e.hidden?0:a.calculateCircumference(h.data[t])*(s.circumference/Ee),_=n&&o.animateScale?0:a.innerRadius,f=n&&o.animateScale?0:a.outerRadius,p=e._options||{};z.extend(e,{_datasetIndex:a.index,_index:t,_model:{backgroundColor:p.backgroundColor,borderColor:p.borderColor,borderWidth:p.borderWidth,borderAlign:p.borderAlign,x:d+i.offsetX,y:l+i.offsetY,startAngle:u,endAngle:c,circumference:m,outerRadius:f,innerRadius:_,label:z.valueAtIndexOrDefault(h.label,t,i.data.labels[t])}});var g=e._model;n&&o.animateRotate||(g.startAngle=0===t?s.rotation:a.getMeta().data[t-1]._model.endAngle,g.endAngle=g.startAngle+g.circumference),e.pivot()},calculateTotal:function(){var e,t=this.getDataset(),n=this.getMeta(),a=0;return z.each(n.data,(function(n,i){e=t.data[i],isNaN(e)||n.hidden||(a+=Math.abs(e))})),a},calculateCircumference:function(e){var t=this.getMeta().total;return t>0&&!isNaN(e)?Ee*(Math.abs(e)/t):0},getMaxBorderWidth:function(e){var t,n,a,i,r,s,o,d,l=0,u=this.chart;if(!e)for(t=0,n=u.data.datasets.length;t<n;++t)if(u.isDatasetVisible(t)){e=(a=u.getDatasetMeta(t)).data,t!==this.index&&(r=a.controller);break}if(!e)return 0;for(t=0,n=e.length;t<n;++t)i=e[t],r?(r._configure(),s=r._resolveDataElementOptions(i,t)):s=i._options,"inner"!==s.borderAlign&&(o=s.borderWidth,l=(d=s.hoverBorderWidth)>(l=o>l?o:l)?d:l);return l},setHoverStyle:function(e){var t=e._model,n=e._options,a=z.getHoverColor;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth},t.backgroundColor=Ae(n.hoverBackgroundColor,a(n.backgroundColor)),t.borderColor=Ae(n.hoverBorderColor,a(n.borderColor)),t.borderWidth=Ae(n.hoverBorderWidth,n.borderWidth)},_getRingWeightOffset:function(e){for(var t=0,n=0;n<e;++n)this.chart.isDatasetVisible(n)&&(t+=this._getRingWeight(n));return t},_getRingWeight:function(e){return Math.max(Ae(this.chart.data.datasets[e].weight,1),0)},_getVisibleDatasetWeightTotal:function(){return this._getRingWeightOffset(this.chart.data.datasets.length)}});W._set("horizontalBar",{hover:{mode:"index",axis:"y"},scales:{xAxes:[{type:"linear",position:"bottom"}],yAxes:[{type:"category",position:"left",offset:!0,gridLines:{offsetGridLines:!0}}]},elements:{rectangle:{borderSkipped:"left"}},tooltips:{mode:"index",axis:"y"}}),W._set("global",{datasets:{horizontalBar:{categoryPercentage:.8,barPercentage:.9}}});var Ne=He.extend({_getValueScaleId:function(){return this.getMeta().xAxisID},_getIndexScaleId:function(){return this.getMeta().yAxisID}}),Ie=z.valueOrDefault,Re=z.options.resolve,ze=z.canvas._isPointInArea;function Be(e,t){var n=e&&e.options.ticks||{},a=n.reverse,i=void 0===n.min?t:0,r=void 0===n.max?t:0;return{start:a?r:i,end:a?i:r}}function Ve(e,t,n){var a=n/2,i=Be(e,a),r=Be(t,a);return{top:r.end,right:i.end,bottom:r.start,left:i.start}}function qe(e){var t,n,a,i;return z.isObject(e)?(t=e.top,n=e.right,a=e.bottom,i=e.left):t=n=a=i=e,{top:t,right:n,bottom:a,left:i}}W._set("line",{showLines:!0,spanGaps:!1,hover:{mode:"label"},scales:{xAxes:[{type:"category",id:"x-axis-0"}],yAxes:[{type:"linear",id:"y-axis-0"}]}});var Je=ae.extend({datasetElementType:be.Line,dataElementType:be.Point,_datasetElementOptions:["backgroundColor","borderCapStyle","borderColor","borderDash","borderDashOffset","borderJoinStyle","borderWidth","cubicInterpolationMode","fill"],_dataElementOptions:{backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},update:function(e){var t,n,a=this,i=a.getMeta(),r=i.dataset,s=i.data||[],o=a.chart.options,d=a._config,l=a._showLine=Ie(d.showLine,o.showLines);for(a._xScale=a.getScaleForId(i.xAxisID),a._yScale=a.getScaleForId(i.yAxisID),l&&(void 0!==d.tension&&void 0===d.lineTension&&(d.lineTension=d.tension),r._scale=a._yScale,r._datasetIndex=a.index,r._children=s,r._model=a._resolveDatasetElementOptions(r),r.pivot()),t=0,n=s.length;t<n;++t)a.updateElement(s[t],t,e);for(l&&0!==r._model.tension&&a.updateBezierControlPoints(),t=0,n=s.length;t<n;++t)s[t].pivot()},updateElement:function(e,t,n){var a,i,r=this,s=r.getMeta(),o=e.custom||{},d=r.getDataset(),l=r.index,u=d.data[t],c=r._xScale,h=r._yScale,m=s.dataset._model,_=r._resolveDataElementOptions(e,t);a=c.getPixelForValue("object"==typeof u?u:NaN,t,l),i=n?h.getBasePixel():r.calculatePointY(u,t,l),e._xScale=c,e._yScale=h,e._options=_,e._datasetIndex=l,e._index=t,e._model={x:a,y:i,skip:o.skip||isNaN(a)||isNaN(i),radius:_.radius,pointStyle:_.pointStyle,rotation:_.rotation,backgroundColor:_.backgroundColor,borderColor:_.borderColor,borderWidth:_.borderWidth,tension:Ie(o.tension,m?m.tension:0),steppedLine:!!m&&m.steppedLine,hitRadius:_.hitRadius}},_resolveDatasetElementOptions:function(e){var t=this,n=t._config,a=e.custom||{},i=t.chart.options,r=i.elements.line,s=ae.prototype._resolveDatasetElementOptions.apply(t,arguments);return s.spanGaps=Ie(n.spanGaps,i.spanGaps),s.tension=Ie(n.lineTension,r.tension),s.steppedLine=Re([a.steppedLine,n.steppedLine,r.stepped]),s.clip=qe(Ie(n.clip,Ve(t._xScale,t._yScale,s.borderWidth))),s},calculatePointY:function(e,t,n){var a,i,r,s,o,d,l,u=this.chart,c=this._yScale,h=0,m=0;if(c.options.stacked){for(o=+c.getRightValue(e),l=(d=u._getSortedVisibleDatasetMetas()).length,a=0;a<l&&(r=d[a]).index!==n;++a)i=u.data.datasets[r.index],"line"===r.type&&r.yAxisID===c.id&&((s=+c.getRightValue(i.data[t]))<0?m+=s||0:h+=s||0);return o<0?c.getPixelForValue(m+o):c.getPixelForValue(h+o)}return c.getPixelForValue(e)},updateBezierControlPoints:function(){var e,t,n,a,i=this.chart,r=this.getMeta(),s=r.dataset._model,o=i.chartArea,d=r.data||[];function l(e,t,n){return Math.max(Math.min(e,n),t)}if(s.spanGaps&&(d=d.filter((function(e){return!e._model.skip}))),"monotone"===s.cubicInterpolationMode)z.splineCurveMonotone(d);else for(e=0,t=d.length;e<t;++e)n=d[e]._model,a=z.splineCurve(z.previousItem(d,e)._model,n,z.nextItem(d,e)._model,s.tension),n.controlPointPreviousX=a.previous.x,n.controlPointPreviousY=a.previous.y,n.controlPointNextX=a.next.x,n.controlPointNextY=a.next.y;if(i.options.elements.line.capBezierPoints)for(e=0,t=d.length;e<t;++e)n=d[e]._model,ze(n,o)&&(e>0&&ze(d[e-1]._model,o)&&(n.controlPointPreviousX=l(n.controlPointPreviousX,o.left,o.right),n.controlPointPreviousY=l(n.controlPointPreviousY,o.top,o.bottom)),e<d.length-1&&ze(d[e+1]._model,o)&&(n.controlPointNextX=l(n.controlPointNextX,o.left,o.right),n.controlPointNextY=l(n.controlPointNextY,o.top,o.bottom)))},draw:function(){var e,t=this.chart,n=this.getMeta(),a=n.data||[],i=t.chartArea,r=t.canvas,s=0,o=a.length;for(this._showLine&&(e=n.dataset._model.clip,z.canvas.clipArea(t.ctx,{left:!1===e.left?0:i.left-e.left,right:!1===e.right?r.width:i.right+e.right,top:!1===e.top?0:i.top-e.top,bottom:!1===e.bottom?r.height:i.bottom+e.bottom}),n.dataset.draw(),z.canvas.unclipArea(t.ctx));s<o;++s)a[s].draw(i)},setHoverStyle:function(e){var t=e._model,n=e._options,a=z.getHoverColor;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth,radius:t.radius},t.backgroundColor=Ie(n.hoverBackgroundColor,a(n.backgroundColor)),t.borderColor=Ie(n.hoverBorderColor,a(n.borderColor)),t.borderWidth=Ie(n.hoverBorderWidth,n.borderWidth),t.radius=Ie(n.hoverRadius,n.radius)}}),Ue=z.options.resolve;W._set("polarArea",{scale:{type:"radialLinear",angleLines:{display:!1},gridLines:{circular:!0},pointLabels:{display:!1},ticks:{beginAtZero:!0}},animation:{animateRotate:!0,animateScale:!0},startAngle:-.5*Math.PI,legendCallback:function(e){var t,n,a,i=document.createElement("ul"),r=e.data,s=r.datasets,o=r.labels;if(i.setAttribute("class",e.id+"-legend"),s.length)for(t=0,n=s[0].data.length;t<n;++t)(a=i.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=s[0].backgroundColor[t],o[t]&&a.appendChild(document.createTextNode(o[t]));return i.outerHTML},legend:{labels:{generateLabels:function(e){var t=e.data;return t.labels.length&&t.datasets.length?t.labels.map((function(n,a){var i=e.getDatasetMeta(0),r=i.controller.getStyle(a);return{text:n,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,hidden:isNaN(t.datasets[0].data[a])||i.data[a].hidden,index:a}})):[]}},onClick:function(e,t){var n,a,i,r=t.index,s=this.chart;for(n=0,a=(s.data.datasets||[]).length;n<a;++n)(i=s.getDatasetMeta(n)).data[r].hidden=!i.data[r].hidden;s.update()}},tooltips:{callbacks:{title:function(){return""},label:function(e,t){return t.labels[e.index]+": "+e.yLabel}}}});var $e=ae.extend({dataElementType:be.Arc,linkScales:z.noop,_dataElementOptions:["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"],_getIndexScaleId:function(){return this.chart.scale.id},_getValueScaleId:function(){return this.chart.scale.id},update:function(e){var t,n,a,i=this,r=i.getDataset(),s=i.getMeta(),o=i.chart.options.startAngle||0,d=i._starts=[],l=i._angles=[],u=s.data;for(i._updateRadius(),s.count=i.countVisibleElements(),t=0,n=r.data.length;t<n;t++)d[t]=o,a=i._computeAngle(t),l[t]=a,o+=a;for(t=0,n=u.length;t<n;++t)u[t]._options=i._resolveDataElementOptions(u[t],t),i.updateElement(u[t],t,e)},_updateRadius:function(){var e=this,t=e.chart,n=t.chartArea,a=t.options,i=Math.min(n.right-n.left,n.bottom-n.top);t.outerRadius=Math.max(i/2,0),t.innerRadius=Math.max(a.cutoutPercentage?t.outerRadius/100*a.cutoutPercentage:1,0),t.radiusLength=(t.outerRadius-t.innerRadius)/t.getVisibleDatasetCount(),e.outerRadius=t.outerRadius-t.radiusLength*e.index,e.innerRadius=e.outerRadius-t.radiusLength},updateElement:function(e,t,n){var a=this,i=a.chart,r=a.getDataset(),s=i.options,o=s.animation,d=i.scale,l=i.data.labels,u=d.xCenter,c=d.yCenter,h=s.startAngle,m=e.hidden?0:d.getDistanceFromCenterForValue(r.data[t]),_=a._starts[t],f=_+(e.hidden?0:a._angles[t]),p=o.animateScale?0:d.getDistanceFromCenterForValue(r.data[t]),g=e._options||{};z.extend(e,{_datasetIndex:a.index,_index:t,_scale:d,_model:{backgroundColor:g.backgroundColor,borderColor:g.borderColor,borderWidth:g.borderWidth,borderAlign:g.borderAlign,x:u,y:c,innerRadius:0,outerRadius:n?p:m,startAngle:n&&o.animateRotate?h:_,endAngle:n&&o.animateRotate?h:f,label:z.valueAtIndexOrDefault(l,t,l[t])}}),e.pivot()},countVisibleElements:function(){var e=this.getDataset(),t=this.getMeta(),n=0;return z.each(t.data,(function(t,a){isNaN(e.data[a])||t.hidden||n++})),n},setHoverStyle:function(e){var t=e._model,n=e._options,a=z.getHoverColor,i=z.valueOrDefault;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth},t.backgroundColor=i(n.hoverBackgroundColor,a(n.backgroundColor)),t.borderColor=i(n.hoverBorderColor,a(n.borderColor)),t.borderWidth=i(n.hoverBorderWidth,n.borderWidth)},_computeAngle:function(e){var t=this,n=this.getMeta().count,a=t.getDataset(),i=t.getMeta();if(isNaN(a.data[e])||i.data[e].hidden)return 0;var r={chart:t.chart,dataIndex:e,dataset:a,datasetIndex:t.index};return Ue([t.chart.options.elements.arc.angle,2*Math.PI/n],r,e)}});W._set("pie",z.clone(W.doughnut)),W._set("pie",{cutoutPercentage:0});var Ge=Fe,Ke=z.valueOrDefault;W._set("radar",{spanGaps:!1,scale:{type:"radialLinear"},elements:{line:{fill:"start",tension:0}}});var Xe=ae.extend({datasetElementType:be.Line,dataElementType:be.Point,linkScales:z.noop,_datasetElementOptions:["backgroundColor","borderWidth","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","fill"],_dataElementOptions:{backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},_getIndexScaleId:function(){return this.chart.scale.id},_getValueScaleId:function(){return this.chart.scale.id},update:function(e){var t,n,a=this,i=a.getMeta(),r=i.dataset,s=i.data||[],o=a.chart.scale,d=a._config;for(void 0!==d.tension&&void 0===d.lineTension&&(d.lineTension=d.tension),r._scale=o,r._datasetIndex=a.index,r._children=s,r._loop=!0,r._model=a._resolveDatasetElementOptions(r),r.pivot(),t=0,n=s.length;t<n;++t)a.updateElement(s[t],t,e);for(a.updateBezierControlPoints(),t=0,n=s.length;t<n;++t)s[t].pivot()},updateElement:function(e,t,n){var a=this,i=e.custom||{},r=a.getDataset(),s=a.chart.scale,o=s.getPointPositionForValue(t,r.data[t]),d=a._resolveDataElementOptions(e,t),l=a.getMeta().dataset._model,u=n?s.xCenter:o.x,c=n?s.yCenter:o.y;e._scale=s,e._options=d,e._datasetIndex=a.index,e._index=t,e._model={x:u,y:c,skip:i.skip||isNaN(u)||isNaN(c),radius:d.radius,pointStyle:d.pointStyle,rotation:d.rotation,backgroundColor:d.backgroundColor,borderColor:d.borderColor,borderWidth:d.borderWidth,tension:Ke(i.tension,l?l.tension:0),hitRadius:d.hitRadius}},_resolveDatasetElementOptions:function(){var e=this,t=e._config,n=e.chart.options,a=ae.prototype._resolveDatasetElementOptions.apply(e,arguments);return a.spanGaps=Ke(t.spanGaps,n.spanGaps),a.tension=Ke(t.lineTension,n.elements.line.tension),a},updateBezierControlPoints:function(){var e,t,n,a,i=this.getMeta(),r=this.chart.chartArea,s=i.data||[];function o(e,t,n){return Math.max(Math.min(e,n),t)}for(i.dataset._model.spanGaps&&(s=s.filter((function(e){return!e._model.skip}))),e=0,t=s.length;e<t;++e)n=s[e]._model,a=z.splineCurve(z.previousItem(s,e,!0)._model,n,z.nextItem(s,e,!0)._model,n.tension),n.controlPointPreviousX=o(a.previous.x,r.left,r.right),n.controlPointPreviousY=o(a.previous.y,r.top,r.bottom),n.controlPointNextX=o(a.next.x,r.left,r.right),n.controlPointNextY=o(a.next.y,r.top,r.bottom)},setHoverStyle:function(e){var t=e._model,n=e._options,a=z.getHoverColor;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth,radius:t.radius},t.backgroundColor=Ke(n.hoverBackgroundColor,a(n.backgroundColor)),t.borderColor=Ke(n.hoverBorderColor,a(n.borderColor)),t.borderWidth=Ke(n.hoverBorderWidth,n.borderWidth),t.radius=Ke(n.hoverRadius,n.radius)}});W._set("scatter",{hover:{mode:"single"},scales:{xAxes:[{id:"x-axis-1",type:"linear",position:"bottom"}],yAxes:[{id:"y-axis-1",type:"linear",position:"left"}]},tooltips:{callbacks:{title:function(){return""},label:function(e){return"("+e.xLabel+", "+e.yLabel+")"}}}}),W._set("global",{datasets:{scatter:{showLine:!1}}});var Ze={bar:He,bubble:Ce,doughnut:Fe,horizontalBar:Ne,line:Je,polarArea:$e,pie:Ge,radar:Xe,scatter:Je};function Qe(e,t){return e.native?{x:e.x,y:e.y}:z.getRelativePosition(e,t)}function et(e,t){var n,a,i,r,s,o,d=e._getSortedVisibleDatasetMetas();for(a=0,r=d.length;a<r;++a)for(i=0,s=(n=d[a].data).length;i<s;++i)(o=n[i])._view.skip||t(o)}function tt(e,t){var n=[];return et(e,(function(e){e.inRange(t.x,t.y)&&n.push(e)})),n}function nt(e,t,n,a){var i=Number.POSITIVE_INFINITY,r=[];return et(e,(function(e){if(!n||e.inRange(t.x,t.y)){var s=e.getCenterPoint(),o=a(t,s);o<i?(r=[e],i=o):o===i&&r.push(e)}})),r}function at(e){var t=-1!==e.indexOf("x"),n=-1!==e.indexOf("y");return function(e,a){var i=t?Math.abs(e.x-a.x):0,r=n?Math.abs(e.y-a.y):0;return Math.sqrt(Math.pow(i,2)+Math.pow(r,2))}}function it(e,t,n){var a=Qe(t,e);n.axis=n.axis||"x";var i=at(n.axis),r=n.intersect?tt(e,a):nt(e,a,!1,i),s=[];return r.length?(e._getSortedVisibleDatasetMetas().forEach((function(e){var t=e.data[r[0]._index];t&&!t._view.skip&&s.push(t)})),s):[]}var rt={modes:{single:function(e,t){var n=Qe(t,e),a=[];return et(e,(function(e){if(e.inRange(n.x,n.y))return a.push(e),a})),a.slice(0,1)},label:it,index:it,dataset:function(e,t,n){var a=Qe(t,e);n.axis=n.axis||"xy";var i=at(n.axis),r=n.intersect?tt(e,a):nt(e,a,!1,i);return r.length>0&&(r=e.getDatasetMeta(r[0]._datasetIndex).data),r},"x-axis":function(e,t){return it(e,t,{intersect:!1})},point:function(e,t){return tt(e,Qe(t,e))},nearest:function(e,t,n){var a=Qe(t,e);n.axis=n.axis||"xy";var i=at(n.axis);return nt(e,a,n.intersect,i)},x:function(e,t,n){var a=Qe(t,e),i=[],r=!1;return et(e,(function(e){e.inXRange(a.x)&&i.push(e),e.inRange(a.x,a.y)&&(r=!0)})),n.intersect&&!r&&(i=[]),i},y:function(e,t,n){var a=Qe(t,e),i=[],r=!1;return et(e,(function(e){e.inYRange(a.y)&&i.push(e),e.inRange(a.x,a.y)&&(r=!0)})),n.intersect&&!r&&(i=[]),i}}},st=z.extend;function ot(e,t){return z.where(e,(function(e){return e.pos===t}))}function dt(e,t){return e.sort((function(e,n){var a=t?n:e,i=t?e:n;return a.weight===i.weight?a.index-i.index:a.weight-i.weight}))}function lt(e,t,n,a){return Math.max(e[n],t[n])+Math.max(e[a],t[a])}function ut(e,t,n){var a,i,r=n.box,s=e.maxPadding;if(n.size&&(e[n.pos]-=n.size),n.size=n.horizontal?r.height:r.width,e[n.pos]+=n.size,r.getPadding){var o=r.getPadding();s.top=Math.max(s.top,o.top),s.left=Math.max(s.left,o.left),s.bottom=Math.max(s.bottom,o.bottom),s.right=Math.max(s.right,o.right)}if(a=t.outerWidth-lt(s,e,"left","right"),i=t.outerHeight-lt(s,e,"top","bottom"),a!==e.w||i!==e.h){e.w=a,e.h=i;var d=n.horizontal?[a,e.w]:[i,e.h];return!(d[0]===d[1]||isNaN(d[0])&&isNaN(d[1]))}}function ct(e,t){var n=t.maxPadding;function a(e){var a={left:0,top:0,right:0,bottom:0};return e.forEach((function(e){a[e]=Math.max(t[e],n[e])})),a}return a(e?["left","right"]:["top","bottom"])}function ht(e,t,n){var a,i,r,s,o,d,l=[];for(a=0,i=e.length;a<i;++a)(s=(r=e[a]).box).update(r.width||t.w,r.height||t.h,ct(r.horizontal,t)),ut(t,n,r)&&(d=!0,l.length&&(o=!0)),s.fullWidth||l.push(r);return o&&ht(l,t,n)||d}function mt(e,t,n){var a,i,r,s,o=n.padding,d=t.x,l=t.y;for(a=0,i=e.length;a<i;++a)s=(r=e[a]).box,r.horizontal?(s.left=s.fullWidth?o.left:t.left,s.right=s.fullWidth?n.outerWidth-o.right:t.left+t.w,s.top=l,s.bottom=l+s.height,s.width=s.right-s.left,l=s.bottom):(s.left=d,s.right=d+s.width,s.top=t.top,s.bottom=t.top+t.h,s.height=s.bottom-s.top,d=s.right);t.x=d,t.y=l}W._set("global",{layout:{padding:{top:0,right:0,bottom:0,left:0}}});var _t,ft={defaults:{},addBox:function(e,t){e.boxes||(e.boxes=[]),t.fullWidth=t.fullWidth||!1,t.position=t.position||"top",t.weight=t.weight||0,t._layers=t._layers||function(){return[{z:0,draw:function(){t.draw.apply(t,arguments)}}]},e.boxes.push(t)},removeBox:function(e,t){var n=e.boxes?e.boxes.indexOf(t):-1;-1!==n&&e.boxes.splice(n,1)},configure:function(e,t,n){for(var a,i=["fullWidth","position","weight"],r=i.length,s=0;s<r;++s)a=i[s],n.hasOwnProperty(a)&&(t[a]=n[a])},update:function(e,t,n){if(e){var a=e.options.layout||{},i=z.options.toPadding(a.padding),r=t-i.width,s=n-i.height,o=function(e){var t=function(e){var t,n,a,i=[];for(t=0,n=(e||[]).length;t<n;++t)a=e[t],i.push({index:t,box:a,pos:a.position,horizontal:a.isHorizontal(),weight:a.weight});return i}(e),n=dt(ot(t,"left"),!0),a=dt(ot(t,"right")),i=dt(ot(t,"top"),!0),r=dt(ot(t,"bottom"));return{leftAndTop:n.concat(i),rightAndBottom:a.concat(r),chartArea:ot(t,"chartArea"),vertical:n.concat(a),horizontal:i.concat(r)}}(e.boxes),d=o.vertical,l=o.horizontal,u=Object.freeze({outerWidth:t,outerHeight:n,padding:i,availableWidth:r,vBoxMaxWidth:r/2/d.length,hBoxMaxHeight:s/2}),c=st({maxPadding:st({},i),w:r,h:s,x:i.left,y:i.top},i);!function(e,t){var n,a,i;for(n=0,a=e.length;n<a;++n)(i=e[n]).width=i.horizontal?i.box.fullWidth&&t.availableWidth:t.vBoxMaxWidth,i.height=i.horizontal&&t.hBoxMaxHeight}(d.concat(l),u),ht(d,c,u),ht(l,c,u)&&ht(d,c,u),function(e){var t=e.maxPadding;function n(n){var a=Math.max(t[n]-e[n],0);return e[n]+=a,a}e.y+=n("top"),e.x+=n("left"),n("right"),n("bottom")}(c),mt(o.leftAndTop,c,u),c.x+=c.w,c.y+=c.h,mt(o.rightAndBottom,c,u),e.chartArea={left:c.left,top:c.top,right:c.left+c.w,bottom:c.top+c.h},z.each(o.chartArea,(function(t){var n=t.box;st(n,e.chartArea),n.update(c.w,c.h)}))}}},pt=(_t=Object.freeze({__proto__:null,default:"/*\r\n * DOM element rendering detection\r\n * https://davidwalsh.name/detect-node-insertion\r\n */\r\n@keyframes chartjs-render-animation {\r\n\tfrom { opacity: 0.99; }\r\n\tto { opacity: 1; }\r\n}\r\n\r\n.chartjs-render-monitor {\r\n\tanimation: chartjs-render-animation 0.001s;\r\n}\r\n\r\n/*\r\n * DOM element resizing detection\r\n * https://github.com/marcj/css-element-queries\r\n */\r\n.chartjs-size-monitor,\r\n.chartjs-size-monitor-expand,\r\n.chartjs-size-monitor-shrink {\r\n\tposition: absolute;\r\n\tdirection: ltr;\r\n\tleft: 0;\r\n\ttop: 0;\r\n\tright: 0;\r\n\tbottom: 0;\r\n\toverflow: hidden;\r\n\tpointer-events: none;\r\n\tvisibility: hidden;\r\n\tz-index: -1;\r\n}\r\n\r\n.chartjs-size-monitor-expand > div {\r\n\tposition: absolute;\r\n\twidth: 1000000px;\r\n\theight: 1000000px;\r\n\tleft: 0;\r\n\ttop: 0;\r\n}\r\n\r\n.chartjs-size-monitor-shrink > div {\r\n\tposition: absolute;\r\n\twidth: 200%;\r\n\theight: 200%;\r\n\tleft: 0;\r\n\ttop: 0;\r\n}\r\n"}))&&_t.default||_t,gt=["animationstart","webkitAnimationStart"],yt={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"};function Mt(e,t){var n=z.getStyle(e,t),a=n&&n.match(/^(\d+)(\.\d+)?px$/);return a?Number(a[1]):void 0}var vt=!!function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("e",null,t)}catch(e){}return e}()&&{passive:!0};function Lt(e,t,n){e.addEventListener(t,n,vt)}function bt(e,t,n){e.removeEventListener(t,n,vt)}function kt(e,t,n,a,i){return{type:e,chart:t,native:i||null,x:void 0!==n?n:null,y:void 0!==a?a:null}}function Yt(e){var t=document.createElement("div");return t.className=e||"",t}function Dt(e,t,n){var a,i,r,s,o=e.$chartjs||(e.$chartjs={}),d=o.resizer=function(e){var t=Yt("chartjs-size-monitor"),n=Yt("chartjs-size-monitor-expand"),a=Yt("chartjs-size-monitor-shrink");n.appendChild(Yt()),a.appendChild(Yt()),t.appendChild(n),t.appendChild(a),t._reset=function(){n.scrollLeft=1e6,n.scrollTop=1e6,a.scrollLeft=1e6,a.scrollTop=1e6};var i=function(){t._reset(),e()};return Lt(n,"scroll",i.bind(n,"expand")),Lt(a,"scroll",i.bind(a,"shrink")),t}((a=function(){if(o.resizer){var a=n.options.maintainAspectRatio&&e.parentNode,i=a?a.clientWidth:0;t(kt("resize",n)),a&&a.clientWidth<i&&n.canvas&&t(kt("resize",n))}},r=!1,s=[],function(){s=Array.prototype.slice.call(arguments),i=i||this,r||(r=!0,z.requestAnimFrame.call(window,(function(){r=!1,a.apply(i,s)})))}));!function(e,t){var n=e.$chartjs||(e.$chartjs={}),a=n.renderProxy=function(e){"chartjs-render-animation"===e.animationName&&t()};z.each(gt,(function(t){Lt(e,t,a)})),n.reflow=!!e.offsetParent,e.classList.add("chartjs-render-monitor")}(e,(function(){if(o.resizer){var t=e.parentNode;t&&t!==d.parentNode&&t.insertBefore(d,t.firstChild),d._reset()}}))}function wt(e){var t=e.$chartjs||{},n=t.resizer;delete t.resizer,function(e){var t=e.$chartjs||{},n=t.renderProxy;n&&(z.each(gt,(function(t){bt(e,t,n)})),delete t.renderProxy),e.classList.remove("chartjs-render-monitor")}(e),n&&n.parentNode&&n.parentNode.removeChild(n)}var xt={disableCSSInjection:!1,_enabled:"undefined"!=typeof window&&"undefined"!=typeof document,_ensureLoaded:function(e){if(!this.disableCSSInjection){var t=e.getRootNode?e.getRootNode():document;!function(e,t){var n=e.$chartjs||(e.$chartjs={});if(!n.containsStyles){n.containsStyles=!0,t="/* Chart.js */\n"+t;var a=document.createElement("style");a.setAttribute("type","text/css"),a.appendChild(document.createTextNode(t)),e.appendChild(a)}}(t.host?t:document.head,pt)}},acquireContext:function(e,t){"string"==typeof e?e=document.getElementById(e):e.length&&(e=e[0]),e&&e.canvas&&(e=e.canvas);var n=e&&e.getContext&&e.getContext("2d");return n&&n.canvas===e?(this._ensureLoaded(e),function(e,t){var n=e.style,a=e.getAttribute("height"),i=e.getAttribute("width");if(e.$chartjs={initial:{height:a,width:i,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",null===i||""===i){var r=Mt(e,"width");void 0!==r&&(e.width=r)}if(null===a||""===a)if(""===e.style.height)e.height=e.width/(t.options.aspectRatio||2);else{var s=Mt(e,"height");void 0!==r&&(e.height=s)}}(e,t),n):null},releaseContext:function(e){var t=e.canvas;if(t.$chartjs){var n=t.$chartjs.initial;["height","width"].forEach((function(e){var a=n[e];z.isNullOrUndef(a)?t.removeAttribute(e):t.setAttribute(e,a)})),z.each(n.style||{},(function(e,n){t.style[n]=e})),t.width=t.width,delete t.$chartjs}},addEventListener:function(e,t,n){var a=e.canvas;if("resize"!==t){var i=n.$chartjs||(n.$chartjs={});Lt(a,t,(i.proxies||(i.proxies={}))[e.id+"_"+t]=function(t){n(function(e,t){var n=yt[e.type]||e.type,a=z.getRelativePosition(e,t);return kt(n,t,a.x,a.y,e)}(t,e))})}else Dt(a,n,e)},removeEventListener:function(e,t,n){var a=e.canvas;if("resize"!==t){var i=((n.$chartjs||{}).proxies||{})[e.id+"_"+t];i&&bt(a,t,i)}else wt(a)}};z.addEvent=Lt,z.removeEvent=bt;var Tt=xt._enabled?xt:{acquireContext:function(e){return e&&e.canvas&&(e=e.canvas),e&&e.getContext("2d")||null}},St=z.extend({initialize:function(){},acquireContext:function(){},releaseContext:function(){},addEventListener:function(){},removeEventListener:function(){}},Tt);W._set("global",{plugins:{}});var Ht={_plugins:[],_cacheId:0,register:function(e){var t=this._plugins;[].concat(e).forEach((function(e){-1===t.indexOf(e)&&t.push(e)})),this._cacheId++},unregister:function(e){var t=this._plugins;[].concat(e).forEach((function(e){var n=t.indexOf(e);-1!==n&&t.splice(n,1)})),this._cacheId++},clear:function(){this._plugins=[],this._cacheId++},count:function(){return this._plugins.length},getAll:function(){return this._plugins},notify:function(e,t,n){var a,i,r,s,o,d=this.descriptors(e),l=d.length;for(a=0;a<l;++a)if("function"==typeof(o=(r=(i=d[a]).plugin)[t])&&((s=[e].concat(n||[])).push(i.options),!1===o.apply(r,s)))return!1;return!0},descriptors:function(e){var t=e.$plugins||(e.$plugins={});if(t.id===this._cacheId)return t.descriptors;var n=[],a=[],i=e&&e.config||{},r=i.options&&i.options.plugins||{};return this._plugins.concat(i.plugins||[]).forEach((function(e){if(-1===n.indexOf(e)){var t=e.id,i=r[t];!1!==i&&(!0===i&&(i=z.clone(W.global.plugins[t])),n.push(e),a.push({plugin:e,options:i||{}}))}})),t.descriptors=a,t.id=this._cacheId,a},_invalidate:function(e){delete e.$plugins}},jt={constructors:{},defaults:{},registerScaleType:function(e,t,n){this.constructors[e]=t,this.defaults[e]=z.clone(n)},getScaleConstructor:function(e){return this.constructors.hasOwnProperty(e)?this.constructors[e]:void 0},getScaleDefaults:function(e){return this.defaults.hasOwnProperty(e)?z.merge(Object.create(null),[W.scale,this.defaults[e]]):{}},updateScaleDefaults:function(e,t){this.defaults.hasOwnProperty(e)&&(this.defaults[e]=z.extend(this.defaults[e],t))},addScalesToLayout:function(e){z.each(e.scales,(function(t){t.fullWidth=t.options.fullWidth,t.position=t.options.position,t.weight=t.options.weight,ft.addBox(e,t)}))}},Pt=z.valueOrDefault,Ct=z.rtl.getRtlAdapter;W._set("global",{tooltips:{enabled:!0,custom:null,mode:"nearest",position:"average",intersect:!0,backgroundColor:"rgba(0,0,0,0.8)",titleFontStyle:"bold",titleSpacing:2,titleMarginBottom:6,titleFontColor:"#fff",titleAlign:"left",bodySpacing:2,bodyFontColor:"#fff",bodyAlign:"left",footerFontStyle:"bold",footerSpacing:2,footerMarginTop:6,footerFontColor:"#fff",footerAlign:"left",yPadding:6,xPadding:6,caretPadding:2,caretSize:5,cornerRadius:6,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,callbacks:{beforeTitle:z.noop,title:function(e,t){var n="",a=t.labels,i=a?a.length:0;if(e.length>0){var r=e[0];r.label?n=r.label:r.xLabel?n=r.xLabel:i>0&&r.index<i&&(n=a[r.index])}return n},afterTitle:z.noop,beforeBody:z.noop,beforeLabel:z.noop,label:function(e,t){var n=t.datasets[e.datasetIndex].label||"";return n&&(n+=": "),z.isNullOrUndef(e.value)?n+=e.yLabel:n+=e.value,n},labelColor:function(e,t){var n=t.getDatasetMeta(e.datasetIndex).data[e.index]._view;return{borderColor:n.borderColor,backgroundColor:n.backgroundColor}},labelTextColor:function(){return this._options.bodyFontColor},afterLabel:z.noop,afterBody:z.noop,beforeFooter:z.noop,footer:z.noop,afterFooter:z.noop}}});var At={average:function(e){if(!e.length)return!1;var t,n,a=0,i=0,r=0;for(t=0,n=e.length;t<n;++t){var s=e[t];if(s&&s.hasValue()){var o=s.tooltipPosition();a+=o.x,i+=o.y,++r}}return{x:a/r,y:i/r}},nearest:function(e,t){var n,a,i,r=t.x,s=t.y,o=Number.POSITIVE_INFINITY;for(n=0,a=e.length;n<a;++n){var d=e[n];if(d&&d.hasValue()){var l=d.getCenterPoint(),u=z.distanceBetweenPoints(t,l);u<o&&(o=u,i=d)}}if(i){var c=i.tooltipPosition();r=c.x,s=c.y}return{x:r,y:s}}};function Ot(e,t){return t&&(z.isArray(t)?Array.prototype.push.apply(e,t):e.push(t)),e}function Et(e){return("string"==typeof e||e instanceof String)&&e.indexOf("\n")>-1?e.split("\n"):e}function Wt(e){var t=W.global;return{xPadding:e.xPadding,yPadding:e.yPadding,xAlign:e.xAlign,yAlign:e.yAlign,rtl:e.rtl,textDirection:e.textDirection,bodyFontColor:e.bodyFontColor,_bodyFontFamily:Pt(e.bodyFontFamily,t.defaultFontFamily),_bodyFontStyle:Pt(e.bodyFontStyle,t.defaultFontStyle),_bodyAlign:e.bodyAlign,bodyFontSize:Pt(e.bodyFontSize,t.defaultFontSize),bodySpacing:e.bodySpacing,titleFontColor:e.titleFontColor,_titleFontFamily:Pt(e.titleFontFamily,t.defaultFontFamily),_titleFontStyle:Pt(e.titleFontStyle,t.defaultFontStyle),titleFontSize:Pt(e.titleFontSize,t.defaultFontSize),_titleAlign:e.titleAlign,titleSpacing:e.titleSpacing,titleMarginBottom:e.titleMarginBottom,footerFontColor:e.footerFontColor,_footerFontFamily:Pt(e.footerFontFamily,t.defaultFontFamily),_footerFontStyle:Pt(e.footerFontStyle,t.defaultFontStyle),footerFontSize:Pt(e.footerFontSize,t.defaultFontSize),_footerAlign:e.footerAlign,footerSpacing:e.footerSpacing,footerMarginTop:e.footerMarginTop,caretSize:e.caretSize,cornerRadius:e.cornerRadius,backgroundColor:e.backgroundColor,opacity:0,legendColorBackground:e.multiKeyBackground,displayColors:e.displayColors,borderColor:e.borderColor,borderWidth:e.borderWidth}}function Ft(e,t){return"center"===t?e.x+e.width/2:"right"===t?e.x+e.width-e.xPadding:e.x+e.xPadding}function Nt(e){return Ot([],Et(e))}var It=G.extend({initialize:function(){this._model=Wt(this._options),this._lastActive=[]},getTitle:function(){var e=this,t=e._options,n=t.callbacks,a=n.beforeTitle.apply(e,arguments),i=n.title.apply(e,arguments),r=n.afterTitle.apply(e,arguments),s=[];return s=Ot(s,Et(a)),s=Ot(s,Et(i)),s=Ot(s,Et(r))},getBeforeBody:function(){return Nt(this._options.callbacks.beforeBody.apply(this,arguments))},getBody:function(e,t){var n=this,a=n._options.callbacks,i=[];return z.each(e,(function(e){var r={before:[],lines:[],after:[]};Ot(r.before,Et(a.beforeLabel.call(n,e,t))),Ot(r.lines,a.label.call(n,e,t)),Ot(r.after,Et(a.afterLabel.call(n,e,t))),i.push(r)})),i},getAfterBody:function(){return Nt(this._options.callbacks.afterBody.apply(this,arguments))},getFooter:function(){var e=this,t=e._options.callbacks,n=t.beforeFooter.apply(e,arguments),a=t.footer.apply(e,arguments),i=t.afterFooter.apply(e,arguments),r=[];return r=Ot(r,Et(n)),r=Ot(r,Et(a)),r=Ot(r,Et(i))},update:function(e){var t,n,a,i,r,s,o,d,l,u,c=this,h=c._options,m=c._model,_=c._model=Wt(h),f=c._active,p=c._data,g={xAlign:m.xAlign,yAlign:m.yAlign},y={x:m.x,y:m.y},M={width:m.width,height:m.height},v={x:m.caretX,y:m.caretY};if(f.length){_.opacity=1;var L=[],b=[];v=At[h.position].call(c,f,c._eventPosition);var k=[];for(t=0,n=f.length;t<n;++t)k.push((a=f[t],i=void 0,r=void 0,s=void 0,o=void 0,d=void 0,l=void 0,u=void 0,i=a._xScale,r=a._yScale||a._scale,s=a._index,o=a._datasetIndex,d=a._chart.getDatasetMeta(o).controller,l=d._getIndexScale(),u=d._getValueScale(),{xLabel:i?i.getLabelForIndex(s,o):"",yLabel:r?r.getLabelForIndex(s,o):"",label:l?""+l.getLabelForIndex(s,o):"",value:u?""+u.getLabelForIndex(s,o):"",index:s,datasetIndex:o,x:a._model.x,y:a._model.y}));h.filter&&(k=k.filter((function(e){return h.filter(e,p)}))),h.itemSort&&(k=k.sort((function(e,t){return h.itemSort(e,t,p)}))),z.each(k,(function(e){L.push(h.callbacks.labelColor.call(c,e,c._chart)),b.push(h.callbacks.labelTextColor.call(c,e,c._chart))})),_.title=c.getTitle(k,p),_.beforeBody=c.getBeforeBody(k,p),_.body=c.getBody(k,p),_.afterBody=c.getAfterBody(k,p),_.footer=c.getFooter(k,p),_.x=v.x,_.y=v.y,_.caretPadding=h.caretPadding,_.labelColors=L,_.labelTextColors=b,_.dataPoints=k,M=function(e,t){var n=e._chart.ctx,a=2*t.yPadding,i=0,r=t.body,s=r.reduce((function(e,t){return e+t.before.length+t.lines.length+t.after.length}),0);s+=t.beforeBody.length+t.afterBody.length;var o=t.title.length,d=t.footer.length,l=t.titleFontSize,u=t.bodyFontSize,c=t.footerFontSize;a+=o*l,a+=o?(o-1)*t.titleSpacing:0,a+=o?t.titleMarginBottom:0,a+=s*u,a+=s?(s-1)*t.bodySpacing:0,a+=d?t.footerMarginTop:0,a+=d*c,a+=d?(d-1)*t.footerSpacing:0;var h=0,m=function(e){i=Math.max(i,n.measureText(e).width+h)};return n.font=z.fontString(l,t._titleFontStyle,t._titleFontFamily),z.each(t.title,m),n.font=z.fontString(u,t._bodyFontStyle,t._bodyFontFamily),z.each(t.beforeBody.concat(t.afterBody),m),h=t.displayColors?u+2:0,z.each(r,(function(e){z.each(e.before,m),z.each(e.lines,m),z.each(e.after,m)})),h=0,n.font=z.fontString(c,t._footerFontStyle,t._footerFontFamily),z.each(t.footer,m),{width:i+=2*t.xPadding,height:a}}(this,_),y=function(e,t,n,a){var i=e.x,r=e.y,s=e.caretSize,o=e.caretPadding,d=e.cornerRadius,l=n.xAlign,u=n.yAlign,c=s+o,h=d+o;return"right"===l?i-=t.width:"center"===l&&((i-=t.width/2)+t.width>a.width&&(i=a.width-t.width),i<0&&(i=0)),"top"===u?r+=c:r-="bottom"===u?t.height+c:t.height/2,"center"===u?"left"===l?i+=c:"right"===l&&(i-=c):"left"===l?i-=h:"right"===l&&(i+=h),{x:i,y:r}}(_,M,g=function(e,t){var n,a,i,r,s,o=e._model,d=e._chart,l=e._chart.chartArea,u="center",c="center";o.y<t.height?c="top":o.y>d.height-t.height&&(c="bottom");var h=(l.left+l.right)/2,m=(l.top+l.bottom)/2;"center"===c?(n=function(e){return e<=h},a=function(e){return e>h}):(n=function(e){return e<=t.width/2},a=function(e){return e>=d.width-t.width/2}),i=function(e){return e+t.width+o.caretSize+o.caretPadding>d.width},r=function(e){return e-t.width-o.caretSize-o.caretPadding<0},s=function(e){return e<=m?"top":"bottom"},n(o.x)?(u="left",i(o.x)&&(u="center",c=s(o.y))):a(o.x)&&(u="right",r(o.x)&&(u="center",c=s(o.y)));var _=e._options;return{xAlign:_.xAlign?_.xAlign:u,yAlign:_.yAlign?_.yAlign:c}}(this,M),c._chart)}else _.opacity=0;return _.xAlign=g.xAlign,_.yAlign=g.yAlign,_.x=y.x,_.y=y.y,_.width=M.width,_.height=M.height,_.caretX=v.x,_.caretY=v.y,c._model=_,e&&h.custom&&h.custom.call(c,_),c},drawCaret:function(e,t){var n=this._chart.ctx,a=this._view,i=this.getCaretPosition(e,t,a);n.lineTo(i.x1,i.y1),n.lineTo(i.x2,i.y2),n.lineTo(i.x3,i.y3)},getCaretPosition:function(e,t,n){var a,i,r,s,o,d,l=n.caretSize,u=n.cornerRadius,c=n.xAlign,h=n.yAlign,m=e.x,_=e.y,f=t.width,p=t.height;if("center"===h)o=_+p/2,"left"===c?(i=(a=m)-l,r=a,s=o+l,d=o-l):(i=(a=m+f)+l,r=a,s=o-l,d=o+l);else if("left"===c?(a=(i=m+u+l)-l,r=i+l):"right"===c?(a=(i=m+f-u-l)-l,r=i+l):(a=(i=n.caretX)-l,r=i+l),"top"===h)o=(s=_)-l,d=s;else{o=(s=_+p)+l,d=s;var g=r;r=a,a=g}return{x1:a,x2:i,x3:r,y1:s,y2:o,y3:d}},drawTitle:function(e,t,n){var a,i,r,s=t.title,o=s.length;if(o){var d=Ct(t.rtl,t.x,t.width);for(e.x=Ft(t,t._titleAlign),n.textAlign=d.textAlign(t._titleAlign),n.textBaseline="middle",a=t.titleFontSize,i=t.titleSpacing,n.fillStyle=t.titleFontColor,n.font=z.fontString(a,t._titleFontStyle,t._titleFontFamily),r=0;r<o;++r)n.fillText(s[r],d.x(e.x),e.y+a/2),e.y+=a+i,r+1===o&&(e.y+=t.titleMarginBottom-i)}},drawBody:function(e,t,n){var a,i,r,s,o,d,l,u,c=t.bodyFontSize,h=t.bodySpacing,m=t._bodyAlign,_=t.body,f=t.displayColors,p=0,g=f?Ft(t,"left"):0,y=Ct(t.rtl,t.x,t.width),M=function(t){n.fillText(t,y.x(e.x+p),e.y+c/2),e.y+=c+h},v=y.textAlign(m);for(n.textAlign=m,n.textBaseline="middle",n.font=z.fontString(c,t._bodyFontStyle,t._bodyFontFamily),e.x=Ft(t,v),n.fillStyle=t.bodyFontColor,z.each(t.beforeBody,M),p=f&&"right"!==v?"center"===m?c/2+1:c+2:0,o=0,l=_.length;o<l;++o){for(a=_[o],i=t.labelTextColors[o],r=t.labelColors[o],n.fillStyle=i,z.each(a.before,M),d=0,u=(s=a.lines).length;d<u;++d){if(f){var L=y.x(g);n.fillStyle=t.legendColorBackground,n.fillRect(y.leftForLtr(L,c),e.y,c,c),n.lineWidth=1,n.strokeStyle=r.borderColor,n.strokeRect(y.leftForLtr(L,c),e.y,c,c),n.fillStyle=r.backgroundColor,n.fillRect(y.leftForLtr(y.xPlus(L,1),c-2),e.y+1,c-2,c-2),n.fillStyle=i}M(s[d])}z.each(a.after,M)}p=0,z.each(t.afterBody,M),e.y-=h},drawFooter:function(e,t,n){var a,i,r=t.footer,s=r.length;if(s){var o=Ct(t.rtl,t.x,t.width);for(e.x=Ft(t,t._footerAlign),e.y+=t.footerMarginTop,n.textAlign=o.textAlign(t._footerAlign),n.textBaseline="middle",a=t.footerFontSize,n.fillStyle=t.footerFontColor,n.font=z.fontString(a,t._footerFontStyle,t._footerFontFamily),i=0;i<s;++i)n.fillText(r[i],o.x(e.x),e.y+a/2),e.y+=a+t.footerSpacing}},drawBackground:function(e,t,n,a){n.fillStyle=t.backgroundColor,n.strokeStyle=t.borderColor,n.lineWidth=t.borderWidth;var i=t.xAlign,r=t.yAlign,s=e.x,o=e.y,d=a.width,l=a.height,u=t.cornerRadius;n.beginPath(),n.moveTo(s+u,o),"top"===r&&this.drawCaret(e,a),n.lineTo(s+d-u,o),n.quadraticCurveTo(s+d,o,s+d,o+u),"center"===r&&"right"===i&&this.drawCaret(e,a),n.lineTo(s+d,o+l-u),n.quadraticCurveTo(s+d,o+l,s+d-u,o+l),"bottom"===r&&this.drawCaret(e,a),n.lineTo(s+u,o+l),n.quadraticCurveTo(s,o+l,s,o+l-u),"center"===r&&"left"===i&&this.drawCaret(e,a),n.lineTo(s,o+u),n.quadraticCurveTo(s,o,s+u,o),n.closePath(),n.fill(),t.borderWidth>0&&n.stroke()},draw:function(){var e=this._chart.ctx,t=this._view;if(0!==t.opacity){var n={width:t.width,height:t.height},a={x:t.x,y:t.y},i=Math.abs(t.opacity<.001)?0:t.opacity,r=t.title.length||t.beforeBody.length||t.body.length||t.afterBody.length||t.footer.length;this._options.enabled&&r&&(e.save(),e.globalAlpha=i,this.drawBackground(a,t,e,n),a.y+=t.yPadding,z.rtl.overrideTextDirection(e,t.textDirection),this.drawTitle(a,t,e),this.drawBody(a,t,e),this.drawFooter(a,t,e),z.rtl.restoreTextDirection(e,t.textDirection),e.restore())}},handleEvent:function(e){var t,n=this,a=n._options;return n._lastActive=n._lastActive||[],"mouseout"===e.type?n._active=[]:(n._active=n._chart.getElementsAtEventForMode(e,a.mode,a),a.reverse&&n._active.reverse()),(t=!z.arrayEquals(n._active,n._lastActive))&&(n._lastActive=n._active,(a.enabled||a.custom)&&(n._eventPosition={x:e.x,y:e.y},n.update(!0),n.pivot())),t}}),Rt=At,zt=It;zt.positioners=Rt;var Bt=z.valueOrDefault;function Vt(){return z.merge(Object.create(null),[].slice.call(arguments),{merger:function(e,t,n,a){if("xAxes"===e||"yAxes"===e){var i,r,s,o=n[e].length;for(t[e]||(t[e]=[]),i=0;i<o;++i)s=n[e][i],r=Bt(s.type,"xAxes"===e?"category":"linear"),i>=t[e].length&&t[e].push({}),!t[e][i].type||s.type&&s.type!==t[e][i].type?z.merge(t[e][i],[jt.getScaleDefaults(r),s]):z.merge(t[e][i],s)}else z._merger(e,t,n,a)}})}function qt(){return z.merge(Object.create(null),[].slice.call(arguments),{merger:function(e,t,n,a){var i=t[e]||Object.create(null),r=n[e];"scales"===e?t[e]=Vt(i,r):"scale"===e?t[e]=z.merge(i,[jt.getScaleDefaults(r.type),r]):z._merger(e,t,n,a)}})}function Jt(e){var t=e.options;z.each(e.scales,(function(t){ft.removeBox(e,t)})),t=qt(W.global,W[e.config.type],t),e.options=e.config.options=t,e.ensureScalesHaveIDs(),e.buildOrUpdateScales(),e.tooltip._options=t.tooltips,e.tooltip.initialize()}function Ut(e,t,n){var a,i=function(e){return e.id===a};do{a=t+n++}while(z.findIndex(e,i)>=0);return a}function $t(e){return"top"===e||"bottom"===e}function Gt(e,t){return function(n,a){return n[e]===a[e]?n[t]-a[t]:n[e]-a[e]}}W._set("global",{elements:{},events:["mousemove","mouseout","click","touchstart","touchmove"],hover:{onHover:null,mode:"nearest",intersect:!0,animationDuration:400},onClick:null,maintainAspectRatio:!0,responsive:!0,responsiveAnimationDuration:0});var Kt=function(e,t){return this.construct(e,t),this};z.extend(Kt.prototype,{construct:function(e,t){var n=this;t=function(e){var t=(e=e||Object.create(null)).data=e.data||{};return t.datasets=t.datasets||[],t.labels=t.labels||[],e.options=qt(W.global,W[e.type],e.options||{}),e}(t);var a=St.acquireContext(e,t),i=a&&a.canvas,r=i&&i.height,s=i&&i.width;n.id=z.uid(),n.ctx=a,n.canvas=i,n.config=t,n.width=s,n.height=r,n.aspectRatio=r?s/r:null,n.options=t.options,n._bufferedRender=!1,n._layers=[],n.chart=n,n.controller=n,Kt.instances[n.id]=n,Object.defineProperty(n,"data",{get:function(){return n.config.data},set:function(e){n.config.data=e}}),a&&i?(n.initialize(),n.update()):console.error("Failed to create chart: can't acquire context from the given item")},initialize:function(){var e=this;return Ht.notify(e,"beforeInit"),z.retinaScale(e,e.options.devicePixelRatio),e.bindEvents(),e.options.responsive&&e.resize(!0),e.initToolTip(),Ht.notify(e,"afterInit"),e},clear:function(){return z.canvas.clear(this),this},stop:function(){return Z.cancelAnimation(this),this},resize:function(e){var t=this,n=t.options,a=t.canvas,i=n.maintainAspectRatio&&t.aspectRatio||null,r=Math.max(0,Math.floor(z.getMaximumWidth(a))),s=Math.max(0,Math.floor(i?r/i:z.getMaximumHeight(a)));if((t.width!==r||t.height!==s)&&(a.width=t.width=r,a.height=t.height=s,a.style.width=r+"px",a.style.height=s+"px",z.retinaScale(t,n.devicePixelRatio),!e)){var o={width:r,height:s};Ht.notify(t,"resize",[o]),n.onResize&&n.onResize(t,o),t.stop(),t.update({duration:n.responsiveAnimationDuration})}},ensureScalesHaveIDs:function(){var e=this.options,t=e.scales||{},n=e.scale;z.each(t.xAxes,(function(e,n){e.id||(e.id=Ut(t.xAxes,"x-axis-",n))})),z.each(t.yAxes,(function(e,n){e.id||(e.id=Ut(t.yAxes,"y-axis-",n))})),n&&(n.id=n.id||"scale")},buildOrUpdateScales:function(){var e=this,t=e.options,n=e.scales||{},a=[],i=Object.keys(n).reduce((function(e,t){return e[t]=!1,e}),{});t.scales&&(a=a.concat((t.scales.xAxes||[]).map((function(e){return{options:e,dtype:"category",dposition:"bottom"}})),(t.scales.yAxes||[]).map((function(e){return{options:e,dtype:"linear",dposition:"left"}})))),t.scale&&a.push({options:t.scale,dtype:"radialLinear",isDefault:!0,dposition:"chartArea"}),z.each(a,(function(t){var a=t.options,r=a.id,s=Bt(a.type,t.dtype);$t(a.position)!==$t(t.dposition)&&(a.position=t.dposition),i[r]=!0;var o=null;if(r in n&&n[r].type===s)(o=n[r]).options=a,o.ctx=e.ctx,o.chart=e;else{var d=jt.getScaleConstructor(s);if(!d)return;o=new d({id:r,type:s,options:a,ctx:e.ctx,chart:e}),n[o.id]=o}o.mergeTicksOptions(),t.isDefault&&(e.scale=o)})),z.each(i,(function(e,t){e||delete n[t]})),e.scales=n,jt.addScalesToLayout(this)},buildOrUpdateControllers:function(){var e,t,n=this,a=[],i=n.data.datasets;for(e=0,t=i.length;e<t;e++){var r=i[e],s=n.getDatasetMeta(e),o=r.type||n.config.type;if(s.type&&s.type!==o&&(n.destroyDatasetMeta(e),s=n.getDatasetMeta(e)),s.type=o,s.order=r.order||0,s.index=e,s.controller)s.controller.updateIndex(e),s.controller.linkScales();else{var d=Ze[s.type];if(void 0===d)throw new Error('"'+s.type+'" is not a chart type.');s.controller=new d(n,e),a.push(s.controller)}}return a},resetElements:function(){var e=this;z.each(e.data.datasets,(function(t,n){e.getDatasetMeta(n).controller.reset()}),e)},reset:function(){this.resetElements(),this.tooltip.initialize()},update:function(e){var t,n,a=this;if(e&&"object"==typeof e||(e={duration:e,lazy:arguments[1]}),Jt(a),Ht._invalidate(a),!1!==Ht.notify(a,"beforeUpdate")){a.tooltip._data=a.data;var i=a.buildOrUpdateControllers();for(t=0,n=a.data.datasets.length;t<n;t++)a.getDatasetMeta(t).controller.buildOrUpdateElements();a.updateLayout(),a.options.animation&&a.options.animation.duration&&z.each(i,(function(e){e.reset()})),a.updateDatasets(),a.tooltip.initialize(),a.lastActive=[],Ht.notify(a,"afterUpdate"),a._layers.sort(Gt("z","_idx")),a._bufferedRender?a._bufferedRequest={duration:e.duration,easing:e.easing,lazy:e.lazy}:a.render(e)}},updateLayout:function(){var e=this;!1!==Ht.notify(e,"beforeLayout")&&(ft.update(this,this.width,this.height),e._layers=[],z.each(e.boxes,(function(t){t._configure&&t._configure(),e._layers.push.apply(e._layers,t._layers())}),e),e._layers.forEach((function(e,t){e._idx=t})),Ht.notify(e,"afterScaleUpdate"),Ht.notify(e,"afterLayout"))},updateDatasets:function(){if(!1!==Ht.notify(this,"beforeDatasetsUpdate")){for(var e=0,t=this.data.datasets.length;e<t;++e)this.updateDataset(e);Ht.notify(this,"afterDatasetsUpdate")}},updateDataset:function(e){var t=this.getDatasetMeta(e),n={meta:t,index:e};!1!==Ht.notify(this,"beforeDatasetUpdate",[n])&&(t.controller._update(),Ht.notify(this,"afterDatasetUpdate",[n]))},render:function(e){var t=this;e&&"object"==typeof e||(e={duration:e,lazy:arguments[1]});var n=t.options.animation,a=Bt(e.duration,n&&n.duration),i=e.lazy;if(!1!==Ht.notify(t,"beforeRender")){var r=function(e){Ht.notify(t,"afterRender"),z.callback(n&&n.onComplete,[e],t)};if(n&&a){var s=new X({numSteps:a/16.66,easing:e.easing||n.easing,render:function(e,t){var n=z.easing.effects[t.easing],a=t.currentStep,i=a/t.numSteps;e.draw(n(i),i,a)},onAnimationProgress:n.onProgress,onAnimationComplete:r});Z.addAnimation(t,s,a,i)}else t.draw(),r(new X({numSteps:0,chart:t}));return t}},draw:function(e){var t,n,a=this;if(a.clear(),z.isNullOrUndef(e)&&(e=1),a.transition(e),!(a.width<=0||a.height<=0)&&!1!==Ht.notify(a,"beforeDraw",[e])){for(n=a._layers,t=0;t<n.length&&n[t].z<=0;++t)n[t].draw(a.chartArea);for(a.drawDatasets(e);t<n.length;++t)n[t].draw(a.chartArea);a._drawTooltip(e),Ht.notify(a,"afterDraw",[e])}},transition:function(e){for(var t=0,n=(this.data.datasets||[]).length;t<n;++t)this.isDatasetVisible(t)&&this.getDatasetMeta(t).controller.transition(e);this.tooltip.transition(e)},_getSortedDatasetMetas:function(e){var t,n,a=[];for(t=0,n=(this.data.datasets||[]).length;t<n;++t)e&&!this.isDatasetVisible(t)||a.push(this.getDatasetMeta(t));return a.sort(Gt("order","index")),a},_getSortedVisibleDatasetMetas:function(){return this._getSortedDatasetMetas(!0)},drawDatasets:function(e){var t,n;if(!1!==Ht.notify(this,"beforeDatasetsDraw",[e])){for(n=(t=this._getSortedVisibleDatasetMetas()).length-1;n>=0;--n)this.drawDataset(t[n],e);Ht.notify(this,"afterDatasetsDraw",[e])}},drawDataset:function(e,t){var n={meta:e,index:e.index,easingValue:t};!1!==Ht.notify(this,"beforeDatasetDraw",[n])&&(e.controller.draw(t),Ht.notify(this,"afterDatasetDraw",[n]))},_drawTooltip:function(e){var t=this.tooltip,n={tooltip:t,easingValue:e};!1!==Ht.notify(this,"beforeTooltipDraw",[n])&&(t.draw(),Ht.notify(this,"afterTooltipDraw",[n]))},getElementAtEvent:function(e){return rt.modes.single(this,e)},getElementsAtEvent:function(e){return rt.modes.label(this,e,{intersect:!0})},getElementsAtXAxis:function(e){return rt.modes["x-axis"](this,e,{intersect:!0})},getElementsAtEventForMode:function(e,t,n){var a=rt.modes[t];return"function"==typeof a?a(this,e,n):[]},getDatasetAtEvent:function(e){return rt.modes.dataset(this,e,{intersect:!0})},getDatasetMeta:function(e){var t=this.data.datasets[e];t._meta||(t._meta={});var n=t._meta[this.id];return n||(n=t._meta[this.id]={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:t.order||0,index:e}),n},getVisibleDatasetCount:function(){for(var e=0,t=0,n=this.data.datasets.length;t<n;++t)this.isDatasetVisible(t)&&e++;return e},isDatasetVisible:function(e){var t=this.getDatasetMeta(e);return"boolean"==typeof t.hidden?!t.hidden:!this.data.datasets[e].hidden},generateLegend:function(){return this.options.legendCallback(this)},destroyDatasetMeta:function(e){var t=this.id,n=this.data.datasets[e],a=n._meta&&n._meta[t];a&&(a.controller.destroy(),delete n._meta[t])},destroy:function(){var e,t,n=this,a=n.canvas;for(n.stop(),e=0,t=n.data.datasets.length;e<t;++e)n.destroyDatasetMeta(e);a&&(n.unbindEvents(),z.canvas.clear(n),St.releaseContext(n.ctx),n.canvas=null,n.ctx=null),Ht.notify(n,"destroy"),delete Kt.instances[n.id]},toBase64Image:function(){return this.canvas.toDataURL.apply(this.canvas,arguments)},initToolTip:function(){var e=this;e.tooltip=new zt({_chart:e,_chartInstance:e,_data:e.data,_options:e.options.tooltips},e)},bindEvents:function(){var e=this,t=e._listeners={},n=function(){e.eventHandler.apply(e,arguments)};z.each(e.options.events,(function(a){St.addEventListener(e,a,n),t[a]=n})),e.options.responsive&&(n=function(){e.resize()},St.addEventListener(e,"resize",n),t.resize=n)},unbindEvents:function(){var e=this,t=e._listeners;t&&(delete e._listeners,z.each(t,(function(t,n){St.removeEventListener(e,n,t)})))},updateHoverStyle:function(e,t,n){var a,i,r,s=n?"set":"remove";for(i=0,r=e.length;i<r;++i)(a=e[i])&&this.getDatasetMeta(a._datasetIndex).controller[s+"HoverStyle"](a);"dataset"===t&&this.getDatasetMeta(e[0]._datasetIndex).controller["_"+s+"DatasetHoverStyle"]()},eventHandler:function(e){var t=this,n=t.tooltip;if(!1!==Ht.notify(t,"beforeEvent",[e])){t._bufferedRender=!0,t._bufferedRequest=null;var a=t.handleEvent(e);n&&(a=n._start?n.handleEvent(e):a|n.handleEvent(e)),Ht.notify(t,"afterEvent",[e]);var i=t._bufferedRequest;return i?t.render(i):a&&!t.animating&&(t.stop(),t.render({duration:t.options.hover.animationDuration,lazy:!0})),t._bufferedRender=!1,t._bufferedRequest=null,t}},handleEvent:function(e){var t,n=this,a=n.options||{},i=a.hover;return n.lastActive=n.lastActive||[],"mouseout"===e.type?n.active=[]:n.active=n.getElementsAtEventForMode(e,i.mode,i),z.callback(a.onHover||a.hover.onHover,[e.native,n.active],n),"mouseup"!==e.type&&"click"!==e.type||a.onClick&&a.onClick.call(n,e.native,n.active),n.lastActive.length&&n.updateHoverStyle(n.lastActive,i.mode,!1),n.active.length&&i.mode&&n.updateHoverStyle(n.active,i.mode,!0),t=!z.arrayEquals(n.active,n.lastActive),n.lastActive=n.active,t}}),Kt.instances={};var Xt=Kt;function Zt(){throw new Error("This method is not implemented: either no adapter can be found or an incomplete integration was provided.")}function Qt(e){this.options=e||{}}Kt.Controller=Kt,Kt.types={},z.configMerge=qt,z.scaleMerge=Vt,z.extend(Qt.prototype,{formats:Zt,parse:Zt,format:Zt,add:Zt,diff:Zt,startOf:Zt,endOf:Zt,_create:function(e){return e}}),Qt.override=function(e){z.extend(Qt.prototype,e)};var en={_date:Qt},tn={formatters:{values:function(e){return z.isArray(e)?e:""+e},linear:function(e,t,n){var a=n.length>3?n[2]-n[1]:n[1]-n[0];Math.abs(a)>1&&e!==Math.floor(e)&&(a=e-Math.floor(e));var i=z.log10(Math.abs(a)),r="";if(0!==e)if(Math.max(Math.abs(n[0]),Math.abs(n[n.length-1]))<1e-4){var s=z.log10(Math.abs(e)),o=Math.floor(s)-Math.floor(i);o=Math.max(Math.min(o,20),0),r=e.toExponential(o)}else{var d=-1*Math.floor(i);d=Math.max(Math.min(d,20),0),r=e.toFixed(d)}else r="0";return r},logarithmic:function(e,t,n){var a=e/Math.pow(10,Math.floor(z.log10(e)));return 0===e?"0":1===a||2===a||5===a||0===t||t===n.length-1?e.toExponential():""}}},nn=z.isArray,an=z.isNullOrUndef,rn=z.valueOrDefault,sn=z.valueAtIndexOrDefault;function on(e,t,n){var a,i=e.getTicks().length,r=Math.min(t,i-1),s=e.getPixelForTick(r),o=e._startPixel,d=e._endPixel;if(!(n&&(a=1===i?Math.max(s-o,d-s):0===t?(e.getPixelForTick(1)-s)/2:(s-e.getPixelForTick(r-1))/2,(s+=r<t?a:-a)<o-1e-6||s>d+1e-6)))return s}function dn(e,t,n,a){var i,r,s,o,d,l,u,c,h,m,_,f,p,g=n.length,y=[],M=[],v=[],L=0,b=0;for(i=0;i<g;++i){if(o=n[i].label,d=n[i].major?t.major:t.minor,e.font=l=d.string,u=a[l]=a[l]||{data:{},gc:[]},c=d.lineHeight,h=m=0,an(o)||nn(o)){if(nn(o))for(r=0,s=o.length;r<s;++r)_=o[r],an(_)||nn(_)||(h=z.measureText(e,u.data,u.gc,h,_),m+=c)}else h=z.measureText(e,u.data,u.gc,h,o),m=c;y.push(h),M.push(m),v.push(c/2),L=Math.max(h,L),b=Math.max(m,b)}function k(e){return{width:y[e]||0,height:M[e]||0,offset:v[e]||0}}return function(e,t){z.each(e,(function(e){var n,a=e.gc,i=a.length/2;if(i>t){for(n=0;n<i;++n)delete e.data[a[n]];a.splice(0,i)}}))}(a,g),f=y.indexOf(L),p=M.indexOf(b),{first:k(0),last:k(g-1),widest:k(f),highest:k(p)}}function ln(e){return e.drawTicks?e.tickMarkLength:0}function un(e){var t,n;return e.display?(t=z.options._parseFont(e),n=z.options.toPadding(e.padding),t.lineHeight+n.height):0}function cn(e,t){return z.extend(z.options._parseFont({fontFamily:rn(t.fontFamily,e.fontFamily),fontSize:rn(t.fontSize,e.fontSize),fontStyle:rn(t.fontStyle,e.fontStyle),lineHeight:rn(t.lineHeight,e.lineHeight)}),{color:z.options.resolve([t.fontColor,e.fontColor,W.global.defaultFontColor])})}function hn(e){var t=cn(e,e.minor);return{minor:t,major:e.major.enabled?cn(e,e.major):t}}function mn(e){var t,n,a,i=[];for(n=0,a=e.length;n<a;++n)void 0!==(t=e[n])._index&&i.push(t);return i}function _n(e,t,n,a){var i,r,s,o,d=rn(n,0),l=Math.min(rn(a,e.length),e.length),u=0;for(t=Math.ceil(t),a&&(t=(i=a-n)/Math.floor(i/t)),o=d;o<0;)u++,o=Math.round(d+u*t);for(r=Math.max(d,0);r<l;r++)s=e[r],r===o?(s._index=r,u++,o=Math.round(d+u*t)):delete s.label}W._set("scale",{display:!0,position:"left",offset:!1,gridLines:{display:!0,color:"rgba(0,0,0,0.1)",lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickMarkLength:10,zeroLineWidth:1,zeroLineColor:"rgba(0,0,0,0.25)",zeroLineBorderDash:[],zeroLineBorderDashOffset:0,offsetGridLines:!1,borderDash:[],borderDashOffset:0},scaleLabel:{display:!1,labelString:"",padding:{top:4,bottom:4}},ticks:{beginAtZero:!1,minRotation:0,maxRotation:50,mirror:!1,padding:0,reverse:!1,display:!0,autoSkip:!0,autoSkipPadding:0,labelOffset:0,callback:tn.formatters.values,minor:{},major:{}}});var fn=G.extend({zeroLineIndex:0,getPadding:function(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}},getTicks:function(){return this._ticks},_getLabels:function(){var e=this.chart.data;return this.options.labels||(this.isHorizontal()?e.xLabels:e.yLabels)||e.labels||[]},mergeTicksOptions:function(){},beforeUpdate:function(){z.callback(this.options.beforeUpdate,[this])},update:function(e,t,n){var a,i,r,s,o,d=this,l=d.options.ticks,u=l.sampleSize;if(d.beforeUpdate(),d.maxWidth=e,d.maxHeight=t,d.margins=z.extend({left:0,right:0,top:0,bottom:0},n),d._ticks=null,d.ticks=null,d._labelSizes=null,d._maxLabelLines=0,d.longestLabelWidth=0,d.longestTextCache=d.longestTextCache||{},d._gridLineItems=null,d._labelItems=null,d.beforeSetDimensions(),d.setDimensions(),d.afterSetDimensions(),d.beforeDataLimits(),d.determineDataLimits(),d.afterDataLimits(),d.beforeBuildTicks(),s=d.buildTicks()||[],(!(s=d.afterBuildTicks(s)||s)||!s.length)&&d.ticks)for(s=[],a=0,i=d.ticks.length;a<i;++a)s.push({value:d.ticks[a],major:!1});return d._ticks=s,o=u<s.length,r=d._convertTicksToLabels(o?function(e,t){for(var n=[],a=e.length/t,i=0,r=e.length;i<r;i+=a)n.push(e[Math.floor(i)]);return n}(s,u):s),d._configure(),d.beforeCalculateTickRotation(),d.calculateTickRotation(),d.afterCalculateTickRotation(),d.beforeFit(),d.fit(),d.afterFit(),d._ticksToDraw=l.display&&(l.autoSkip||"auto"===l.source)?d._autoSkip(s):s,o&&(r=d._convertTicksToLabels(d._ticksToDraw)),d.ticks=r,d.afterUpdate(),d.minSize},_configure:function(){var e,t,n=this,a=n.options.ticks.reverse;n.isHorizontal()?(e=n.left,t=n.right):(e=n.top,t=n.bottom,a=!a),n._startPixel=e,n._endPixel=t,n._reversePixels=a,n._length=t-e},afterUpdate:function(){z.callback(this.options.afterUpdate,[this])},beforeSetDimensions:function(){z.callback(this.options.beforeSetDimensions,[this])},setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0},afterSetDimensions:function(){z.callback(this.options.afterSetDimensions,[this])},beforeDataLimits:function(){z.callback(this.options.beforeDataLimits,[this])},determineDataLimits:z.noop,afterDataLimits:function(){z.callback(this.options.afterDataLimits,[this])},beforeBuildTicks:function(){z.callback(this.options.beforeBuildTicks,[this])},buildTicks:z.noop,afterBuildTicks:function(e){var t=this;return nn(e)&&e.length?z.callback(t.options.afterBuildTicks,[t,e]):(t.ticks=z.callback(t.options.afterBuildTicks,[t,t.ticks])||t.ticks,e)},beforeTickToLabelConversion:function(){z.callback(this.options.beforeTickToLabelConversion,[this])},convertTicksToLabels:function(){var e=this.options.ticks;this.ticks=this.ticks.map(e.userCallback||e.callback,this)},afterTickToLabelConversion:function(){z.callback(this.options.afterTickToLabelConversion,[this])},beforeCalculateTickRotation:function(){z.callback(this.options.beforeCalculateTickRotation,[this])},calculateTickRotation:function(){var e,t,n,a,i,r,s,o=this,d=o.options,l=d.ticks,u=o.getTicks().length,c=l.minRotation||0,h=l.maxRotation,m=c;!o._isVisible()||!l.display||c>=h||u<=1||!o.isHorizontal()?o.labelRotation=c:(t=(e=o._getLabelSizes()).widest.width,n=e.highest.height-e.highest.offset,a=Math.min(o.maxWidth,o.chart.width-t),t+6>(i=d.offset?o.maxWidth/u:a/(u-1))&&(i=a/(u-(d.offset?.5:1)),r=o.maxHeight-ln(d.gridLines)-l.padding-un(d.scaleLabel),s=Math.sqrt(t*t+n*n),m=z.toDegrees(Math.min(Math.asin(Math.min((e.highest.height+6)/i,1)),Math.asin(Math.min(r/s,1))-Math.asin(n/s))),m=Math.max(c,Math.min(h,m))),o.labelRotation=m)},afterCalculateTickRotation:function(){z.callback(this.options.afterCalculateTickRotation,[this])},beforeFit:function(){z.callback(this.options.beforeFit,[this])},fit:function(){var e=this,t=e.minSize={width:0,height:0},n=e.chart,a=e.options,i=a.ticks,r=a.scaleLabel,s=a.gridLines,o=e._isVisible(),d="bottom"===a.position,l=e.isHorizontal();if(l?t.width=e.maxWidth:o&&(t.width=ln(s)+un(r)),l?o&&(t.height=ln(s)+un(r)):t.height=e.maxHeight,i.display&&o){var u=hn(i),c=e._getLabelSizes(),h=c.first,m=c.last,_=c.widest,f=c.highest,p=.4*u.minor.lineHeight,g=i.padding;if(l){var y=0!==e.labelRotation,M=z.toRadians(e.labelRotation),v=Math.cos(M),L=Math.sin(M),b=L*_.width+v*(f.height-(y?f.offset:0))+(y?0:p);t.height=Math.min(e.maxHeight,t.height+b+g);var k,Y,D=e.getPixelForTick(0)-e.left,w=e.right-e.getPixelForTick(e.getTicks().length-1);y?(k=d?v*h.width+L*h.offset:L*(h.height-h.offset),Y=d?L*(m.height-m.offset):v*m.width+L*m.offset):(k=h.width/2,Y=m.width/2),e.paddingLeft=Math.max((k-D)*e.width/(e.width-D),0)+3,e.paddingRight=Math.max((Y-w)*e.width/(e.width-w),0)+3}else{var x=i.mirror?0:_.width+g+p;t.width=Math.min(e.maxWidth,t.width+x),e.paddingTop=h.height/2,e.paddingBottom=m.height/2}}e.handleMargins(),l?(e.width=e._length=n.width-e.margins.left-e.margins.right,e.height=t.height):(e.width=t.width,e.height=e._length=n.height-e.margins.top-e.margins.bottom)},handleMargins:function(){var e=this;e.margins&&(e.margins.left=Math.max(e.paddingLeft,e.margins.left),e.margins.top=Math.max(e.paddingTop,e.margins.top),e.margins.right=Math.max(e.paddingRight,e.margins.right),e.margins.bottom=Math.max(e.paddingBottom,e.margins.bottom))},afterFit:function(){z.callback(this.options.afterFit,[this])},isHorizontal:function(){var e=this.options.position;return"top"===e||"bottom"===e},isFullWidth:function(){return this.options.fullWidth},getRightValue:function(e){if(an(e))return NaN;if(("number"==typeof e||e instanceof Number)&&!isFinite(e))return NaN;if(e)if(this.isHorizontal()){if(void 0!==e.x)return this.getRightValue(e.x)}else if(void 0!==e.y)return this.getRightValue(e.y);return e},_convertTicksToLabels:function(e){var t,n,a,i=this;for(i.ticks=e.map((function(e){return e.value})),i.beforeTickToLabelConversion(),t=i.convertTicksToLabels(e)||i.ticks,i.afterTickToLabelConversion(),n=0,a=e.length;n<a;++n)e[n].label=t[n];return t},_getLabelSizes:function(){var e=this,t=e._labelSizes;return t||(e._labelSizes=t=dn(e.ctx,hn(e.options.ticks),e.getTicks(),e.longestTextCache),e.longestLabelWidth=t.widest.width),t},_parseValue:function(e){var t,n,a,i;return nn(e)?(t=+this.getRightValue(e[0]),n=+this.getRightValue(e[1]),a=Math.min(t,n),i=Math.max(t,n)):(t=void 0,n=e=+this.getRightValue(e),a=e,i=e),{min:a,max:i,start:t,end:n}},_getScaleLabel:function(e){var t=this._parseValue(e);return void 0!==t.start?"["+t.start+", "+t.end+"]":+this.getRightValue(e)},getLabelForIndex:z.noop,getPixelForValue:z.noop,getValueForPixel:z.noop,getPixelForTick:function(e){var t=this.options.offset,n=this._ticks.length,a=1/Math.max(n-(t?0:1),1);return e<0||e>n-1?null:this.getPixelForDecimal(e*a+(t?a/2:0))},getPixelForDecimal:function(e){return this._reversePixels&&(e=1-e),this._startPixel+e*this._length},getDecimalForPixel:function(e){var t=(e-this._startPixel)/this._length;return this._reversePixels?1-t:t},getBasePixel:function(){return this.getPixelForValue(this.getBaseValue())},getBaseValue:function(){var e=this.min,t=this.max;return this.beginAtZero?0:e<0&&t<0?t:e>0&&t>0?e:0},_autoSkip:function(e){var t,n,a,i,r=this.options.ticks,s=this._length,o=r.maxTicksLimit||s/this._tickSize()+1,d=r.major.enabled?function(e){var t,n,a=[];for(t=0,n=e.length;t<n;t++)e[t].major&&a.push(t);return a}(e):[],l=d.length,u=d[0],c=d[l-1];if(l>o)return function(e,t,n){var a,i,r=0,s=t[0];for(n=Math.ceil(n),a=0;a<e.length;a++)i=e[a],a===s?(i._index=a,s=t[++r*n]):delete i.label}(e,d,l/o),mn(e);if(a=function(e,t,n,a){var i,r,s,o,d=function(e){var t,n,a=e.length;if(a<2)return!1;for(n=e[0],t=1;t<a;++t)if(e[t]-e[t-1]!==n)return!1;return n}(e),l=(t.length-1)/a;if(!d)return Math.max(l,1);for(s=0,o=(i=z.math._factorize(d)).length-1;s<o;s++)if((r=i[s])>l)return r;return Math.max(l,1)}(d,e,0,o),l>0){for(t=0,n=l-1;t<n;t++)_n(e,a,d[t],d[t+1]);return i=l>1?(c-u)/(l-1):null,_n(e,a,z.isNullOrUndef(i)?0:u-i,u),_n(e,a,c,z.isNullOrUndef(i)?e.length:c+i),mn(e)}return _n(e,a),mn(e)},_tickSize:function(){var e=this.options.ticks,t=z.toRadians(this.labelRotation),n=Math.abs(Math.cos(t)),a=Math.abs(Math.sin(t)),i=this._getLabelSizes(),r=e.autoSkipPadding||0,s=i?i.widest.width+r:0,o=i?i.highest.height+r:0;return this.isHorizontal()?o*n>s*a?s/n:o/a:o*a<s*n?o/n:s/a},_isVisible:function(){var e,t,n,a=this.chart,i=this.options.display;if("auto"!==i)return!!i;for(e=0,t=a.data.datasets.length;e<t;++e)if(a.isDatasetVisible(e)&&((n=a.getDatasetMeta(e)).xAxisID===this.id||n.yAxisID===this.id))return!0;return!1},_computeGridLineItems:function(e){var t,n,a,i,r,s,o,d,l,u,c,h,m,_,f,p,g,y=this,M=y.chart,v=y.options,L=v.gridLines,b=v.position,k=L.offsetGridLines,Y=y.isHorizontal(),D=y._ticksToDraw,w=D.length+(k?1:0),x=ln(L),T=[],S=L.drawBorder?sn(L.lineWidth,0,0):0,H=S/2,j=z._alignPixel,P=function(e){return j(M,e,S)};for("top"===b?(t=P(y.bottom),o=y.bottom-x,l=t-H,c=P(e.top)+H,m=e.bottom):"bottom"===b?(t=P(y.top),c=e.top,m=P(e.bottom)-H,o=t+H,l=y.top+x):"left"===b?(t=P(y.right),s=y.right-x,d=t-H,u=P(e.left)+H,h=e.right):(t=P(y.left),u=e.left,h=P(e.right)-H,s=t+H,d=y.left+x),n=0;n<w;++n)a=D[n]||{},an(a.label)&&n<D.length||(n===y.zeroLineIndex&&v.offset===k?(_=L.zeroLineWidth,f=L.zeroLineColor,p=L.zeroLineBorderDash||[],g=L.zeroLineBorderDashOffset||0):(_=sn(L.lineWidth,n,1),f=sn(L.color,n,"rgba(0,0,0,0.1)"),p=L.borderDash||[],g=L.borderDashOffset||0),void 0!==(i=on(y,a._index||n,k))&&(r=j(M,i,_),Y?s=d=u=h=r:o=l=c=m=r,T.push({tx1:s,ty1:o,tx2:d,ty2:l,x1:u,y1:c,x2:h,y2:m,width:_,color:f,borderDash:p,borderDashOffset:g})));return T.ticksLength=w,T.borderValue=t,T},_computeLabelItems:function(){var e,t,n,a,i,r,s,o,d,l,u,c,h=this,m=h.options,_=m.ticks,f=m.position,p=_.mirror,g=h.isHorizontal(),y=h._ticksToDraw,M=hn(_),v=_.padding,L=ln(m.gridLines),b=-z.toRadians(h.labelRotation),k=[];for("top"===f?(r=h.bottom-L-v,s=b?"left":"center"):"bottom"===f?(r=h.top+L+v,s=b?"right":"center"):"left"===f?(i=h.right-(p?0:L)-v,s=p?"left":"right"):(i=h.left+(p?0:L)+v,s=p?"right":"left"),e=0,t=y.length;e<t;++e)a=(n=y[e]).label,an(a)||(o=h.getPixelForTick(n._index||e)+_.labelOffset,l=(d=n.major?M.major:M.minor).lineHeight,u=nn(a)?a.length:1,g?(i=o,c="top"===f?((b?1:.5)-u)*l:(b?0:.5)*l):(r=o,c=(1-u)*l/2),k.push({x:i,y:r,rotation:b,label:a,font:d,textOffset:c,textAlign:s}));return k},_drawGrid:function(e){var t=this,n=t.options.gridLines;if(n.display){var a,i,r,s,o,d=t.ctx,l=t.chart,u=z._alignPixel,c=n.drawBorder?sn(n.lineWidth,0,0):0,h=t._gridLineItems||(t._gridLineItems=t._computeGridLineItems(e));for(r=0,s=h.length;r<s;++r)a=(o=h[r]).width,i=o.color,a&&i&&(d.save(),d.lineWidth=a,d.strokeStyle=i,d.setLineDash&&(d.setLineDash(o.borderDash),d.lineDashOffset=o.borderDashOffset),d.beginPath(),n.drawTicks&&(d.moveTo(o.tx1,o.ty1),d.lineTo(o.tx2,o.ty2)),n.drawOnChartArea&&(d.moveTo(o.x1,o.y1),d.lineTo(o.x2,o.y2)),d.stroke(),d.restore());if(c){var m,_,f,p,g=c,y=sn(n.lineWidth,h.ticksLength-1,1),M=h.borderValue;t.isHorizontal()?(m=u(l,t.left,g)-g/2,_=u(l,t.right,y)+y/2,f=p=M):(f=u(l,t.top,g)-g/2,p=u(l,t.bottom,y)+y/2,m=_=M),d.lineWidth=c,d.strokeStyle=sn(n.color,0),d.beginPath(),d.moveTo(m,f),d.lineTo(_,p),d.stroke()}}},_drawLabels:function(){var e=this;if(e.options.ticks.display){var t,n,a,i,r,s,o,d,l=e.ctx,u=e._labelItems||(e._labelItems=e._computeLabelItems());for(t=0,a=u.length;t<a;++t){if(s=(r=u[t]).font,l.save(),l.translate(r.x,r.y),l.rotate(r.rotation),l.font=s.string,l.fillStyle=s.color,l.textBaseline="middle",l.textAlign=r.textAlign,o=r.label,d=r.textOffset,nn(o))for(n=0,i=o.length;n<i;++n)l.fillText(""+o[n],0,d),d+=s.lineHeight;else l.fillText(o,0,d);l.restore()}}},_drawTitle:function(){var e=this,t=e.ctx,n=e.options,a=n.scaleLabel;if(a.display){var i,r,s=rn(a.fontColor,W.global.defaultFontColor),o=z.options._parseFont(a),d=z.options.toPadding(a.padding),l=o.lineHeight/2,u=n.position,c=0;if(e.isHorizontal())i=e.left+e.width/2,r="bottom"===u?e.bottom-l-d.bottom:e.top+l+d.top;else{var h="left"===u;i=h?e.left+l+d.top:e.right-l-d.top,r=e.top+e.height/2,c=h?-.5*Math.PI:.5*Math.PI}t.save(),t.translate(i,r),t.rotate(c),t.textAlign="center",t.textBaseline="middle",t.fillStyle=s,t.font=o.string,t.fillText(a.labelString,0,0),t.restore()}},draw:function(e){this._isVisible()&&(this._drawGrid(e),this._drawTitle(),this._drawLabels())},_layers:function(){var e=this,t=e.options,n=t.ticks&&t.ticks.z||0,a=t.gridLines&&t.gridLines.z||0;return e._isVisible()&&n!==a&&e.draw===e._draw?[{z:a,draw:function(){e._drawGrid.apply(e,arguments),e._drawTitle.apply(e,arguments)}},{z:n,draw:function(){e._drawLabels.apply(e,arguments)}}]:[{z:n,draw:function(){e.draw.apply(e,arguments)}}]},_getMatchingVisibleMetas:function(e){var t=this,n=t.isHorizontal();return t.chart._getSortedVisibleDatasetMetas().filter((function(a){return(!e||a.type===e)&&(n?a.xAxisID===t.id:a.yAxisID===t.id)}))}});fn.prototype._draw=fn.prototype.draw;var pn=fn,gn=z.isNullOrUndef,yn=pn.extend({determineDataLimits:function(){var e,t=this,n=t._getLabels(),a=t.options.ticks,i=a.min,r=a.max,s=0,o=n.length-1;void 0!==i&&(e=n.indexOf(i))>=0&&(s=e),void 0!==r&&(e=n.indexOf(r))>=0&&(o=e),t.minIndex=s,t.maxIndex=o,t.min=n[s],t.max=n[o]},buildTicks:function(){var e=this._getLabels(),t=this.minIndex,n=this.maxIndex;this.ticks=0===t&&n===e.length-1?e:e.slice(t,n+1)},getLabelForIndex:function(e,t){var n=this.chart;return n.getDatasetMeta(t).controller._getValueScaleId()===this.id?this.getRightValue(n.data.datasets[t].data[e]):this._getLabels()[e]},_configure:function(){var e=this,t=e.options.offset,n=e.ticks;pn.prototype._configure.call(e),e.isHorizontal()||(e._reversePixels=!e._reversePixels),n&&(e._startValue=e.minIndex-(t?.5:0),e._valueRange=Math.max(n.length-(t?0:1),1))},getPixelForValue:function(e,t,n){var a,i,r,s=this;return gn(t)||gn(n)||(e=s.chart.data.datasets[n].data[t]),gn(e)||(a=s.isHorizontal()?e.x:e.y),(void 0!==a||void 0!==e&&isNaN(t))&&(i=s._getLabels(),e=z.valueOrDefault(a,e),t=-1!==(r=i.indexOf(e))?r:t,isNaN(t)&&(t=e)),s.getPixelForDecimal((t-s._startValue)/s._valueRange)},getPixelForTick:function(e){var t=this.ticks;return e<0||e>t.length-1?null:this.getPixelForValue(t[e],e+this.minIndex)},getValueForPixel:function(e){var t=Math.round(this._startValue+this.getDecimalForPixel(e)*this._valueRange);return Math.min(Math.max(t,0),this.ticks.length-1)},getBasePixel:function(){return this.bottom}}),Mn={position:"bottom"};yn._defaults=Mn;var vn=z.noop,Ln=z.isNullOrUndef,bn=pn.extend({getRightValue:function(e){return"string"==typeof e?+e:pn.prototype.getRightValue.call(this,e)},handleTickRangeOptions:function(){var e=this,t=e.options.ticks;if(t.beginAtZero){var n=z.sign(e.min),a=z.sign(e.max);n<0&&a<0?e.max=0:n>0&&a>0&&(e.min=0)}var i=void 0!==t.min||void 0!==t.suggestedMin,r=void 0!==t.max||void 0!==t.suggestedMax;void 0!==t.min?e.min=t.min:void 0!==t.suggestedMin&&(null===e.min?e.min=t.suggestedMin:e.min=Math.min(e.min,t.suggestedMin)),void 0!==t.max?e.max=t.max:void 0!==t.suggestedMax&&(null===e.max?e.max=t.suggestedMax:e.max=Math.max(e.max,t.suggestedMax)),i!==r&&e.min>=e.max&&(i?e.max=e.min+1:e.min=e.max-1),e.min===e.max&&(e.max++,t.beginAtZero||e.min--)},getTickLimit:function(){var e,t=this.options.ticks,n=t.stepSize,a=t.maxTicksLimit;return n?e=Math.ceil(this.max/n)-Math.floor(this.min/n)+1:(e=this._computeTickLimit(),a=a||11),a&&(e=Math.min(a,e)),e},_computeTickLimit:function(){return Number.POSITIVE_INFINITY},handleDirectionalChanges:vn,buildTicks:function(){var e=this,t=e.options.ticks,n=e.getTickLimit(),a={maxTicks:n=Math.max(2,n),min:t.min,max:t.max,precision:t.precision,stepSize:z.valueOrDefault(t.fixedStepSize,t.stepSize)},i=e.ticks=function(e,t){var n,a,i,r,s=[],o=e.stepSize,d=o||1,l=e.maxTicks-1,u=e.min,c=e.max,h=e.precision,m=t.min,_=t.max,f=z.niceNum((_-m)/l/d)*d;if(f<1e-14&&Ln(u)&&Ln(c))return[m,_];(r=Math.ceil(_/f)-Math.floor(m/f))>l&&(f=z.niceNum(r*f/l/d)*d),o||Ln(h)?n=Math.pow(10,z._decimalPlaces(f)):(n=Math.pow(10,h),f=Math.ceil(f*n)/n),a=Math.floor(m/f)*f,i=Math.ceil(_/f)*f,o&&(!Ln(u)&&z.almostWhole(u/f,f/1e3)&&(a=u),!Ln(c)&&z.almostWhole(c/f,f/1e3)&&(i=c)),r=(i-a)/f,r=z.almostEquals(r,Math.round(r),f/1e3)?Math.round(r):Math.ceil(r),a=Math.round(a*n)/n,i=Math.round(i*n)/n,s.push(Ln(u)?a:u);for(var p=1;p<r;++p)s.push(Math.round((a+p*f)*n)/n);return s.push(Ln(c)?i:c),s}(a,e);e.handleDirectionalChanges(),e.max=z.max(i),e.min=z.min(i),t.reverse?(i.reverse(),e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max)},convertTicksToLabels:function(){var e=this;e.ticksAsNumbers=e.ticks.slice(),e.zeroLineIndex=e.ticks.indexOf(0),pn.prototype.convertTicksToLabels.call(e)},_configure:function(){var e,t=this,n=t.getTicks(),a=t.min,i=t.max;pn.prototype._configure.call(t),t.options.offset&&n.length&&(a-=e=(i-a)/Math.max(n.length-1,1)/2,i+=e),t._startValue=a,t._endValue=i,t._valueRange=i-a}}),kn={position:"left",ticks:{callback:tn.formatters.linear}};function Yn(e,t,n,a){var i,r,s=e.options,o=function(e,t,n){var a=[n.type,void 0===t&&void 0===n.stack?n.index:"",n.stack].join(".");return void 0===e[a]&&(e[a]={pos:[],neg:[]}),e[a]}(t,s.stacked,n),d=o.pos,l=o.neg,u=a.length;for(i=0;i<u;++i)r=e._parseValue(a[i]),isNaN(r.min)||isNaN(r.max)||n.data[i].hidden||(d[i]=d[i]||0,l[i]=l[i]||0,s.relativePoints?d[i]=100:r.min<0||r.max<0?l[i]+=r.min:d[i]+=r.max)}function Dn(e,t,n){var a,i,r=n.length;for(a=0;a<r;++a)i=e._parseValue(n[a]),isNaN(i.min)||isNaN(i.max)||t.data[a].hidden||(e.min=Math.min(e.min,i.min),e.max=Math.max(e.max,i.max))}var wn=bn.extend({determineDataLimits:function(){var e,t,n,a,i=this,r=i.options,s=i.chart.data.datasets,o=i._getMatchingVisibleMetas(),d=r.stacked,l={},u=o.length;if(i.min=Number.POSITIVE_INFINITY,i.max=Number.NEGATIVE_INFINITY,void 0===d)for(e=0;!d&&e<u;++e)d=void 0!==(t=o[e]).stack;for(e=0;e<u;++e)n=s[(t=o[e]).index].data,d?Yn(i,l,t,n):Dn(i,t,n);z.each(l,(function(e){a=e.pos.concat(e.neg),i.min=Math.min(i.min,z.min(a)),i.max=Math.max(i.max,z.max(a))})),i.min=z.isFinite(i.min)&&!isNaN(i.min)?i.min:0,i.max=z.isFinite(i.max)&&!isNaN(i.max)?i.max:1,i.handleTickRangeOptions()},_computeTickLimit:function(){var e;return this.isHorizontal()?Math.ceil(this.width/40):(e=z.options._parseFont(this.options.ticks),Math.ceil(this.height/e.lineHeight))},handleDirectionalChanges:function(){this.isHorizontal()||this.ticks.reverse()},getLabelForIndex:function(e,t){return this._getScaleLabel(this.chart.data.datasets[t].data[e])},getPixelForValue:function(e){return this.getPixelForDecimal((+this.getRightValue(e)-this._startValue)/this._valueRange)},getValueForPixel:function(e){return this._startValue+this.getDecimalForPixel(e)*this._valueRange},getPixelForTick:function(e){var t=this.ticksAsNumbers;return e<0||e>t.length-1?null:this.getPixelForValue(t[e])}}),xn=kn;wn._defaults=xn;var Tn=z.valueOrDefault,Sn=z.math.log10,Hn={position:"left",ticks:{callback:tn.formatters.logarithmic}};function jn(e,t){return z.isFinite(e)&&e>=0?e:t}var Pn=pn.extend({determineDataLimits:function(){var e,t,n,a,i,r,s=this,o=s.options,d=s.chart,l=d.data.datasets,u=s.isHorizontal();function c(e){return u?e.xAxisID===s.id:e.yAxisID===s.id}s.min=Number.POSITIVE_INFINITY,s.max=Number.NEGATIVE_INFINITY,s.minNotZero=Number.POSITIVE_INFINITY;var h=o.stacked;if(void 0===h)for(e=0;e<l.length;e++)if(t=d.getDatasetMeta(e),d.isDatasetVisible(e)&&c(t)&&void 0!==t.stack){h=!0;break}if(o.stacked||h){var m={};for(e=0;e<l.length;e++){var _=[(t=d.getDatasetMeta(e)).type,void 0===o.stacked&&void 0===t.stack?e:"",t.stack].join(".");if(d.isDatasetVisible(e)&&c(t))for(void 0===m[_]&&(m[_]=[]),i=0,r=(a=l[e].data).length;i<r;i++){var f=m[_];n=s._parseValue(a[i]),isNaN(n.min)||isNaN(n.max)||t.data[i].hidden||n.min<0||n.max<0||(f[i]=f[i]||0,f[i]+=n.max)}}z.each(m,(function(e){if(e.length>0){var t=z.min(e),n=z.max(e);s.min=Math.min(s.min,t),s.max=Math.max(s.max,n)}}))}else for(e=0;e<l.length;e++)if(t=d.getDatasetMeta(e),d.isDatasetVisible(e)&&c(t))for(i=0,r=(a=l[e].data).length;i<r;i++)n=s._parseValue(a[i]),isNaN(n.min)||isNaN(n.max)||t.data[i].hidden||n.min<0||n.max<0||(s.min=Math.min(n.min,s.min),s.max=Math.max(n.max,s.max),0!==n.min&&(s.minNotZero=Math.min(n.min,s.minNotZero)));s.min=z.isFinite(s.min)?s.min:null,s.max=z.isFinite(s.max)?s.max:null,s.minNotZero=z.isFinite(s.minNotZero)?s.minNotZero:null,this.handleTickRangeOptions()},handleTickRangeOptions:function(){var e=this,t=e.options.ticks;e.min=jn(t.min,e.min),e.max=jn(t.max,e.max),e.min===e.max&&(0!==e.min&&null!==e.min?(e.min=Math.pow(10,Math.floor(Sn(e.min))-1),e.max=Math.pow(10,Math.floor(Sn(e.max))+1)):(e.min=1,e.max=10)),null===e.min&&(e.min=Math.pow(10,Math.floor(Sn(e.max))-1)),null===e.max&&(e.max=0!==e.min?Math.pow(10,Math.floor(Sn(e.min))+1):10),null===e.minNotZero&&(e.min>0?e.minNotZero=e.min:e.max<1?e.minNotZero=Math.pow(10,Math.floor(Sn(e.max))):e.minNotZero=1)},buildTicks:function(){var e=this,t=e.options.ticks,n=!e.isHorizontal(),a={min:jn(t.min),max:jn(t.max)},i=e.ticks=function(e,t){var n,a,i=[],r=Tn(e.min,Math.pow(10,Math.floor(Sn(t.min)))),s=Math.floor(Sn(t.max)),o=Math.ceil(t.max/Math.pow(10,s));0===r?(n=Math.floor(Sn(t.minNotZero)),a=Math.floor(t.minNotZero/Math.pow(10,n)),i.push(r),r=a*Math.pow(10,n)):(n=Math.floor(Sn(r)),a=Math.floor(r/Math.pow(10,n)));var d=n<0?Math.pow(10,Math.abs(n)):1;do{i.push(r),10==++a&&(a=1,d=++n>=0?1:d),r=Math.round(a*Math.pow(10,n)*d)/d}while(n<s||n===s&&a<o);var l=Tn(e.max,r);return i.push(l),i}(a,e);e.max=z.max(i),e.min=z.min(i),t.reverse?(n=!n,e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max),n&&i.reverse()},convertTicksToLabels:function(){this.tickValues=this.ticks.slice(),pn.prototype.convertTicksToLabels.call(this)},getLabelForIndex:function(e,t){return this._getScaleLabel(this.chart.data.datasets[t].data[e])},getPixelForTick:function(e){var t=this.tickValues;return e<0||e>t.length-1?null:this.getPixelForValue(t[e])},_getFirstTickValue:function(e){var t=Math.floor(Sn(e));return Math.floor(e/Math.pow(10,t))*Math.pow(10,t)},_configure:function(){var e=this,t=e.min,n=0;pn.prototype._configure.call(e),0===t&&(t=e._getFirstTickValue(e.minNotZero),n=Tn(e.options.ticks.fontSize,W.global.defaultFontSize)/e._length),e._startValue=Sn(t),e._valueOffset=n,e._valueRange=(Sn(e.max)-Sn(t))/(1-n)},getPixelForValue:function(e){var t=this,n=0;return(e=+t.getRightValue(e))>t.min&&e>0&&(n=(Sn(e)-t._startValue)/t._valueRange+t._valueOffset),t.getPixelForDecimal(n)},getValueForPixel:function(e){var t=this,n=t.getDecimalForPixel(e);return 0===n&&0===t.min?0:Math.pow(10,t._startValue+(n-t._valueOffset)*t._valueRange)}}),Cn=Hn;Pn._defaults=Cn;var An=z.valueOrDefault,On=z.valueAtIndexOrDefault,En=z.options.resolve,Wn={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,color:"rgba(0,0,0,0.1)",lineWidth:1,borderDash:[],borderDashOffset:0},gridLines:{circular:!1},ticks:{showLabelBackdrop:!0,backdropColor:"rgba(255,255,255,0.75)",backdropPaddingY:2,backdropPaddingX:2,callback:tn.formatters.linear},pointLabels:{display:!0,fontSize:10,callback:function(e){return e}}};function Fn(e){var t=e.ticks;return t.display&&e.display?An(t.fontSize,W.global.defaultFontSize)+2*t.backdropPaddingY:0}function Nn(e,t,n,a,i){return e===a||e===i?{start:t-n/2,end:t+n/2}:e<a||e>i?{start:t-n,end:t}:{start:t,end:t+n}}function In(e){return 0===e||180===e?"center":e<180?"left":"right"}function Rn(e,t,n,a){var i,r,s=n.y+a/2;if(z.isArray(t))for(i=0,r=t.length;i<r;++i)e.fillText(t[i],n.x,s),s+=a;else e.fillText(t,n.x,s)}function zn(e,t,n){90===e||270===e?n.y-=t.h/2:(e>270||e<90)&&(n.y-=t.h)}function Bn(e){return z.isNumber(e)?e:0}var Vn=bn.extend({setDimensions:function(){var e=this;e.width=e.maxWidth,e.height=e.maxHeight,e.paddingTop=Fn(e.options)/2,e.xCenter=Math.floor(e.width/2),e.yCenter=Math.floor((e.height-e.paddingTop)/2),e.drawingArea=Math.min(e.height-e.paddingTop,e.width)/2},determineDataLimits:function(){var e=this,t=e.chart,n=Number.POSITIVE_INFINITY,a=Number.NEGATIVE_INFINITY;z.each(t.data.datasets,(function(i,r){if(t.isDatasetVisible(r)){var s=t.getDatasetMeta(r);z.each(i.data,(function(t,i){var r=+e.getRightValue(t);isNaN(r)||s.data[i].hidden||(n=Math.min(r,n),a=Math.max(r,a))}))}})),e.min=n===Number.POSITIVE_INFINITY?0:n,e.max=a===Number.NEGATIVE_INFINITY?0:a,e.handleTickRangeOptions()},_computeTickLimit:function(){return Math.ceil(this.drawingArea/Fn(this.options))},convertTicksToLabels:function(){var e=this;bn.prototype.convertTicksToLabels.call(e),e.pointLabels=e.chart.data.labels.map((function(){var t=z.callback(e.options.pointLabels.callback,arguments,e);return t||0===t?t:""}))},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},fit:function(){var e=this.options;e.display&&e.pointLabels.display?function(e){var t,n,a,i=z.options._parseFont(e.options.pointLabels),r={l:0,r:e.width,t:0,b:e.height-e.paddingTop},s={};e.ctx.font=i.string,e._pointLabelSizes=[];var o,d,l,u=e.chart.data.labels.length;for(t=0;t<u;t++){a=e.getPointPosition(t,e.drawingArea+5),o=e.ctx,d=i.lineHeight,l=e.pointLabels[t],n=z.isArray(l)?{w:z.longestText(o,o.font,l),h:l.length*d}:{w:o.measureText(l).width,h:d},e._pointLabelSizes[t]=n;var c=e.getIndexAngle(t),h=z.toDegrees(c)%360,m=Nn(h,a.x,n.w,0,180),_=Nn(h,a.y,n.h,90,270);m.start<r.l&&(r.l=m.start,s.l=c),m.end>r.r&&(r.r=m.end,s.r=c),_.start<r.t&&(r.t=_.start,s.t=c),_.end>r.b&&(r.b=_.end,s.b=c)}e.setReductions(e.drawingArea,r,s)}(this):this.setCenterPoint(0,0,0,0)},setReductions:function(e,t,n){var a=this,i=t.l/Math.sin(n.l),r=Math.max(t.r-a.width,0)/Math.sin(n.r),s=-t.t/Math.cos(n.t),o=-Math.max(t.b-(a.height-a.paddingTop),0)/Math.cos(n.b);i=Bn(i),r=Bn(r),s=Bn(s),o=Bn(o),a.drawingArea=Math.min(Math.floor(e-(i+r)/2),Math.floor(e-(s+o)/2)),a.setCenterPoint(i,r,s,o)},setCenterPoint:function(e,t,n,a){var i=this,r=i.width-t-i.drawingArea,s=e+i.drawingArea,o=n+i.drawingArea,d=i.height-i.paddingTop-a-i.drawingArea;i.xCenter=Math.floor((s+r)/2+i.left),i.yCenter=Math.floor((o+d)/2+i.top+i.paddingTop)},getIndexAngle:function(e){var t=this.chart,n=(e*(360/t.data.labels.length)+((t.options||{}).startAngle||0))%360;return(n<0?n+360:n)*Math.PI*2/360},getDistanceFromCenterForValue:function(e){var t=this;if(z.isNullOrUndef(e))return NaN;var n=t.drawingArea/(t.max-t.min);return t.options.ticks.reverse?(t.max-e)*n:(e-t.min)*n},getPointPosition:function(e,t){var n=this.getIndexAngle(e)-Math.PI/2;return{x:Math.cos(n)*t+this.xCenter,y:Math.sin(n)*t+this.yCenter}},getPointPositionForValue:function(e,t){return this.getPointPosition(e,this.getDistanceFromCenterForValue(t))},getBasePosition:function(e){var t=this.min,n=this.max;return this.getPointPositionForValue(e||0,this.beginAtZero?0:t<0&&n<0?n:t>0&&n>0?t:0)},_drawGrid:function(){var e,t,n,a=this,i=a.ctx,r=a.options,s=r.gridLines,o=r.angleLines,d=An(o.lineWidth,s.lineWidth),l=An(o.color,s.color);if(r.pointLabels.display&&function(e){var t=e.ctx,n=e.options,a=n.pointLabels,i=Fn(n),r=e.getDistanceFromCenterForValue(n.ticks.reverse?e.min:e.max),s=z.options._parseFont(a);t.save(),t.font=s.string,t.textBaseline="middle";for(var o=e.chart.data.labels.length-1;o>=0;o--){var d=0===o?i/2:0,l=e.getPointPosition(o,r+d+5),u=On(a.fontColor,o,W.global.defaultFontColor);t.fillStyle=u;var c=e.getIndexAngle(o),h=z.toDegrees(c);t.textAlign=In(h),zn(h,e._pointLabelSizes[o],l),Rn(t,e.pointLabels[o],l,s.lineHeight)}t.restore()}(a),s.display&&z.each(a.ticks,(function(e,n){0!==n&&(t=a.getDistanceFromCenterForValue(a.ticksAsNumbers[n]),function(e,t,n,a){var i,r=e.ctx,s=t.circular,o=e.chart.data.labels.length,d=On(t.color,a-1),l=On(t.lineWidth,a-1);if((s||o)&&d&&l){if(r.save(),r.strokeStyle=d,r.lineWidth=l,r.setLineDash&&(r.setLineDash(t.borderDash||[]),r.lineDashOffset=t.borderDashOffset||0),r.beginPath(),s)r.arc(e.xCenter,e.yCenter,n,0,2*Math.PI);else{i=e.getPointPosition(0,n),r.moveTo(i.x,i.y);for(var u=1;u<o;u++)i=e.getPointPosition(u,n),r.lineTo(i.x,i.y)}r.closePath(),r.stroke(),r.restore()}}(a,s,t,n))})),o.display&&d&&l){for(i.save(),i.lineWidth=d,i.strokeStyle=l,i.setLineDash&&(i.setLineDash(En([o.borderDash,s.borderDash,[]])),i.lineDashOffset=En([o.borderDashOffset,s.borderDashOffset,0])),e=a.chart.data.labels.length-1;e>=0;e--)t=a.getDistanceFromCenterForValue(r.ticks.reverse?a.min:a.max),n=a.getPointPosition(e,t),i.beginPath(),i.moveTo(a.xCenter,a.yCenter),i.lineTo(n.x,n.y),i.stroke();i.restore()}},_drawLabels:function(){var e=this,t=e.ctx,n=e.options.ticks;if(n.display){var a,i,r=e.getIndexAngle(0),s=z.options._parseFont(n),o=An(n.fontColor,W.global.defaultFontColor);t.save(),t.font=s.string,t.translate(e.xCenter,e.yCenter),t.rotate(r),t.textAlign="center",t.textBaseline="middle",z.each(e.ticks,(function(r,d){(0!==d||n.reverse)&&(a=e.getDistanceFromCenterForValue(e.ticksAsNumbers[d]),n.showLabelBackdrop&&(i=t.measureText(r).width,t.fillStyle=n.backdropColor,t.fillRect(-i/2-n.backdropPaddingX,-a-s.size/2-n.backdropPaddingY,i+2*n.backdropPaddingX,s.size+2*n.backdropPaddingY)),t.fillStyle=o,t.fillText(r,0,-a))})),t.restore()}},_drawTitle:z.noop}),qn=Wn;Vn._defaults=qn;var Jn=z._deprecated,Un=z.options.resolve,$n=z.valueOrDefault,Gn=Number.MIN_SAFE_INTEGER||-9007199254740991,Kn=Number.MAX_SAFE_INTEGER||9007199254740991,Xn={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Zn=Object.keys(Xn);function Qn(e,t){return e-t}function ea(e){return z.valueOrDefault(e.time.min,e.ticks.min)}function ta(e){return z.valueOrDefault(e.time.max,e.ticks.max)}function na(e,t,n,a){var i=function(e,t,n){for(var a,i,r,s=0,o=e.length-1;s>=0&&s<=o;){if(i=e[(a=s+o>>1)-1]||null,r=e[a],!i)return{lo:null,hi:r};if(r[t]<n)s=a+1;else{if(!(i[t]>n))return{lo:i,hi:r};o=a-1}}return{lo:r,hi:null}}(e,t,n),r=i.lo?i.hi?i.lo:e[e.length-2]:e[0],s=i.lo?i.hi?i.hi:e[e.length-1]:e[1],o=s[t]-r[t],d=o?(n-r[t])/o:0,l=(s[a]-r[a])*d;return r[a]+l}function aa(e,t){var n=e._adapter,a=e.options.time,i=a.parser,r=i||a.format,s=t;return"function"==typeof i&&(s=i(s)),z.isFinite(s)||(s="string"==typeof r?n.parse(s,r):n.parse(s)),null!==s?+s:(i||"function"!=typeof r||(s=r(t),z.isFinite(s)||(s=n.parse(s))),s)}function ia(e,t){if(z.isNullOrUndef(t))return null;var n=e.options.time,a=aa(e,e.getRightValue(t));return null===a||n.round&&(a=+e._adapter.startOf(a,n.round)),a}function ra(e,t,n,a){var i,r,s,o=Zn.length;for(i=Zn.indexOf(e);i<o-1;++i)if(s=(r=Xn[Zn[i]]).steps?r.steps:Kn,r.common&&Math.ceil((n-t)/(s*r.size))<=a)return Zn[i];return Zn[o-1]}function sa(e,t,n){var a,i,r=[],s={},o=t.length;for(a=0;a<o;++a)s[i=t[a]]=a,r.push({value:i,major:!1});return 0!==o&&n?function(e,t,n,a){var i,r,s=e._adapter,o=+s.startOf(t[0].value,a),d=t[t.length-1].value;for(i=o;i<=d;i=+s.add(i,1,a))(r=n[i])>=0&&(t[r].major=!0);return t}(e,r,s,n):r}var oa=pn.extend({initialize:function(){this.mergeTicksOptions(),pn.prototype.initialize.call(this)},update:function(){var e=this,t=e.options,n=t.time||(t.time={}),a=e._adapter=new en._date(t.adapters.date);return Jn("time scale",n.format,"time.format","time.parser"),Jn("time scale",n.min,"time.min","ticks.min"),Jn("time scale",n.max,"time.max","ticks.max"),z.mergeIf(n.displayFormats,a.formats()),pn.prototype.update.apply(e,arguments)},getRightValue:function(e){return e&&void 0!==e.t&&(e=e.t),pn.prototype.getRightValue.call(this,e)},determineDataLimits:function(){var e,t,n,a,i,r,s,o=this,d=o.chart,l=o._adapter,u=o.options,c=u.time.unit||"day",h=Kn,m=Gn,_=[],f=[],p=[],g=o._getLabels();for(e=0,n=g.length;e<n;++e)p.push(ia(o,g[e]));for(e=0,n=(d.data.datasets||[]).length;e<n;++e)if(d.isDatasetVisible(e))if(i=d.data.datasets[e].data,z.isObject(i[0]))for(f[e]=[],t=0,a=i.length;t<a;++t)r=ia(o,i[t]),_.push(r),f[e][t]=r;else f[e]=p.slice(0),s||(_=_.concat(p),s=!0);else f[e]=[];p.length&&(h=Math.min(h,p[0]),m=Math.max(m,p[p.length-1])),_.length&&(_=n>1?function(e){var t,n,a,i={},r=[];for(t=0,n=e.length;t<n;++t)i[a=e[t]]||(i[a]=!0,r.push(a));return r}(_).sort(Qn):_.sort(Qn),h=Math.min(h,_[0]),m=Math.max(m,_[_.length-1])),h=ia(o,ea(u))||h,m=ia(o,ta(u))||m,h=h===Kn?+l.startOf(Date.now(),c):h,m=m===Gn?+l.endOf(Date.now(),c)+1:m,o.min=Math.min(h,m),o.max=Math.max(h+1,m),o._table=[],o._timestamps={data:_,datasets:f,labels:p}},buildTicks:function(){var e,t,n,a=this,i=a.min,r=a.max,s=a.options,o=s.ticks,d=s.time,l=a._timestamps,u=[],c=a.getLabelCapacity(i),h=o.source,m=s.distribution;for(l="data"===h||"auto"===h&&"series"===m?l.data:"labels"===h?l.labels:function(e,t,n,a){var i,r=e._adapter,s=e.options,o=s.time,d=o.unit||ra(o.minUnit,t,n,a),l=Un([o.stepSize,o.unitStepSize,1]),u="week"===d&&o.isoWeekday,c=t,h=[];if(u&&(c=+r.startOf(c,"isoWeek",u)),c=+r.startOf(c,u?"day":d),r.diff(n,t,d)>1e5*l)throw t+" and "+n+" are too far apart with stepSize of "+l+" "+d;for(i=c;i<n;i=+r.add(i,l,d))h.push(i);return i!==n&&"ticks"!==s.bounds||h.push(i),h}(a,i,r,c),"ticks"===s.bounds&&l.length&&(i=l[0],r=l[l.length-1]),i=ia(a,ea(s))||i,r=ia(a,ta(s))||r,e=0,t=l.length;e<t;++e)(n=l[e])>=i&&n<=r&&u.push(n);return a.min=i,a.max=r,a._unit=d.unit||(o.autoSkip?ra(d.minUnit,a.min,a.max,c):function(e,t,n,a,i){var r,s;for(r=Zn.length-1;r>=Zn.indexOf(n);r--)if(s=Zn[r],Xn[s].common&&e._adapter.diff(i,a,s)>=t-1)return s;return Zn[n?Zn.indexOf(n):0]}(a,u.length,d.minUnit,a.min,a.max)),a._majorUnit=o.major.enabled&&"year"!==a._unit?function(e){for(var t=Zn.indexOf(e)+1,n=Zn.length;t<n;++t)if(Xn[Zn[t]].common)return Zn[t]}(a._unit):void 0,a._table=function(e,t,n,a){if("linear"===a||!e.length)return[{time:t,pos:0},{time:n,pos:1}];var i,r,s,o,d,l=[],u=[t];for(i=0,r=e.length;i<r;++i)(o=e[i])>t&&o<n&&u.push(o);for(u.push(n),i=0,r=u.length;i<r;++i)d=u[i+1],s=u[i-1],o=u[i],void 0!==s&&void 0!==d&&Math.round((d+s)/2)===o||l.push({time:o,pos:i/(r-1)});return l}(a._timestamps.data,i,r,m),a._offsets=function(e,t,n,a,i){var r,s,o=0,d=0;return i.offset&&t.length&&(r=na(e,"time",t[0],"pos"),o=1===t.length?1-r:(na(e,"time",t[1],"pos")-r)/2,s=na(e,"time",t[t.length-1],"pos"),d=1===t.length?s:(s-na(e,"time",t[t.length-2],"pos"))/2),{start:o,end:d,factor:1/(o+1+d)}}(a._table,u,0,0,s),o.reverse&&u.reverse(),sa(a,u,a._majorUnit)},getLabelForIndex:function(e,t){var n=this,a=n._adapter,i=n.chart.data,r=n.options.time,s=i.labels&&e<i.labels.length?i.labels[e]:"",o=i.datasets[t].data[e];return z.isObject(o)&&(s=n.getRightValue(o)),r.tooltipFormat?a.format(aa(n,s),r.tooltipFormat):"string"==typeof s?s:a.format(aa(n,s),r.displayFormats.datetime)},tickFormatFunction:function(e,t,n,a){var i=this._adapter,r=this.options,s=r.time.displayFormats,o=s[this._unit],d=this._majorUnit,l=s[d],u=n[t],c=r.ticks,h=d&&l&&u&&u.major,m=i.format(e,a||(h?l:o)),_=h?c.major:c.minor,f=Un([_.callback,_.userCallback,c.callback,c.userCallback]);return f?f(m,t,n):m},convertTicksToLabels:function(e){var t,n,a=[];for(t=0,n=e.length;t<n;++t)a.push(this.tickFormatFunction(e[t].value,t,e));return a},getPixelForOffset:function(e){var t=this._offsets,n=na(this._table,"time",e,"pos");return this.getPixelForDecimal((t.start+n)*t.factor)},getPixelForValue:function(e,t,n){var a=null;if(void 0!==t&&void 0!==n&&(a=this._timestamps.datasets[n][t]),null===a&&(a=ia(this,e)),null!==a)return this.getPixelForOffset(a)},getPixelForTick:function(e){var t=this.getTicks();return e>=0&&e<t.length?this.getPixelForOffset(t[e].value):null},getValueForPixel:function(e){var t=this._offsets,n=this.getDecimalForPixel(e)/t.factor-t.end,a=na(this._table,"pos",n,"time");return this._adapter._create(a)},_getLabelSize:function(e){var t=this.options.ticks,n=this.ctx.measureText(e).width,a=z.toRadians(this.isHorizontal()?t.maxRotation:t.minRotation),i=Math.cos(a),r=Math.sin(a),s=$n(t.fontSize,W.global.defaultFontSize);return{w:n*i+s*r,h:n*r+s*i}},getLabelWidth:function(e){return this._getLabelSize(e).w},getLabelCapacity:function(e){var t=this,n=t.options.time,a=n.displayFormats,i=a[n.unit]||a.millisecond,r=t.tickFormatFunction(e,0,sa(t,[e],t._majorUnit),i),s=t._getLabelSize(r),o=Math.floor(t.isHorizontal()?t.width/s.w:t.height/s.h);return t.options.offset&&o--,o>0?o:1}}),da={position:"bottom",distribution:"linear",bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,displayFormat:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{autoSkip:!1,source:"auto",major:{enabled:!1}}};oa._defaults=da;var la={category:yn,linear:wn,logarithmic:Pn,radialLinear:Vn,time:oa},ua={datetime:"MMM D, YYYY, h:mm:ss a",millisecond:"h:mm:ss.SSS a",second:"h:mm:ss a",minute:"h:mm a",hour:"hA",day:"MMM D",week:"ll",month:"MMM YYYY",quarter:"[Q]Q - YYYY",year:"YYYY"};en._date.override("function"==typeof e?{_id:"moment",formats:function(){return ua},parse:function(t,n){return"string"==typeof t&&"string"==typeof n?t=e(t,n):t instanceof e||(t=e(t)),t.isValid()?t.valueOf():null},format:function(t,n){return e(t).format(n)},add:function(t,n,a){return e(t).add(n,a).valueOf()},diff:function(t,n,a){return e(t).diff(e(n),a)},startOf:function(t,n,a){return t=e(t),"isoWeek"===n?t.isoWeekday(a).valueOf():t.startOf(n).valueOf()},endOf:function(t,n){return e(t).endOf(n).valueOf()},_create:function(t){return e(t)}}:{}),W._set("global",{plugins:{filler:{propagate:!0}}});var ca={dataset:function(e){var t=e.fill,n=e.chart,a=n.getDatasetMeta(t),i=a&&n.isDatasetVisible(t)&&a.dataset._children||[],r=i.length||0;return r?function(e,t){return t<r&&i[t]._view||null}:null},boundary:function(e){var t=e.boundary,n=t?t.x:null,a=t?t.y:null;return z.isArray(t)?function(e,n){return t[n]}:function(e){return{x:null===n?e.x:n,y:null===a?e.y:a}}}};function ha(e,t,n){var a,i=e._model||{},r=i.fill;if(void 0===r&&(r=!!i.backgroundColor),!1===r||null===r)return!1;if(!0===r)return"origin";if(a=parseFloat(r,10),isFinite(a)&&Math.floor(a)===a)return"-"!==r[0]&&"+"!==r[0]||(a=t+a),!(a===t||a<0||a>=n)&&a;switch(r){case"bottom":return"start";case"top":return"end";case"zero":return"origin";case"origin":case"start":case"end":return r;default:return!1}}function ma(e){return(e.el._scale||{}).getPointPositionForValue?function(e){var t,n,a,i,r,s=e.el._scale,o=s.options,d=s.chart.data.labels.length,l=e.fill,u=[];if(!d)return null;for(t=o.ticks.reverse?s.max:s.min,n=o.ticks.reverse?s.min:s.max,a=s.getPointPositionForValue(0,t),i=0;i<d;++i)r="start"===l||"end"===l?s.getPointPositionForValue(i,"start"===l?t:n):s.getBasePosition(i),o.gridLines.circular&&(r.cx=a.x,r.cy=a.y,r.angle=s.getIndexAngle(i)-Math.PI/2),u.push(r);return u}(e):function(e){var t,n=e.el._model||{},a=e.el._scale||{},i=e.fill,r=null;if(isFinite(i))return null;if("start"===i?r=void 0===n.scaleBottom?a.bottom:n.scaleBottom:"end"===i?r=void 0===n.scaleTop?a.top:n.scaleTop:void 0!==n.scaleZero?r=n.scaleZero:a.getBasePixel&&(r=a.getBasePixel()),null!=r){if(void 0!==r.x&&void 0!==r.y)return r;if(z.isFinite(r))return{x:(t=a.isHorizontal())?r:null,y:t?null:r}}return null}(e)}function _a(e,t,n){var a,i=e[t].fill,r=[t];if(!n)return i;for(;!1!==i&&-1===r.indexOf(i);){if(!isFinite(i))return i;if(!(a=e[i]))return!1;if(a.visible)return i;r.push(i),i=a.fill}return!1}function fa(e){var t=e.fill,n="dataset";return!1===t?null:(isFinite(t)||(n="boundary"),ca[n](e))}function pa(e){return e&&!e.skip}function ga(e,t,n,a,i){var r,s,o,d;if(a&&i){for(e.moveTo(t[0].x,t[0].y),r=1;r<a;++r)z.canvas.lineTo(e,t[r-1],t[r]);if(void 0===n[0].angle)for(e.lineTo(n[i-1].x,n[i-1].y),r=i-1;r>0;--r)z.canvas.lineTo(e,n[r],n[r-1],!0);else for(s=n[0].cx,o=n[0].cy,d=Math.sqrt(Math.pow(n[0].x-s,2)+Math.pow(n[0].y-o,2)),r=i-1;r>0;--r)e.arc(s,o,d,n[r].angle,n[r-1].angle,!0)}}function ya(e,t,n,a,i,r){var s,o,d,l,u,c,h,m,_=t.length,f=a.spanGaps,p=[],g=[],y=0,M=0;for(e.beginPath(),s=0,o=_;s<o;++s)u=n(l=t[d=s%_]._view,d,a),c=pa(l),h=pa(u),r&&void 0===m&&c&&(o=_+(m=s+1)),c&&h?(y=p.push(l),M=g.push(u)):y&&M&&(f?(c&&p.push(l),h&&g.push(u)):(ga(e,p,g,y,M),y=M=0,p=[],g=[]));ga(e,p,g,y,M),e.closePath(),e.fillStyle=i,e.fill()}var Ma={id:"filler",afterDatasetsUpdate:function(e,t){var n,a,i,r,s=(e.data.datasets||[]).length,o=t.propagate,d=[];for(a=0;a<s;++a)r=null,(i=(n=e.getDatasetMeta(a)).dataset)&&i._model&&i instanceof be.Line&&(r={visible:e.isDatasetVisible(a),fill:ha(i,a,s),chart:e,el:i}),n.$filler=r,d.push(r);for(a=0;a<s;++a)(r=d[a])&&(r.fill=_a(d,a,o),r.boundary=ma(r),r.mapper=fa(r))},beforeDatasetsDraw:function(e){var t,n,a,i,r,s,o,d=e._getSortedVisibleDatasetMetas(),l=e.ctx;for(n=d.length-1;n>=0;--n)(t=d[n].$filler)&&t.visible&&(i=(a=t.el)._view,r=a._children||[],s=t.mapper,o=i.backgroundColor||W.global.defaultColor,s&&o&&r.length&&(z.canvas.clipArea(l,e.chartArea),ya(l,r,s,i,o,a._loop),z.canvas.unclipArea(l)))}},va=z.rtl.getRtlAdapter,La=z.noop,ba=z.valueOrDefault;function ka(e,t){return e.usePointStyle&&e.boxWidth>t?t:e.boxWidth}W._set("global",{legend:{display:!0,position:"top",align:"center",fullWidth:!0,reverse:!1,weight:1e3,onClick:function(e,t){var n=t.datasetIndex,a=this.chart,i=a.getDatasetMeta(n);i.hidden=null===i.hidden?!a.data.datasets[n].hidden:null,a.update()},onHover:null,onLeave:null,labels:{boxWidth:40,padding:10,generateLabels:function(e){var t=e.data.datasets,n=e.options.legend||{},a=n.labels&&n.labels.usePointStyle;return e._getSortedDatasetMetas().map((function(n){var i=n.controller.getStyle(a?0:void 0);return{text:t[n.index].label,fillStyle:i.backgroundColor,hidden:!e.isDatasetVisible(n.index),lineCap:i.borderCapStyle,lineDash:i.borderDash,lineDashOffset:i.borderDashOffset,lineJoin:i.borderJoinStyle,lineWidth:i.borderWidth,strokeStyle:i.borderColor,pointStyle:i.pointStyle,rotation:i.rotation,datasetIndex:n.index}}),this)}}},legendCallback:function(e){var t,n,a,i=document.createElement("ul"),r=e.data.datasets;for(i.setAttribute("class",e.id+"-legend"),t=0,n=r.length;t<n;t++)(a=i.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=r[t].backgroundColor,r[t].label&&a.appendChild(document.createTextNode(r[t].label));return i.outerHTML}});var Ya=G.extend({initialize:function(e){z.extend(this,e),this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1},beforeUpdate:La,update:function(e,t,n){var a=this;return a.beforeUpdate(),a.maxWidth=e,a.maxHeight=t,a.margins=n,a.beforeSetDimensions(),a.setDimensions(),a.afterSetDimensions(),a.beforeBuildLabels(),a.buildLabels(),a.afterBuildLabels(),a.beforeFit(),a.fit(),a.afterFit(),a.afterUpdate(),a.minSize},afterUpdate:La,beforeSetDimensions:La,setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0,e.minSize={width:0,height:0}},afterSetDimensions:La,beforeBuildLabels:La,buildLabels:function(){var e=this,t=e.options.labels||{},n=z.callback(t.generateLabels,[e.chart],e)||[];t.filter&&(n=n.filter((function(n){return t.filter(n,e.chart.data)}))),e.options.reverse&&n.reverse(),e.legendItems=n},afterBuildLabels:La,beforeFit:La,fit:function(){var e=this,t=e.options,n=t.labels,a=t.display,i=e.ctx,r=z.options._parseFont(n),s=r.size,o=e.legendHitBoxes=[],d=e.minSize,l=e.isHorizontal();if(l?(d.width=e.maxWidth,d.height=a?10:0):(d.width=a?10:0,d.height=e.maxHeight),a){if(i.font=r.string,l){var u=e.lineWidths=[0],c=0;i.textAlign="left",i.textBaseline="middle",z.each(e.legendItems,(function(e,t){var a=ka(n,s)+s/2+i.measureText(e.text).width;(0===t||u[u.length-1]+a+2*n.padding>d.width)&&(c+=s+n.padding,u[u.length-(t>0?0:1)]=0),o[t]={left:0,top:0,width:a,height:s},u[u.length-1]+=a+n.padding})),d.height+=c}else{var h=n.padding,m=e.columnWidths=[],_=e.columnHeights=[],f=n.padding,p=0,g=0;z.each(e.legendItems,(function(e,t){var a=ka(n,s)+s/2+i.measureText(e.text).width;t>0&&g+s+2*h>d.height&&(f+=p+n.padding,m.push(p),_.push(g),p=0,g=0),p=Math.max(p,a),g+=s+h,o[t]={left:0,top:0,width:a,height:s}})),f+=p,m.push(p),_.push(g),d.width+=f}e.width=d.width,e.height=d.height}else e.width=d.width=e.height=d.height=0},afterFit:La,isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},draw:function(){var e=this,t=e.options,n=t.labels,a=W.global,i=a.defaultColor,r=a.elements.line,s=e.height,o=e.columnHeights,d=e.width,l=e.lineWidths;if(t.display){var u,c=va(t.rtl,e.left,e.minSize.width),h=e.ctx,m=ba(n.fontColor,a.defaultFontColor),_=z.options._parseFont(n),f=_.size;h.textAlign=c.textAlign("left"),h.textBaseline="middle",h.lineWidth=.5,h.strokeStyle=m,h.fillStyle=m,h.font=_.string;var p=ka(n,f),g=e.legendHitBoxes,y=function(e,a){switch(t.align){case"start":return n.padding;case"end":return e-a;default:return(e-a+n.padding)/2}},M=e.isHorizontal();u=M?{x:e.left+y(d,l[0]),y:e.top+n.padding,line:0}:{x:e.left+n.padding,y:e.top+y(s,o[0]),line:0},z.rtl.overrideTextDirection(e.ctx,t.textDirection);var v=f+n.padding;z.each(e.legendItems,(function(t,a){var m=h.measureText(t.text).width,_=p+f/2+m,L=u.x,b=u.y;c.setWidth(e.minSize.width),M?a>0&&L+_+n.padding>e.left+e.minSize.width&&(b=u.y+=v,u.line++,L=u.x=e.left+y(d,l[u.line])):a>0&&b+v>e.top+e.minSize.height&&(L=u.x=L+e.columnWidths[u.line]+n.padding,u.line++,b=u.y=e.top+y(s,o[u.line]));var k=c.x(L);!function(e,t,a){if(!(isNaN(p)||p<=0)){h.save();var s=ba(a.lineWidth,r.borderWidth);if(h.fillStyle=ba(a.fillStyle,i),h.lineCap=ba(a.lineCap,r.borderCapStyle),h.lineDashOffset=ba(a.lineDashOffset,r.borderDashOffset),h.lineJoin=ba(a.lineJoin,r.borderJoinStyle),h.lineWidth=s,h.strokeStyle=ba(a.strokeStyle,i),h.setLineDash&&h.setLineDash(ba(a.lineDash,r.borderDash)),n&&n.usePointStyle){var o=p*Math.SQRT2/2,d=c.xPlus(e,p/2),l=t+f/2;z.canvas.drawPoint(h,a.pointStyle,o,d,l,a.rotation)}else h.fillRect(c.leftForLtr(e,p),t,p,f),0!==s&&h.strokeRect(c.leftForLtr(e,p),t,p,f);h.restore()}}(k,b,t),g[a].left=c.leftForLtr(k,g[a].width),g[a].top=b,function(e,t,n,a){var i=f/2,r=c.xPlus(e,p+i),s=t+i;h.fillText(n.text,r,s),n.hidden&&(h.beginPath(),h.lineWidth=2,h.moveTo(r,s),h.lineTo(c.xPlus(r,a),s),h.stroke())}(k,b,t,m),M?u.x+=_+n.padding:u.y+=v})),z.rtl.restoreTextDirection(e.ctx,t.textDirection)}},_getLegendItemAt:function(e,t){var n,a,i,r=this;if(e>=r.left&&e<=r.right&&t>=r.top&&t<=r.bottom)for(i=r.legendHitBoxes,n=0;n<i.length;++n)if(e>=(a=i[n]).left&&e<=a.left+a.width&&t>=a.top&&t<=a.top+a.height)return r.legendItems[n];return null},handleEvent:function(e){var t,n=this,a=n.options,i="mouseup"===e.type?"click":e.type;if("mousemove"===i){if(!a.onHover&&!a.onLeave)return}else{if("click"!==i)return;if(!a.onClick)return}t=n._getLegendItemAt(e.x,e.y),"click"===i?t&&a.onClick&&a.onClick.call(n,e.native,t):(a.onLeave&&t!==n._hoveredItem&&(n._hoveredItem&&a.onLeave.call(n,e.native,n._hoveredItem),n._hoveredItem=t),a.onHover&&t&&a.onHover.call(n,e.native,t))}});function Da(e,t){var n=new Ya({ctx:e.ctx,options:t,chart:e});ft.configure(e,n,t),ft.addBox(e,n),e.legend=n}var wa={id:"legend",_element:Ya,beforeInit:function(e){var t=e.options.legend;t&&Da(e,t)},beforeUpdate:function(e){var t=e.options.legend,n=e.legend;t?(z.mergeIf(t,W.global.legend),n?(ft.configure(e,n,t),n.options=t):Da(e,t)):n&&(ft.removeBox(e,n),delete e.legend)},afterEvent:function(e,t){var n=e.legend;n&&n.handleEvent(t)}},xa=z.noop;W._set("global",{title:{display:!1,fontStyle:"bold",fullWidth:!0,padding:10,position:"top",text:"",weight:2e3}});var Ta=G.extend({initialize:function(e){z.extend(this,e),this.legendHitBoxes=[]},beforeUpdate:xa,update:function(e,t,n){var a=this;return a.beforeUpdate(),a.maxWidth=e,a.maxHeight=t,a.margins=n,a.beforeSetDimensions(),a.setDimensions(),a.afterSetDimensions(),a.beforeBuildLabels(),a.buildLabels(),a.afterBuildLabels(),a.beforeFit(),a.fit(),a.afterFit(),a.afterUpdate(),a.minSize},afterUpdate:xa,beforeSetDimensions:xa,setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0,e.minSize={width:0,height:0}},afterSetDimensions:xa,beforeBuildLabels:xa,buildLabels:xa,afterBuildLabels:xa,beforeFit:xa,fit:function(){var e,t=this,n=t.options,a=t.minSize={},i=t.isHorizontal();n.display?(e=(z.isArray(n.text)?n.text.length:1)*z.options._parseFont(n).lineHeight+2*n.padding,t.width=a.width=i?t.maxWidth:e,t.height=a.height=i?e:t.maxHeight):t.width=a.width=t.height=a.height=0},afterFit:xa,isHorizontal:function(){var e=this.options.position;return"top"===e||"bottom"===e},draw:function(){var e=this,t=e.ctx,n=e.options;if(n.display){var a,i,r,s=z.options._parseFont(n),o=s.lineHeight,d=o/2+n.padding,l=0,u=e.top,c=e.left,h=e.bottom,m=e.right;t.fillStyle=z.valueOrDefault(n.fontColor,W.global.defaultFontColor),t.font=s.string,e.isHorizontal()?(i=c+(m-c)/2,r=u+d,a=m-c):(i="left"===n.position?c+d:m-d,r=u+(h-u)/2,a=h-u,l=Math.PI*("left"===n.position?-.5:.5)),t.save(),t.translate(i,r),t.rotate(l),t.textAlign="center",t.textBaseline="middle";var _=n.text;if(z.isArray(_))for(var f=0,p=0;p<_.length;++p)t.fillText(_[p],0,f,a),f+=o;else t.fillText(_,0,0,a);t.restore()}}});function Sa(e,t){var n=new Ta({ctx:e.ctx,options:t,chart:e});ft.configure(e,n,t),ft.addBox(e,n),e.titleBlock=n}var Ha={},ja=Ma,Pa=wa,Ca={id:"title",_element:Ta,beforeInit:function(e){var t=e.options.title;t&&Sa(e,t)},beforeUpdate:function(e){var t=e.options.title,n=e.titleBlock;t?(z.mergeIf(t,W.global.title),n?(ft.configure(e,n,t),n.options=t):Sa(e,t)):n&&(ft.removeBox(e,n),delete e.titleBlock)}};for(var Aa in Ha.filler=ja,Ha.legend=Pa,Ha.title=Ca,Xt.helpers=z,function(){function e(e,t,n){var a;return"string"==typeof e?(a=parseInt(e,10),-1!==e.indexOf("%")&&(a=a/100*t.parentNode[n])):a=e,a}function t(e){return null!=e&&"none"!==e}function n(n,a,i){var r=document.defaultView,s=z._getParentNode(n),o=r.getComputedStyle(n)[a],d=r.getComputedStyle(s)[a],l=t(o),u=t(d),c=Number.POSITIVE_INFINITY;return l||u?Math.min(l?e(o,n,i):c,u?e(d,s,i):c):"none"}z.where=function(e,t){if(z.isArray(e)&&Array.prototype.filter)return e.filter(t);var n=[];return z.each(e,(function(e){t(e)&&n.push(e)})),n},z.findIndex=Array.prototype.findIndex?function(e,t,n){return e.findIndex(t,n)}:function(e,t,n){n=void 0===n?e:n;for(var a=0,i=e.length;a<i;++a)if(t.call(n,e[a],a,e))return a;return-1},z.findNextWhere=function(e,t,n){z.isNullOrUndef(n)&&(n=-1);for(var a=n+1;a<e.length;a++){var i=e[a];if(t(i))return i}},z.findPreviousWhere=function(e,t,n){z.isNullOrUndef(n)&&(n=e.length);for(var a=n-1;a>=0;a--){var i=e[a];if(t(i))return i}},z.isNumber=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},z.almostEquals=function(e,t,n){return Math.abs(e-t)<n},z.almostWhole=function(e,t){var n=Math.round(e);return n-t<=e&&n+t>=e},z.max=function(e){return e.reduce((function(e,t){return isNaN(t)?e:Math.max(e,t)}),Number.NEGATIVE_INFINITY)},z.min=function(e){return e.reduce((function(e,t){return isNaN(t)?e:Math.min(e,t)}),Number.POSITIVE_INFINITY)},z.sign=Math.sign?function(e){return Math.sign(e)}:function(e){return 0==(e=+e)||isNaN(e)?e:e>0?1:-1},z.toRadians=function(e){return e*(Math.PI/180)},z.toDegrees=function(e){return e*(180/Math.PI)},z._decimalPlaces=function(e){if(z.isFinite(e)){for(var t=1,n=0;Math.round(e*t)/t!==e;)t*=10,n++;return n}},z.getAngleFromPoint=function(e,t){var n=t.x-e.x,a=t.y-e.y,i=Math.sqrt(n*n+a*a),r=Math.atan2(a,n);return r<-.5*Math.PI&&(r+=2*Math.PI),{angle:r,distance:i}},z.distanceBetweenPoints=function(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))},z.aliasPixel=function(e){return e%2==0?0:.5},z._alignPixel=function(e,t,n){var a=e.currentDevicePixelRatio,i=n/2;return Math.round((t-i)*a)/a+i},z.splineCurve=function(e,t,n,a){var i=e.skip?t:e,r=t,s=n.skip?t:n,o=Math.sqrt(Math.pow(r.x-i.x,2)+Math.pow(r.y-i.y,2)),d=Math.sqrt(Math.pow(s.x-r.x,2)+Math.pow(s.y-r.y,2)),l=o/(o+d),u=d/(o+d),c=a*(l=isNaN(l)?0:l),h=a*(u=isNaN(u)?0:u);return{previous:{x:r.x-c*(s.x-i.x),y:r.y-c*(s.y-i.y)},next:{x:r.x+h*(s.x-i.x),y:r.y+h*(s.y-i.y)}}},z.EPSILON=Number.EPSILON||1e-14,z.splineCurveMonotone=function(e){var t,n,a,i,r,s,o,d,l,u=(e||[]).map((function(e){return{model:e._model,deltaK:0,mK:0}})),c=u.length;for(t=0;t<c;++t)if(!(a=u[t]).model.skip){if(n=t>0?u[t-1]:null,(i=t<c-1?u[t+1]:null)&&!i.model.skip){var h=i.model.x-a.model.x;a.deltaK=0!==h?(i.model.y-a.model.y)/h:0}!n||n.model.skip?a.mK=a.deltaK:!i||i.model.skip?a.mK=n.deltaK:this.sign(n.deltaK)!==this.sign(a.deltaK)?a.mK=0:a.mK=(n.deltaK+a.deltaK)/2}for(t=0;t<c-1;++t)a=u[t],i=u[t+1],a.model.skip||i.model.skip||(z.almostEquals(a.deltaK,0,this.EPSILON)?a.mK=i.mK=0:(r=a.mK/a.deltaK,s=i.mK/a.deltaK,(d=Math.pow(r,2)+Math.pow(s,2))<=9||(o=3/Math.sqrt(d),a.mK=r*o*a.deltaK,i.mK=s*o*a.deltaK)));for(t=0;t<c;++t)(a=u[t]).model.skip||(n=t>0?u[t-1]:null,i=t<c-1?u[t+1]:null,n&&!n.model.skip&&(l=(a.model.x-n.model.x)/3,a.model.controlPointPreviousX=a.model.x-l,a.model.controlPointPreviousY=a.model.y-l*a.mK),i&&!i.model.skip&&(l=(i.model.x-a.model.x)/3,a.model.controlPointNextX=a.model.x+l,a.model.controlPointNextY=a.model.y+l*a.mK))},z.nextItem=function(e,t,n){return n?t>=e.length-1?e[0]:e[t+1]:t>=e.length-1?e[e.length-1]:e[t+1]},z.previousItem=function(e,t,n){return n?t<=0?e[e.length-1]:e[t-1]:t<=0?e[0]:e[t-1]},z.niceNum=function(e,t){var n=Math.floor(z.log10(e)),a=e/Math.pow(10,n);return(t?a<1.5?1:a<3?2:a<7?5:10:a<=1?1:a<=2?2:a<=5?5:10)*Math.pow(10,n)},z.requestAnimFrame="undefined"==typeof window?function(e){e()}:window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e){return window.setTimeout(e,1e3/60)},z.getRelativePosition=function(e,t){var n,a,i=e.originalEvent||e,r=e.target||e.srcElement,s=r.getBoundingClientRect(),o=i.touches;o&&o.length>0?(n=o[0].clientX,a=o[0].clientY):(n=i.clientX,a=i.clientY);var d=parseFloat(z.getStyle(r,"padding-left")),l=parseFloat(z.getStyle(r,"padding-top")),u=parseFloat(z.getStyle(r,"padding-right")),c=parseFloat(z.getStyle(r,"padding-bottom")),h=s.right-s.left-d-u,m=s.bottom-s.top-l-c;return{x:n=Math.round((n-s.left-d)/h*r.width/t.currentDevicePixelRatio),y:a=Math.round((a-s.top-l)/m*r.height/t.currentDevicePixelRatio)}},z.getConstraintWidth=function(e){return n(e,"max-width","clientWidth")},z.getConstraintHeight=function(e){return n(e,"max-height","clientHeight")},z._calculatePadding=function(e,t,n){return(t=z.getStyle(e,t)).indexOf("%")>-1?n*parseInt(t,10)/100:parseInt(t,10)},z._getParentNode=function(e){var t=e.parentNode;return t&&"[object ShadowRoot]"===t.toString()&&(t=t.host),t},z.getMaximumWidth=function(e){var t=z._getParentNode(e);if(!t)return e.clientWidth;var n=t.clientWidth,a=n-z._calculatePadding(t,"padding-left",n)-z._calculatePadding(t,"padding-right",n),i=z.getConstraintWidth(e);return isNaN(i)?a:Math.min(a,i)},z.getMaximumHeight=function(e){var t=z._getParentNode(e);if(!t)return e.clientHeight;var n=t.clientHeight,a=n-z._calculatePadding(t,"padding-top",n)-z._calculatePadding(t,"padding-bottom",n),i=z.getConstraintHeight(e);return isNaN(i)?a:Math.min(a,i)},z.getStyle=function(e,t){return e.currentStyle?e.currentStyle[t]:document.defaultView.getComputedStyle(e,null).getPropertyValue(t)},z.retinaScale=function(e,t){var n=e.currentDevicePixelRatio=t||"undefined"!=typeof window&&window.devicePixelRatio||1;if(1!==n){var a=e.canvas,i=e.height,r=e.width;a.height=i*n,a.width=r*n,e.ctx.scale(n,n),a.style.height||a.style.width||(a.style.height=i+"px",a.style.width=r+"px")}},z.fontString=function(e,t,n){return t+" "+e+"px "+n},z.longestText=function(e,t,n,a){var i=(a=a||{}).data=a.data||{},r=a.garbageCollect=a.garbageCollect||[];a.font!==t&&(i=a.data={},r=a.garbageCollect=[],a.font=t),e.font=t;var s,o,d,l,u,c=0,h=n.length;for(s=0;s<h;s++)if(null!=(l=n[s])&&!0!==z.isArray(l))c=z.measureText(e,i,r,c,l);else if(z.isArray(l))for(o=0,d=l.length;o<d;o++)null==(u=l[o])||z.isArray(u)||(c=z.measureText(e,i,r,c,u));var m=r.length/2;if(m>n.length){for(s=0;s<m;s++)delete i[r[s]];r.splice(0,m)}return c},z.measureText=function(e,t,n,a,i){var r=t[i];return r||(r=t[i]=e.measureText(i).width,n.push(i)),r>a&&(a=r),a},z.numberOfLabelLines=function(e){var t=1;return z.each(e,(function(e){z.isArray(e)&&e.length>t&&(t=e.length)})),t},z.color=L?function(e){return e instanceof CanvasGradient&&(e=W.global.defaultColor),L(e)}:function(e){return console.error("Color.js not found!"),e},z.getHoverColor=function(e){return e instanceof CanvasPattern||e instanceof CanvasGradient?e:z.color(e).saturate(.5).darken(.1).rgbString()}}(),Xt._adapters=en,Xt.Animation=X,Xt.animationService=Z,Xt.controllers=Ze,Xt.DatasetController=ae,Xt.defaults=W,Xt.Element=G,Xt.elements=be,Xt.Interaction=rt,Xt.layouts=ft,Xt.platform=St,Xt.plugins=Ht,Xt.Scale=pn,Xt.scaleService=jt,Xt.Ticks=tn,Xt.Tooltip=zt,Xt.helpers.each(la,(function(e,t){Xt.scaleService.registerScaleType(t,e,e._defaults)})),Ha)Ha.hasOwnProperty(Aa)&&Xt.plugins.register(Ha[Aa]);Xt.platform.initialize();var Oa=Xt;return"undefined"!=typeof window&&(window.Chart=Xt),Xt.Chart=Xt,Xt.Legend=Ha.legend._element,Xt.Title=Ha.title._element,Xt.pluginService=Xt.plugins,Xt.PluginBase=Xt.Element.extend({}),Xt.canvasHelpers=Xt.helpers.canvas,Xt.layoutService=Xt.layouts,Xt.LinearScaleBase=bn,Xt.helpers.each(["Bar","Bubble","Doughnut","Line","PolarArea","Radar","Scatter"],(function(e){Xt[e]=function(t,n){return new Xt(t,Xt.helpers.merge(n||{},{type:e.charAt(0).toLowerCase()+e.slice(1)}))}})),Oa}(function(){try{return n(0)}catch(e){}}())},function(e,t,n){"use strict";n(195);function a(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.likeItem=t,this.getElemenets(),this.bindIncrement()}var t,n,i;return t=e,(n=[{key:"getElemenets",value:function(){this.input=this.likeItem.getElementsByClassName("like__input")[0],this.count=this.likeItem.getElementsByClassName("like__number")[0],this.countNumber=Number(this.count.textContent)}},{key:"bindIncrement",value:function(){var e=this;this.clicked=!1,this.input.addEventListener("click",(function(){e.clicked?e.clicked&&(e.countNumber-=1,e.clicked=!1):(e.countNumber+=1,e.clicked=!0),e.count.textContent=String(e.countNumber)}))}}])&&a(t.prototype,n),i&&a(t,i),e}();document.addEventListener("DOMContentLoaded",(function(){Array.from(document.getElementsByClassName("like__item")).forEach((function(e){new i(e)}))}))},,,,,,,,,,,,function(e,t,n){"use strict";n(190)},function(e,t,n){var a=n(1),i=n(191);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(193),n(177)},function(e,t,n){var a=n(1),i=n(194);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){},function(e,t,n){var a=n(1),i=n(196);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(198)},function(e,t,n){var a=n(1),i=n(199);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(201)},function(e,t,n){var a=n(1),i=n(202);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(204)},function(e,t,n){var a=n(1),i=n(205);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(207);$((function(){$(".page-item").on("click",(function(){$(this).hasClass("page-active")||($(this).siblings().removeClass("page-active"),$(this).addClass("page-active"))}))}))},function(e,t,n){var a=n(1),i=n(208);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(210);$((function(){$("#slider").slider({range:!0,step:500,max:3e4,min:0,slide:function(e,t){$(".range-slider__end").text(t.values[1]+"P"),$(".range-slider__start").text(t.values[0]+"P")}})}))},function(e,t,n){var a=n(1),i=n(211);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(213)},function(e,t,n){var a=n(1),i=n(214);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){},function(e,t,n){"use strict";n(216);var a=n(176);$((function(){var e={datasets:[{data:[10,20,30],borderColor:["rgb(229, 229, 229)"],borderWidth:3,backgroundColor:["red","rgba(54, 162, 235)","rgba(255, 206, 86 )","black"]}]};new a.Chart($("#myChart"),{type:"pie",options:{events:[]},data:e});$("#myChart").css("width","100%"),$("#myChart").css("height","100%");var t=0;$(".graph__span").each((function(n){$(this).css("background-color",e.datasets[0].backgroundColor[t]),t+=1}))}))},function(e,t,n){var a=n(1),i=n(217);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){},,,,function(e,t,n){"use strict";n.r(t);n(189),n(192),n(197),n(165),n(200),n(168),n(139),n(203),n(143),n(177),n(206),n(162),n(159),n(209),n(142),n(173),n(212),n(156),n(215),n(148),n(222)},function(e,t,n){var a=n(1),i=n(223);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,