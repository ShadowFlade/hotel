@import './vars.scss';
// px to rem
@function rem($pixels, $context: $mainFontSize) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  @return $pixels / $context * 1rem;
}
@function em($size) {
  @return $size/$mainFontSize * 1em;
}
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}
@function wid($size) {
  @return $size/$desktopWidth * 100%;
}
// @function height($size,$desktopWidth,$desktopHeight) {
//   $size/$desktopHeight *100%
// }

@mixin placeholder {
  ::-webkit-input-placeholder {
    @content;
  }
  :-moz-placeholder {
    @content;
  }
  ::-moz-placeholder {
    @content;
  }
  :-ms-input-placeholder {
    @content;
  }
}

@use "sass:color";
$maxWidth: 1920;
$maxWidthContainer: 1170;
@mixin adaptive-value($property, $startSize, $minSize, $type) {
  $addSize: $startSize - $minSize;
  @if $type==1 {
    /* if less than the container */
    #{$property}: $startSize + px;
    @media (max-width:#{$maxWidthContainer + px}) {
      #{$property}: calc(
        (#{$minSize + px})+ #{$addSize} *
          ((100vw-320px) / #{$maxWidthContainer - 320})
      );
    }
  } @else if $type==2 {
    /* if greater that the container */
    #{$property}: $startSize + px;
    @media (min-width:#{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize+px} + #{$addSize} * ((100vw-320px) / #{$maxWidth - 320})
      );
    }
  } @else {
    /* always */
    #{$property}: calc(
      #{$minSize+px} + #{$addSize} * ((100vw-320px) / #{$maxWidth - 320})
    );
  }
}
// width: calc(24px + 16 * ((100vw - 320px) / (1280 - 320))); /*24px это подходящее значение, 16 это макетное значение минус подходящее значение,320 это минимальное значение вьюпорта,1280 его максимальное значение*/
